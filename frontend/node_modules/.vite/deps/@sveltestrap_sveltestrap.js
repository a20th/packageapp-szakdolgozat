import {
  createPopper3 as createPopper
} from "./chunk-T5OIEPFY.js";
import "./chunk-COZXZA4I.js";
import {
  fade
} from "./chunk-BTRGBFK3.js";
import {
  CLASS,
  action,
  add_locations,
  afterUpdate,
  append_styles,
  attribute_effect,
  bind_checked,
  bind_files,
  bind_group,
  bind_select_value,
  bind_this,
  bind_value,
  bind_window_size,
  bubble_event,
  check_target,
  cleanup_styles,
  clsx,
  component,
  createEventDispatcher,
  create_ownership_validator,
  each,
  hmr,
  if_block,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  onDestroy,
  onMount,
  prop,
  remove_input_defaults,
  sanitize_slots,
  set_attribute,
  set_class,
  set_style,
  setup_stores,
  slot,
  spread_props,
  store_get,
  transition,
  validate_store,
  wrap_snippet,
  writable
} from "./chunk-AK3E5YL7.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  from_svg,
  head,
  preventDefault,
  set_text,
  text
} from "./chunk-NYSQHJCV.js";
import {
  $document,
  $window,
  FILENAME,
  HMR,
  add_svelte_meta,
  apply,
  child,
  deep_read_state,
  derived_safe_equal,
  effect,
  equals,
  event,
  first_child,
  get,
  getContext,
  invalidate_inner_signals,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mutable_source,
  mutate,
  next,
  pop,
  push,
  remove_textarea_child,
  replay_events,
  reset,
  set,
  setContext,
  sibling,
  strict_equals,
  template_effect,
  untrack
} from "./chunk-LVQSBV5E.js";
import "./chunk-L3IDHH4W.js";
import "./chunk-W5OFQEOT.js";
import "./chunk-ELKJSBLM.js";
import "./chunk-K63UQA3V.js";
import "./chunk-UGBVNEQM.js";

// node_modules/@sveltestrap/sveltestrap/dist/utils.js
function getOriginalBodyPadding() {
  const style = window ? window.getComputedStyle(document.body, null) : {};
  return parseInt(style && style.getPropertyValue("padding-right") || 0, 10);
}
function getScrollbarWidth() {
  let scrollDiv = document.createElement("div");
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.width = "50px";
  scrollDiv.style.height = "50px";
  scrollDiv.style.overflow = "scroll";
  document.body.appendChild(scrollDiv);
  const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  document.body.removeChild(scrollDiv);
  return scrollbarWidth;
}
function setScrollbarWidth(padding) {
  document.body.style.paddingRight = padding > 0 ? `${padding}px` : null;
}
function isBodyOverflowing() {
  return window ? document.body.clientWidth < window.innerWidth : false;
}
function isObject(value) {
  const type = typeof value;
  return value !== null && (type === "object" || type === "function");
}
function conditionallyUpdateScrollbar() {
  const scrollbarWidth = getScrollbarWidth();
  const fixedContent = document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")[0];
  const bodyPadding = fixedContent ? parseInt(fixedContent.style.paddingRight || 0, 10) : 0;
  if (isBodyOverflowing()) {
    setScrollbarWidth(bodyPadding + scrollbarWidth);
  }
}
function getColumnSizeClass(isXs, colWidth, colSize) {
  if (colSize === true || colSize === "") {
    return isXs ? "col" : `col-${colWidth}`;
  } else if (colSize === "auto") {
    return isXs ? "col-auto" : `col-${colWidth}-auto`;
  }
  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
}
function browserEvent(target, ...args) {
  target.addEventListener(...args);
  return () => target.removeEventListener(...args);
}
function getNewCarouselActiveIndex(direction, items, activeIndex) {
  if (direction === "prev") {
    return activeIndex === 0 ? items.length - 1 : activeIndex - 1;
  }
  if (direction === "next") {
    return activeIndex === items.length - 1 ? 0 : activeIndex + 1;
  }
}
function toClassName(value) {
  let result = "";
  if (typeof value === "string" || typeof value === "number") {
    result += value;
  } else if (typeof value === "object") {
    if (Array.isArray(value)) {
      result = value.map(toClassName).filter(Boolean).join(" ");
    } else {
      for (let key in value) {
        if (value[key]) {
          result && (result += " ");
          result += key;
        }
      }
    }
  }
  return result;
}
var classnames = (...args) => args.map(toClassName).filter(Boolean).join(" ");
function getTransitionDuration(element) {
  if (!element) return 0;
  let { transitionDuration, transitionDelay } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay);
  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  }
  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1e3;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}

// node_modules/@sveltestrap/sveltestrap/dist/Accordion/Accordion.svelte
Accordion[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Accordion/Accordion.svelte";
var root = add_locations(from_html(`<div><!></div>`), Accordion[FILENAME], [[63, 0]]);
function Accordion($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "flush", "stayOpen", "theme"]);
  push($$props, false, Accordion);
  const $open = () => (validate_store(open, "open"), store_get(open, "$open", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const classes = mutable_source();
  const dispatch = createEventDispatcher();
  let className = prop($$props, "class", 8, "");
  let flush = prop($$props, "flush", 8, false);
  let stayOpen = prop($$props, "stayOpen", 8, false);
  let theme = prop($$props, "theme", 8, void 0);
  const open = writable(null);
  setContext("accordion", {
    open,
    stayOpen: stayOpen(),
    /**
     * Toggles the open state of the accordion based on the provided ID.
     * @param {HTMLDivElement} element - The accordion item element
     */
    toggle: (element) => {
      if (strict_equals($open(), element)) {
        open.set(null);
      } else {
        open.set(element);
      }
      dispatch("toggle", { [element]: strict_equals($open(), element) });
    }
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(flush())),
    () => {
      set(classes, classnames(className(), "accordion", { "accordion-flush": flush() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root();
  attribute_effect(div, () => ({
    class: get(classes),
    "data-bs-theme": theme(),
    ...$$restProps
  }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Accordion = hmr(Accordion, () => Accordion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accordion[HMR].source;
    set(Accordion[HMR].source, module.default[HMR].original);
  });
}
var Accordion_default = Accordion;

// node_modules/@sveltestrap/sveltestrap/dist/AccordionHeader/AccordionHeader.svelte
AccordionHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/AccordionHeader/AccordionHeader.svelte";
var root2 = add_locations(from_html(`<h2><button type="button"><!></button></h2>`), AccordionHeader[FILENAME], [[15, 0, [[16, 2]]]]);
function AccordionHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, AccordionHeader);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "accordion-button"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var h2 = root2();
  attribute_effect(h2, () => ({ class: "accordion-header", ...$$restProps }));
  var button = child(h2);
  var node = child(button);
  slot(node, $$props, "default", {}, null);
  reset(button);
  reset(h2);
  template_effect(() => set_class(button, 1, clsx(get(classes))));
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, h2);
  return pop($$exports);
}
if (import.meta.hot) {
  AccordionHeader = hmr(AccordionHeader, () => AccordionHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionHeader[HMR].source;
    set(AccordionHeader[HMR].source, module.default[HMR].original);
  });
}
var AccordionHeader_default = AccordionHeader;

// node_modules/@sveltestrap/sveltestrap/dist/transitions.js
function backdropIn(node) {
  node.style.display = "block";
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t === 0) {
        node.classList.add("show");
      }
    }
  };
}
function backdropOut(node) {
  node.classList.remove("show");
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t === 0) {
        node.style.display = "none";
      }
    }
  };
}
function collapseOut(node, params) {
  const dimension = params.horizontal ? "width" : "height";
  node.style[dimension] = `${node.getBoundingClientRect()[dimension]}px`;
  node.classList.add("collapsing");
  node.classList.remove("collapse", "show");
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t > 0) {
        node.style[dimension] = "";
      } else if (t === 0) {
        node.classList.remove("collapsing");
        node.classList.add("collapse");
      }
    }
  };
}
function collapseIn(node, params) {
  const horizontal = params.horizontal;
  const dimension = horizontal ? "width" : "height";
  node.classList.add("collapsing");
  node.classList.remove("collapse", "show");
  node.style[dimension] = 0;
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t < 1) {
        if (horizontal) {
          node.style.width = `${node.scrollWidth}px`;
        } else {
          node.style.height = `${node.scrollHeight}px`;
        }
      } else {
        node.classList.remove("collapsing");
        node.classList.add("collapse", "show");
        node.style[dimension] = "";
      }
    }
  };
}
function modalIn(node) {
  node.style.display = "block";
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t > 0) {
        node.classList.add("show");
      }
    }
  };
}
function modalOut(node) {
  node.classList.remove("show");
  const duration = getTransitionDuration(node);
  return {
    duration,
    tick: (t) => {
      if (t === 1) {
        node.style.display = "none";
      }
    }
  };
}

// node_modules/@sveltestrap/sveltestrap/dist/toggle.js
var defaultToggleEvents = ["touchstart", "click"];
var toggle_default = (toggler, togglerFn) => {
  let unbindEvents;
  if (typeof toggler === "string" && typeof window !== "undefined" && document && document.createElement) {
    let selection = document.querySelectorAll(toggler);
    if (!selection.length) {
      selection = document.querySelectorAll(`#${toggler}`);
    }
    if (!selection.length) {
      throw new Error(`The target '${toggler}' could not be identified in the dom, tip: check spelling`);
    }
    defaultToggleEvents.forEach((event2) => {
      selection.forEach((element) => {
        element.addEventListener(event2, togglerFn);
      });
    });
    unbindEvents = () => {
      defaultToggleEvents.forEach((event2) => {
        selection.forEach((element) => {
          element.removeEventListener(event2, togglerFn);
        });
      });
    };
  }
  return () => {
    if (typeof unbindEvents === "function") {
      unbindEvents();
      unbindEvents = void 0;
    }
  };
};

// node_modules/@sveltestrap/sveltestrap/dist/Collapse/Collapse.svelte
Collapse[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Collapse/Collapse.svelte";
var root_1 = add_locations(from_html(`<div><!></div>`), Collapse[FILENAME], [[64, 2]]);
function Collapse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "isOpen",
    "class",
    "horizontal",
    "navbar",
    "onEntering",
    "onEntered",
    "onExiting",
    "onExited",
    "expand",
    "toggler"
  ]);
  push($$props, false, Collapse);
  const classes = mutable_source();
  const dispatch = createEventDispatcher();
  let isOpen = prop($$props, "isOpen", 12, false);
  let className = prop($$props, "class", 8, "");
  let horizontal = prop($$props, "horizontal", 8, false);
  let navbar = prop($$props, "navbar", 8, false);
  let onEntering = prop($$props, "onEntering", 8, () => dispatch("opening"));
  let onEntered = prop($$props, "onEntered", 8, () => dispatch("open"));
  let onExiting = prop($$props, "onExiting", 8, () => dispatch("closing"));
  let onExited = prop($$props, "onExited", 8, () => dispatch("close"));
  let expand = prop($$props, "expand", 8, false);
  let toggler = prop($$props, "toggler", 8, null);
  onMount(() => toggle_default(toggler(), (e) => {
    isOpen(!isOpen());
    e.preventDefault();
  }));
  let windowWidth = mutable_source(0);
  let _wasMaximized = mutable_source(false);
  const minWidth = mutable_source({});
  mutate(minWidth, get(minWidth)["xs"] = 0);
  mutate(minWidth, get(minWidth)["sm"] = 576);
  mutate(minWidth, get(minWidth)["md"] = 768);
  mutate(minWidth, get(minWidth)["lg"] = 992);
  mutate(minWidth, get(minWidth)["xl"] = 1200);
  function notify() {
    dispatch("update", isOpen());
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(horizontal()), deep_read_state(navbar())),
    () => {
      set(classes, classnames(className(), {
        "collapse-horizontal": horizontal(),
        "navbar-collapse": navbar()
      }));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(navbar()), deep_read_state(expand()), get(windowWidth), get(minWidth), deep_read_state(isOpen()), get(_wasMaximized)),
    () => {
      if (navbar() && expand()) {
        if (get(windowWidth) >= get(minWidth)[expand()] && !isOpen()) {
          isOpen(true);
          set(_wasMaximized, true);
          notify();
        } else if (get(windowWidth) < get(minWidth)[expand()] && get(_wasMaximized)) {
          isOpen(false);
          set(_wasMaximized, false);
          notify();
        }
      }
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_1();
      attribute_effect(div, () => ({
        style: navbar() ? void 0 : "overflow: hidden;",
        ...$$restProps,
        class: get(classes)
      }));
      var node_1 = child(div);
      slot(node_1, $$props, "default", {}, null);
      reset(div);
      transition(1, div, () => collapseIn, () => ({ horizontal: horizontal() }));
      transition(2, div, () => collapseOut, () => ({ horizontal: horizontal() }));
      event("introstart", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("introend", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("outrostart", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("outroend", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("introstart", div, function(...$$args) {
        apply(onEntering, this, $$args, Collapse, [74, 19]);
      });
      event("introend", div, function(...$$args) {
        apply(onEntered, this, $$args, Collapse, [75, 17]);
      });
      event("outrostart", div, function(...$$args) {
        apply(onExiting, this, $$args, Collapse, [76, 19]);
      });
      event("outroend", div, function(...$$args) {
        apply(onExited, this, $$args, Collapse, [77, 17]);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent);
      }),
      "if",
      Collapse,
      63,
      0
    );
  }
  bind_window_size("innerWidth", ($$value) => set(windowWidth, $$value));
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Collapse = hmr(Collapse, () => Collapse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Collapse[HMR].source;
    set(Collapse[HMR].source, module.default[HMR].original);
  });
}
var Collapse_default = Collapse;

// node_modules/@sveltestrap/sveltestrap/dist/AccordionItem/AccordionItem.svelte
AccordionItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/AccordionItem/AccordionItem.svelte";
var root_12 = add_locations(from_html(`<!> `, 1), AccordionItem[FILENAME], []);
var root_2 = add_locations(from_html(`<div class="accordion-body"><!></div>`), AccordionItem[FILENAME], [[67, 4]]);
var root3 = add_locations(from_html(`<div><!> <!></div>`), AccordionItem[FILENAME], [[61, 0]]);
function AccordionItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AccordionItem);
  const $open = () => (validate_store(open, "open"), store_get(open, "$open", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const classes = mutable_source();
  const isOpen = mutable_source();
  let className = prop($$props, "class", 8, "");
  let header = prop($$props, "header", 8, "");
  let active = prop($$props, "active", 12, false);
  const dispatch = createEventDispatcher();
  const { stayOpen, toggle, open } = getContext("accordion");
  let accordionRef = mutable_source();
  onMount(() => {
    if (active()) {
      toggle(get(accordionRef));
    }
  });
  const onToggle = () => {
    if (stayOpen) {
      active(!active());
    }
    toggle(get(accordionRef));
    dispatch("toggle", !get(isOpen));
  };
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "accordion-item"));
  });
  legacy_pre_effect(() => (deep_read_state(active()), $open(), get(accordionRef)), () => {
    set(isOpen, stayOpen ? active() : strict_equals($open(), get(accordionRef)));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root3();
  var node = child(div);
  {
    let $0 = derived_safe_equal(() => !get(isOpen) && "collapsed");
    add_svelte_meta(
      () => AccordionHeader_default(node, {
        get class() {
          return get($0);
        },
        $$events: { click: onToggle },
        children: wrap_snippet(AccordionItem, ($$anchor2, $$slotProps) => {
          var fragment = root_12();
          var node_1 = first_child(fragment);
          slot(node_1, $$props, "header", {}, null);
          var text2 = sibling(node_1);
          template_effect(() => set_text(text2, ` ${header() ?? ""}`));
          append($$anchor2, fragment);
        }),
        $$slots: { default: true }
      }),
      "component",
      AccordionItem,
      62,
      2,
      { componentTag: "AccordionHeader" }
    );
  }
  var node_2 = sibling(node, 2);
  add_svelte_meta(
    () => Collapse_default(node_2, {
      get isOpen() {
        return get(isOpen);
      },
      class: "accordion-collapse",
      $$events: {
        introstart($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        introend($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        outrostart($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        outroend($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(AccordionItem, ($$anchor2, $$slotProps) => {
        var div_1 = root_2();
        var node_3 = child(div_1);
        slot(node_3, $$props, "default", {}, null);
        reset(div_1);
        append($$anchor2, div_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    AccordionItem,
    66,
    2,
    { componentTag: "Collapse" }
  );
  reset(div);
  bind_this(div, ($$value) => set(accordionRef, $$value), () => get(accordionRef));
  template_effect(() => set_class(div, 1, clsx(get(classes))));
  append($$anchor, div);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  AccordionItem = hmr(AccordionItem, () => AccordionItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionItem[HMR].source;
    set(AccordionItem[HMR].source, module.default[HMR].original);
  });
}
var AccordionItem_default = AccordionItem;

// node_modules/@sveltestrap/sveltestrap/dist/Alert/Alert.svelte
Alert[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Alert/Alert.svelte";
var root_22 = add_locations(from_html(`<h4 class="alert-heading"> <!></h4>`), Alert[FILENAME], [[99, 6]]);
var root_3 = add_locations(from_html(`<button type="button"></button>`), Alert[FILENAME], [[104, 6]]);
var root_13 = add_locations(from_html(`<div><!> <!> <!></div>`), Alert[FILENAME], [[97, 2]]);
function Alert($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "content",
    "closeAriaLabel",
    "closeClassName",
    "color",
    "dismissible",
    "fade",
    "heading",
    "isOpen",
    "toggle",
    "theme",
    "transition"
  ]);
  push($$props, false, Alert);
  const showClose = mutable_source();
  const handleToggle = mutable_source();
  const classes = mutable_source();
  const closeClassNames = mutable_source();
  let className = prop($$props, "class", 8, "");
  let content = prop($$props, "content", 8, void 0);
  let closeAriaLabel = prop($$props, "closeAriaLabel", 8, "Close");
  let closeClassName = prop($$props, "closeClassName", 8, "");
  let color = prop($$props, "color", 8, "success");
  let dismissible = prop($$props, "dismissible", 8, false);
  let fade2 = prop($$props, "fade", 8, true);
  let heading = prop($$props, "heading", 8, "");
  let isOpen = prop($$props, "isOpen", 12, true);
  let toggle = prop($$props, "toggle", 8, void 0);
  let theme = prop($$props, "theme", 8, void 0);
  let transition2 = prop($$props, "transition", 24, () => ({ duration: fade2() ? 400 : 0 }));
  legacy_pre_effect(
    () => (deep_read_state(dismissible()), deep_read_state(toggle())),
    () => {
      set(showClose, dismissible() || toggle());
    }
  );
  legacy_pre_effect(() => deep_read_state(toggle()), () => {
    set(handleToggle, toggle() || (() => isOpen(false)));
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(color()), get(showClose)),
    () => {
      set(classes, classnames(className(), "alert", `alert-${color()}`, { "alert-dismissible": get(showClose) }));
    }
  );
  legacy_pre_effect(() => (classnames, deep_read_state(closeClassName())), () => {
    set(closeClassNames, classnames("btn-close", closeClassName()));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var div = root_13();
      attribute_effect(div, () => ({
        ...$$restProps,
        "data-bs-theme": theme(),
        class: get(classes),
        role: "alert"
      }));
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var h4 = root_22();
          var text2 = child(h4, true);
          var node_2 = sibling(text2);
          slot(node_2, $$props, "heading", {}, null);
          reset(h4);
          template_effect(() => set_text(text2, heading()));
          append($$anchor3, h4);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (deep_read_state(heading()), untrack(() => heading() || $$slots.heading)) $$render(consequent);
          }),
          "if",
          Alert,
          98,
          4
        );
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var button = root_3();
          template_effect(() => {
            set_class(button, 1, clsx(get(closeClassNames)));
            set_attribute(button, "aria-label", closeAriaLabel());
          });
          event("click", button, function(...$$args) {
            apply(() => get(handleToggle), this, $$args, Alert, [104, 90]);
          });
          append($$anchor3, button);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (get(showClose)) $$render(consequent_1);
          }),
          "if",
          Alert,
          103,
          4
        );
      }
      var node_4 = sibling(node_3, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, content()));
          append($$anchor3, text_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          slot(node_5, $$props, "default", {}, null);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (content()) $$render(consequent_2);
            else $$render(alternate, false);
          }),
          "if",
          Alert,
          106,
          4
        );
      }
      reset(div);
      transition(3, div, () => fade, transition2);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent_3);
      }),
      "if",
      Alert,
      96,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Alert = hmr(Alert, () => Alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alert[HMR].source;
    set(Alert[HMR].source, module.default[HMR].original);
  });
}
var Alert_default = Alert;

// node_modules/@sveltestrap/sveltestrap/dist/Alert/UncontrolledAlert.svelte
UncontrolledAlert[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Alert/UncontrolledAlert.svelte";
function UncontrolledAlert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, UncontrolledAlert);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Alert_default(node, spread_props(() => $$restProps, {
      dismissible: true,
      children: wrap_snippet(UncontrolledAlert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    UncontrolledAlert,
    5,
    0,
    { componentTag: "Alert" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  UncontrolledAlert = hmr(UncontrolledAlert, () => UncontrolledAlert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UncontrolledAlert[HMR].source;
    set(UncontrolledAlert[HMR].source, module.default[HMR].original);
  });
}

// node_modules/@sveltestrap/sveltestrap/dist/Badge/Badge.svelte
Badge[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Badge/Badge.svelte";
var root_4 = add_locations(from_html(`<span class="visually-hidden"> </span>`), Badge[FILENAME], [[110, 6]]);
var root_14 = add_locations(from_html(`<a><!> <!></a>`), Badge[FILENAME], [[103, 2]]);
var root_8 = add_locations(from_html(`<span class="visually-hidden"> </span>`), Badge[FILENAME], [[121, 6]]);
var root_5 = add_locations(from_html(`<span><!> <!></span>`), Badge[FILENAME], [[114, 2]]);
function Badge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "ariaLabel",
    "border",
    "class",
    "content",
    "color",
    "href",
    "indicator",
    "pill",
    "positioned",
    "placement",
    "shadow",
    "theme"
  ]);
  push($$props, false, Badge);
  const classes = mutable_source();
  let ariaLabel = prop($$props, "ariaLabel", 8, "");
  let border = prop($$props, "border", 8, false);
  let className = prop($$props, "class", 8, "");
  let content = prop($$props, "content", 8, "");
  let color = prop($$props, "color", 8, "secondary");
  let href = prop($$props, "href", 8, "");
  let indicator = prop($$props, "indicator", 8, false);
  let pill = prop($$props, "pill", 8, false);
  let positioned = prop($$props, "positioned", 8, false);
  let placement = prop($$props, "placement", 8, "top-0 start-100");
  let shadow = prop($$props, "shadow", 8, false);
  let theme = prop($$props, "theme", 8, void 0);
  legacy_pre_effect(
    () => (classnames, deep_read_state(color()), deep_read_state(pill()), deep_read_state(positioned()), deep_read_state(placement()), deep_read_state(indicator()), deep_read_state(border()), deep_read_state(shadow()), deep_read_state(className())),
    () => {
      set(classes, classnames(
        "badge",
        `text-bg-${color()}`,
        pill() ? "rounded-pill" : false,
        positioned() ? "position-absolute translate-middle" : false,
        positioned() ? placement() : false,
        indicator() ? "p-2" : false,
        border() ? strict_equals(typeof border(), "string") ? border() : "border" : false,
        shadow() ? strict_equals(typeof shadow(), "string") ? shadow() : "shadow" : false,
        className()
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var a = root_14();
      attribute_effect(a, () => ({
        ...$$restProps,
        href: href(),
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var text2 = text();
          template_effect(() => set_text(text2, content()));
          append($$anchor3, text2);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(node_2, $$props, "default", {}, null);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (content()) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Badge,
          104,
          4
        );
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var span = root_4();
          var text_1 = child(span, true);
          reset(span);
          template_effect(() => set_text(text_1, ariaLabel()));
          append($$anchor3, span);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (positioned() || indicator()) $$render(consequent_1);
          }),
          "if",
          Badge,
          109,
          4
        );
      }
      reset(a);
      append($$anchor2, a);
    };
    var alternate_2 = ($$anchor2) => {
      var span_1 = root_5();
      attribute_effect(span_1, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_4 = child(span_1);
      {
        var consequent_3 = ($$anchor3) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, content()));
          append($$anchor3, text_2);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_5 = first_child(fragment_4);
          slot(node_5, $$props, "default", {}, null);
          append($$anchor3, fragment_4);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (content()) $$render(consequent_3);
            else $$render(alternate_1, false);
          }),
          "if",
          Badge,
          115,
          4
        );
      }
      var node_6 = sibling(node_4, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var span_2 = root_8();
          var text_3 = child(span_2, true);
          reset(span_2);
          template_effect(() => set_text(text_3, ariaLabel()));
          append($$anchor3, span_2);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if (positioned() || indicator()) $$render(consequent_4);
          }),
          "if",
          Badge,
          120,
          4
        );
      }
      reset(span_1);
      append($$anchor2, span_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent_2);
        else $$render(alternate_2, false);
      }),
      "if",
      Badge,
      102,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Badge = hmr(Badge, () => Badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge[HMR].source;
    set(Badge[HMR].source, module.default[HMR].original);
  });
}
var Badge_default = Badge;

// node_modules/@sveltestrap/sveltestrap/dist/Breadcrumb/Breadcrumb.svelte
Breadcrumb[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Breadcrumb/Breadcrumb.svelte";
var root4 = add_locations(from_html(`<nav><ol><!></ol></nav>`), Breadcrumb[FILENAME], [[43, 0, [[44, 2]]]]);
function Breadcrumb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "content", "divider", "listClassName", "style"]);
  push($$props, false, Breadcrumb);
  const listClasses = mutable_source();
  const styles = mutable_source();
  let className = prop($$props, "class", 8, "");
  let content = prop($$props, "content", 8, "");
  let divider = prop($$props, "divider", 8, "");
  let listClassName = prop($$props, "listClassName", 8, "");
  let style = prop($$props, "style", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(listClassName())), () => {
    set(listClasses, classnames("breadcrumb", listClassName()));
  });
  legacy_pre_effect(() => (deep_read_state(divider()), deep_read_state(style())), () => {
    set(styles, divider() ? `--bs-breadcrumb-divider: '${divider()}'; ${style() || ""}` : style());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var nav = root4();
  attribute_effect(nav, () => ({ style: get(styles), ...$$restProps, class: className() }));
  var ol = child(nav);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, content()));
      append($$anchor2, text2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (content()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Breadcrumb,
      45,
      4
    );
  }
  reset(ol);
  reset(nav);
  template_effect(() => set_class(ol, 1, clsx(get(listClasses))));
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Breadcrumb = hmr(Breadcrumb, () => Breadcrumb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Breadcrumb[HMR].source;
    set(Breadcrumb[HMR].source, module.default[HMR].original);
  });
}
var Breadcrumb_default = Breadcrumb;

// node_modules/@sveltestrap/sveltestrap/dist/BreadcrumbItem/BreadcrumbItem.svelte
BreadcrumbItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/BreadcrumbItem/BreadcrumbItem.svelte";
var root5 = add_locations(from_html(`<li><!></li>`), BreadcrumbItem[FILENAME], [[29, 0]]);
function BreadcrumbItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "active", "content"]);
  push($$props, false, BreadcrumbItem);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let content = prop($$props, "content", 8, "");
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(active())),
    () => {
      set(classes, classnames(className(), active() ? "active" : false, "breadcrumb-item"));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root5();
  attribute_effect(li, () => ({
    ...$$restProps,
    class: get(classes),
    "aria-current": active() ? "page" : void 0
  }));
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, content()));
      append($$anchor2, text2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (content()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      BreadcrumbItem,
      30,
      2
    );
  }
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  BreadcrumbItem = hmr(BreadcrumbItem, () => BreadcrumbItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BreadcrumbItem[HMR].source;
    set(BreadcrumbItem[HMR].source, module.default[HMR].original);
  });
}
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/@sveltestrap/sveltestrap/dist/Button/Button.svelte
Button[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Button/Button.svelte";
var root_15 = add_locations(from_html(`<a><!></a>`), Button[FILENAME], [[107, 2]]);
var root_42 = add_locations(from_html(`<button><!></button>`), Button[FILENAME], [[125, 2]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "active",
    "block",
    "content",
    "close",
    "color",
    "disabled",
    "href",
    "inner",
    "outline",
    "size",
    "value"
  ]);
  push($$props, false, Button);
  const ariaLabel = mutable_source();
  const classes = mutable_source();
  const defaultAriaLabel = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let block = prop($$props, "block", 8, false);
  let content = prop($$props, "content", 8, "");
  let close = prop($$props, "close", 8, false);
  let color = prop($$props, "color", 8, "secondary");
  let disabled = prop($$props, "disabled", 8, false);
  let href = prop($$props, "href", 8, "");
  let inner = prop($$props, "inner", 12, void 0);
  let outline = prop($$props, "outline", 8, false);
  let size = prop($$props, "size", 8, "");
  let value = prop($$props, "value", 8, "");
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(ariaLabel, $$sanitized_props["aria-label"]);
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(close()), deep_read_state(outline()), deep_read_state(color()), deep_read_state(size()), deep_read_state(block()), deep_read_state(active())),
    () => {
      set(classes, classnames(className(), close() ? "btn-close" : "btn", close() || `btn${outline() ? "-outline" : ""}-${color()}`, size() ? `btn-${size()}` : false, block() ? "d-block w-100" : false, { active: active() }));
    }
  );
  legacy_pre_effect(() => deep_read_state(close()), () => {
    set(defaultAriaLabel, close() ? "Close" : null);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_15();
      attribute_effect(
        a,
        ($0) => ({
          ...$$restProps,
          class: get(classes),
          href: href(),
          "aria-label": get(ariaLabel) || get(defaultAriaLabel),
          [CLASS]: $0
        }),
        [() => ({ disabled: disabled() })]
      );
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var text2 = text();
          template_effect(() => set_text(text2, content()));
          append($$anchor3, text2);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(node_2, $$props, "default", {}, null);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (content()) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Button,
          118,
          4
        );
      }
      reset(a);
      bind_this(a, ($$value) => inner($$value), () => inner());
      event("click", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, a);
    };
    var alternate_2 = ($$anchor2) => {
      var button = root_42();
      attribute_effect(button, () => ({
        ...$$restProps,
        class: get(classes),
        disabled: disabled(),
        value: value(),
        "aria-label": get(ariaLabel) || get(defaultAriaLabel)
      }));
      var node_3 = child(button);
      slot(node_3, $$props, "default", {}, ($$anchor3) => {
        var fragment_3 = comment();
        var node_4 = first_child(fragment_3);
        {
          var consequent_2 = ($$anchor4) => {
            var text_1 = text();
            template_effect(() => set_text(text_1, content()));
            append($$anchor4, text_1);
          };
          var alternate_1 = ($$anchor4) => {
            var fragment_5 = comment();
            var node_5 = first_child(fragment_5);
            slot(node_5, $$props, "default", {}, null);
            append($$anchor4, fragment_5);
          };
          add_svelte_meta(
            () => if_block(node_4, ($$render) => {
              if (content()) $$render(consequent_2);
              else $$render(alternate_1, false);
            }),
            "if",
            Button,
            137,
            6
          );
        }
        append($$anchor3, fragment_3);
      });
      reset(button);
      bind_this(button, ($$value) => inner($$value), () => inner());
      event("click", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, button);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent_1);
        else $$render(alternate_2, false);
      }),
      "if",
      Button,
      106,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var Button_default = Button;

// node_modules/@sveltestrap/sveltestrap/dist/popper.js
function createPopperActions(initOptions) {
  let contentNode;
  let options = initOptions;
  let popperInstance = null;
  let referenceNode;
  const initPopper = () => {
    if (referenceNode && contentNode) {
      popperInstance = createPopper(referenceNode, contentNode, options);
    }
  };
  const deinitPopper = () => {
    if (popperInstance) {
      popperInstance.destroy();
      popperInstance = null;
    }
  };
  const referenceAction = (node) => {
    referenceNode = node;
    initPopper();
    return {
      destroy() {
        deinitPopper();
      }
    };
  };
  const contentAction = (node, contentOptions) => {
    contentNode = node;
    options = Object.assign(Object.assign({}, initOptions), contentOptions);
    initPopper();
    return {
      update(newContentOptions) {
        options = Object.assign(Object.assign({}, initOptions), newContentOptions);
        if (popperInstance && options) {
          popperInstance.setOptions(options);
        }
      },
      destroy() {
        deinitPopper();
      }
    };
  };
  return [referenceAction, contentAction, () => popperInstance];
}

// node_modules/@sveltestrap/sveltestrap/dist/Dropdown/DropdownContext.js
var createContext = () => writable({});

// node_modules/@sveltestrap/sveltestrap/dist/Dropdown/Dropdown.svelte
Dropdown[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Dropdown/Dropdown.svelte";
var root_16 = add_locations(from_html(`<li><!></li>`), Dropdown[FILENAME], [[187, 2]]);
var root_23 = add_locations(from_html(`<div><!></div>`), Dropdown[FILENAME], [[191, 2]]);
function Dropdown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "active",
    "autoClose",
    "direction",
    "dropup",
    "group",
    "inNavbar",
    "isOpen",
    "nav",
    "setActiveFromChild",
    "size",
    "theme",
    "toggle"
  ]);
  push($$props, false, Dropdown);
  const subItemIsActive = mutable_source();
  const classes = mutable_source();
  const handleToggle = mutable_source();
  const noop = () => void 0;
  let context = createContext();
  setContext("dropdownContext", context);
  const navbarContext = getContext("navbar");
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let autoClose = prop($$props, "autoClose", 8, true);
  let direction = prop($$props, "direction", 8, "down");
  let dropup = prop($$props, "dropup", 8, false);
  let group = prop($$props, "group", 8, false);
  let inNavbar = prop($$props, "inNavbar", 24, () => navbarContext ? navbarContext.inNavbar : false);
  let isOpen = prop($$props, "isOpen", 12, false);
  let nav = prop($$props, "nav", 8, false);
  let setActiveFromChild = prop($$props, "setActiveFromChild", 8, false);
  let size = prop($$props, "size", 8, "");
  let theme = prop($$props, "theme", 8, null);
  let toggle = prop($$props, "toggle", 8, void 0);
  const [popperRef, popperContent] = createPopperActions();
  const validDirections = ["up", "down", "left", "right", "start", "end"];
  if (strict_equals(validDirections.indexOf(direction()), -1)) {
    throw new Error(`Invalid direction sent: '${direction()}' is not one of 'up', 'down', 'left', 'right', 'start', 'end'`);
  }
  let component2 = mutable_source();
  let dropdownDirection = mutable_source();
  function handleDocumentClick(e) {
    if (e && (strict_equals(e.which, 3) || strict_equals(e.type, "keyup") && strict_equals(e.which, 9, false))) return;
    if (get(component2).contains(e.target) && strict_equals(get(component2), e.target, false) && (strict_equals(e.type, "keyup", false) || strict_equals(e.which, 9))) {
      return;
    }
    if (strict_equals(autoClose(), true) || strict_equals(autoClose(), "outside")) {
      get(handleToggle)(e);
    }
  }
  onDestroy(() => {
    if (strict_equals(typeof document, "undefined", false)) {
      ["click", "touchstart", "keyup"].forEach((event2) => document.removeEventListener(event2, handleDocumentClick, true));
    }
  });
  legacy_pre_effect(() => (deep_read_state(setActiveFromChild()), get(component2)), () => {
    set(subItemIsActive, !!(setActiveFromChild() && get(component2) && strict_equals(typeof get(component2).querySelector, "function") && get(component2).querySelector(".active")));
  });
  legacy_pre_effect(() => deep_read_state(direction()), () => {
    if (strict_equals(direction(), "left")) set(dropdownDirection, "start");
    else if (strict_equals(direction(), "right")) set(dropdownDirection, "end");
    else set(dropdownDirection, direction());
  });
  legacy_pre_effect(() => (deep_read_state(toggle()), deep_read_state(isOpen())), () => {
    set(handleToggle, toggle() || (() => isOpen(!isOpen())));
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(direction()), get(dropdownDirection), deep_read_state(nav()), deep_read_state(active()), deep_read_state(setActiveFromChild()), get(subItemIsActive), deep_read_state(group()), deep_read_state(size()), deep_read_state(isOpen())),
    () => {
      set(classes, classnames(className(), strict_equals(direction(), "down", false) && `drop${get(dropdownDirection)}`, nav() && active() ? "active" : false, setActiveFromChild() && get(subItemIsActive) ? "active" : false, {
        "btn-group": group(),
        [`btn-group-${size()}`]: !!size(),
        dropdown: !group(),
        show: isOpen(),
        "nav-item": nav()
      }));
    }
  );
  legacy_pre_effect(() => deep_read_state(isOpen()), () => {
    if (strict_equals(typeof document, "undefined", false)) {
      if (isOpen()) {
        ["click", "touchstart", "keyup"].forEach((event2) => document.addEventListener(event2, handleDocumentClick, true));
      } else {
        ["click", "touchstart", "keyup"].forEach((event2) => document.removeEventListener(event2, handleDocumentClick, true));
      }
    }
  });
  legacy_pre_effect(
    () => (get(handleToggle), deep_read_state(isOpen()), deep_read_state(autoClose()), deep_read_state(direction()), deep_read_state(dropup()), deep_read_state(nav()), deep_read_state(inNavbar())),
    () => {
      context.update(() => {
        return {
          toggle: get(handleToggle),
          isOpen: isOpen(),
          autoClose: autoClose(),
          direction: strict_equals(direction(), "down") && dropup() ? "up" : direction(),
          inNavbar: nav() || inNavbar(),
          popperRef: nav() ? noop : popperRef,
          popperContent: nav() ? noop : popperContent
        };
      });
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var li = root_16();
      attribute_effect(li, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_1 = child(li);
      slot(node_1, $$props, "default", {}, null);
      reset(li);
      bind_this(li, ($$value) => set(component2, $$value), () => get(component2));
      append($$anchor2, li);
    };
    var alternate = ($$anchor2) => {
      var div = root_23();
      attribute_effect(div, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_2 = child(div);
      slot(node_2, $$props, "default", {}, null);
      reset(div);
      bind_this(div, ($$value) => set(component2, $$value), () => get(component2));
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (nav()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Dropdown,
      186,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Dropdown = hmr(Dropdown, () => Dropdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropdown[HMR].source;
    set(Dropdown[HMR].source, module.default[HMR].original);
  });
}
var Dropdown_default = Dropdown;

// node_modules/@sveltestrap/sveltestrap/dist/ButtonDropdown/ButtonDropdown.svelte
ButtonDropdown[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ButtonDropdown/ButtonDropdown.svelte";
function ButtonDropdown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, ButtonDropdown);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Dropdown_default(node, spread_props(() => $$restProps, {
      group: true,
      $$events: {
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(ButtonDropdown, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    ButtonDropdown,
    5,
    0,
    { componentTag: "Dropdown" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonDropdown = hmr(ButtonDropdown, () => ButtonDropdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonDropdown[HMR].source;
    set(ButtonDropdown[HMR].source, module.default[HMR].original);
  });
}
var ButtonDropdown_default = ButtonDropdown;

// node_modules/@sveltestrap/sveltestrap/dist/ButtonGroup/ButtonGroup.svelte
ButtonGroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ButtonGroup/ButtonGroup.svelte";
var root6 = add_locations(from_html(`<div><!></div>`), ButtonGroup[FILENAME], [[29, 0]]);
function ButtonGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "size", "vertical"]);
  push($$props, false, ButtonGroup);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let size = prop($$props, "size", 8, "");
  let vertical = prop($$props, "vertical", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(size()), deep_read_state(vertical())),
    () => {
      set(classes, classnames(className(), size() ? `btn-group-${size()}` : false, vertical() ? "btn-group-vertical" : "btn-group"));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root6();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonGroup = hmr(ButtonGroup, () => ButtonGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonGroup[HMR].source;
    set(ButtonGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonGroup_default = ButtonGroup;

// node_modules/@sveltestrap/sveltestrap/dist/ButtonToolbar/ButtonToolbar.svelte
ButtonToolbar[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ButtonToolbar/ButtonToolbar.svelte";
var root7 = add_locations(from_html(`<div><!></div>`), ButtonToolbar[FILENAME], [[15, 0]]);
function ButtonToolbar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, ButtonToolbar);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "btn-toolbar"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root7();
  attribute_effect(div, () => ({ ...$$restProps, role: "toolbar", class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonToolbar = hmr(ButtonToolbar, () => ButtonToolbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonToolbar[HMR].source;
    set(ButtonToolbar[HMR].source, module.default[HMR].original);
  });
}
var ButtonToolbar_default = ButtonToolbar;

// node_modules/@sveltestrap/sveltestrap/dist/Card/Card.svelte
Card[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Card/Card.svelte";
var root8 = add_locations(from_html(`<div><!></div>`), Card[FILENAME], [[56, 0]]);
function Card($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "body", "color", "inverse", "outline", "theme"]);
  push($$props, false, Card);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let body = prop($$props, "body", 8, false);
  let color = prop($$props, "color", 8, "");
  let inverse = prop($$props, "inverse", 8, false);
  let outline = prop($$props, "outline", 8, false);
  let theme = prop($$props, "theme", 8, void 0);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(inverse()), deep_read_state(body()), deep_read_state(color()), deep_read_state(outline())),
    () => {
      set(classes, classnames(className(), "card", inverse() ? "text-white" : false, body() ? "card-body" : false, color() ? `${outline() ? "border" : "bg"}-${color()}` : false));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root8();
  attribute_effect(div, () => ({
    ...$$restProps,
    "data-bs-theme": theme(),
    class: get(classes)
  }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  event("click", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Card = hmr(Card, () => Card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Card[HMR].source;
    set(Card[HMR].source, module.default[HMR].original);
  });
}
var Card_default = Card;

// node_modules/@sveltestrap/sveltestrap/dist/CardBody/CardBody.svelte
CardBody[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardBody/CardBody.svelte";
var root9 = add_locations(from_html(`<div><!></div>`), CardBody[FILENAME], [[15, 0]]);
function CardBody($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardBody);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-body"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root9();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardBody = hmr(CardBody, () => CardBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardBody[HMR].source;
    set(CardBody[HMR].source, module.default[HMR].original);
  });
}
var CardBody_default = CardBody;

// node_modules/@sveltestrap/sveltestrap/dist/CardColumns/CardColumns.svelte
CardColumns[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardColumns/CardColumns.svelte";
var root10 = add_locations(from_html(`<div><!></div>`), CardColumns[FILENAME], [[15, 0]]);
function CardColumns($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardColumns);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-columns"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root10();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardColumns = hmr(CardColumns, () => CardColumns[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardColumns[HMR].source;
    set(CardColumns[HMR].source, module.default[HMR].original);
  });
}
var CardColumns_default = CardColumns;

// node_modules/@sveltestrap/sveltestrap/dist/CardDeck/CardDeck.svelte
CardDeck[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardDeck/CardDeck.svelte";
var root11 = add_locations(from_html(`<div><!></div>`), CardDeck[FILENAME], [[15, 0]]);
function CardDeck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardDeck);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-deck"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root11();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardDeck = hmr(CardDeck, () => CardDeck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardDeck[HMR].source;
    set(CardDeck[HMR].source, module.default[HMR].original);
  });
}
var CardDeck_default = CardDeck;

// node_modules/@sveltestrap/sveltestrap/dist/CardFooter/CardFooter.svelte
CardFooter[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardFooter/CardFooter.svelte";
var root12 = add_locations(from_html(`<div><!></div>`), CardFooter[FILENAME], [[15, 0]]);
function CardFooter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardFooter);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-footer"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root12();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardFooter = hmr(CardFooter, () => CardFooter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardFooter[HMR].source;
    set(CardFooter[HMR].source, module.default[HMR].original);
  });
}
var CardFooter_default = CardFooter;

// node_modules/@sveltestrap/sveltestrap/dist/CardGroup/CardGroup.svelte
CardGroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardGroup/CardGroup.svelte";
var root13 = add_locations(from_html(`<div><!></div>`), CardGroup[FILENAME], [[15, 0]]);
function CardGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardGroup);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-group"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root13();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardGroup = hmr(CardGroup, () => CardGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardGroup[HMR].source;
    set(CardGroup[HMR].source, module.default[HMR].original);
  });
}
var CardGroup_default = CardGroup;

// node_modules/@sveltestrap/sveltestrap/dist/CardHeader/CardHeader.svelte
CardHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardHeader/CardHeader.svelte";
var root_17 = add_locations(from_html(`<h3><!></h3>`), CardHeader[FILENAME], [[24, 2]]);
var root_24 = add_locations(from_html(`<div><!></div>`), CardHeader[FILENAME], [[29, 2]]);
function CardHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "tag"]);
  push($$props, false, CardHeader);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let tag = prop($$props, "tag", 8, "div");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-header"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_17();
      attribute_effect(h3, () => ({ ...$$restProps, class: get(classes) }));
      var node_1 = child(h3);
      slot(node_1, $$props, "default", {}, null);
      reset(h3);
      event("click", h3, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, h3);
    };
    var alternate = ($$anchor2) => {
      var div = root_24();
      attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
      var node_2 = child(div);
      slot(node_2, $$props, "default", {}, null);
      reset(div);
      event("click", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(tag(), "h3")) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      CardHeader,
      22,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  CardHeader = hmr(CardHeader, () => CardHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardHeader[HMR].source;
    set(CardHeader[HMR].source, module.default[HMR].original);
  });
}
var CardHeader_default = CardHeader;

// node_modules/@sveltestrap/sveltestrap/dist/CardImg/CardImg.svelte
CardImg[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardImg/CardImg.svelte";
var root14 = add_locations(from_html(`<img/>`), CardImg[FILENAME], [[57, 0]]);
function CardImg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "top", "bottom", "src", "alt"]);
  push($$props, false, CardImg);
  let className = prop($$props, "class", 8, "");
  let top = prop($$props, "top", 8, false);
  let bottom = prop($$props, "bottom", 8, false);
  let src = prop($$props, "src", 8);
  let alt = prop($$props, "alt", 8, "");
  let classes = mutable_source("");
  legacy_pre_effect(
    () => (deep_read_state(top()), deep_read_state(bottom()), classnames, deep_read_state(className())),
    () => {
      let cardImgClassName = "card-img";
      if (top()) {
        cardImgClassName = "card-img-top";
      }
      if (bottom()) {
        cardImgClassName = "card-img-bottom";
      }
      set(classes, classnames(className(), cardImgClassName));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var img = root14();
  attribute_effect(img, () => ({
    ...$$restProps,
    class: get(classes),
    src: src(),
    alt: alt()
  }));
  replay_events(img);
  append($$anchor, img);
  return pop($$exports);
}
if (import.meta.hot) {
  CardImg = hmr(CardImg, () => CardImg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardImg[HMR].source;
    set(CardImg[HMR].source, module.default[HMR].original);
  });
}
var CardImg_default = CardImg;

// node_modules/@sveltestrap/sveltestrap/dist/CardImgOverlay/CardImgOverlay.svelte
CardImgOverlay[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardImgOverlay/CardImgOverlay.svelte";
var root15 = add_locations(from_html(`<div><!></div>`), CardImgOverlay[FILENAME], [[15, 0]]);
function CardImgOverlay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardImgOverlay);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-img-overlay"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root15();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardImgOverlay = hmr(CardImgOverlay, () => CardImgOverlay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardImgOverlay[HMR].source;
    set(CardImgOverlay[HMR].source, module.default[HMR].original);
  });
}
var CardImgOverlay_default = CardImgOverlay;

// node_modules/@sveltestrap/sveltestrap/dist/CardLink/CardLink.svelte
CardLink[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardLink/CardLink.svelte";
var root16 = add_locations(from_html(`<a><!></a>`), CardLink[FILENAME], [[22, 0]]);
function CardLink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "href"]);
  push($$props, false, CardLink);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let href = prop($$props, "href", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-link"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var a = root16();
  attribute_effect(a, () => ({ ...$$restProps, class: get(classes), href: href() }));
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  CardLink = hmr(CardLink, () => CardLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardLink[HMR].source;
    set(CardLink[HMR].source, module.default[HMR].original);
  });
}
var CardLink_default = CardLink;

// node_modules/@sveltestrap/sveltestrap/dist/CardSubtitle/CardSubtitle.svelte
CardSubtitle[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardSubtitle/CardSubtitle.svelte";
var root17 = add_locations(from_html(`<h6><!></h6>`), CardSubtitle[FILENAME], [[15, 0]]);
function CardSubtitle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardSubtitle);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-subtitle"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var h6 = root17();
  attribute_effect(h6, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(h6);
  slot(node, $$props, "default", {}, null);
  reset(h6);
  append($$anchor, h6);
  return pop($$exports);
}
if (import.meta.hot) {
  CardSubtitle = hmr(CardSubtitle, () => CardSubtitle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardSubtitle[HMR].source;
    set(CardSubtitle[HMR].source, module.default[HMR].original);
  });
}
var CardSubtitle_default = CardSubtitle;

// node_modules/@sveltestrap/sveltestrap/dist/CardText/CardText.svelte
CardText[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardText/CardText.svelte";
var root18 = add_locations(from_html(`<p><!></p>`), CardText[FILENAME], [[15, 0]]);
function CardText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardText);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-text"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var p = root18();
  attribute_effect(p, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(p);
  slot(node, $$props, "default", {}, null);
  reset(p);
  append($$anchor, p);
  return pop($$exports);
}
if (import.meta.hot) {
  CardText = hmr(CardText, () => CardText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardText[HMR].source;
    set(CardText[HMR].source, module.default[HMR].original);
  });
}
var CardText_default = CardText;

// node_modules/@sveltestrap/sveltestrap/dist/CardTitle/CardTitle.svelte
CardTitle[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CardTitle/CardTitle.svelte";
var root19 = add_locations(from_html(`<h5><!></h5>`), CardTitle[FILENAME], [[15, 0]]);
function CardTitle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, CardTitle);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "card-title"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var h5 = root19();
  attribute_effect(h5, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(h5);
  slot(node, $$props, "default", {}, null);
  reset(h5);
  append($$anchor, h5);
  return pop($$exports);
}
if (import.meta.hot) {
  CardTitle = hmr(CardTitle, () => CardTitle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardTitle[HMR].source;
    set(CardTitle[HMR].source, module.default[HMR].original);
  });
}
var CardTitle_default = CardTitle;

// node_modules/@sveltestrap/sveltestrap/dist/Carousel/Carousel.svelte
Carousel[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Carousel/Carousel.svelte";
var root20 = add_locations(from_html(`<div><!></div>`), Carousel[FILENAME], [[130, 0]]);
function Carousel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "activeIndex",
    "interval",
    "items",
    "keyboard",
    "pause",
    "ride",
    "theme"
  ]);
  push($$props, false, Carousel);
  let className = prop($$props, "class", 8, "");
  let activeIndex = prop($$props, "activeIndex", 12, 0);
  let interval = prop($$props, "interval", 8, 5e3);
  let items = prop($$props, "items", 24, () => []);
  let keyboard = prop($$props, "keyboard", 8, true);
  let pause = prop($$props, "pause", 8, true);
  let ride = prop($$props, "ride", 8, true);
  let theme = prop($$props, "theme", 8, void 0);
  let _rideIntervalId = false;
  let _removeVisibilityChangeListener = false;
  let classes = mutable_source("");
  onMount(() => {
    startRideInterval();
    _removeVisibilityChangeListener = browserEvent(document, "visibilitychange", () => {
      if (strict_equals(document.visibilityState, "hidden")) {
        clearRideInterval();
      } else {
        startRideInterval();
      }
    });
  });
  onDestroy(() => {
    if (_rideIntervalId) {
      clearInterval(_rideIntervalId);
    }
    if (_removeVisibilityChangeListener) {
      _removeVisibilityChangeListener();
    }
  });
  function handleKeydown(event2) {
    if (!keyboard()) {
      return;
    }
    let direction = "";
    if (strict_equals(event2.key, "ArrowLeft")) {
      direction = "prev";
    } else if (strict_equals(event2.key, "ArrowRight")) {
      direction = "next";
    } else {
      return;
    }
    activeIndex(getNewCarouselActiveIndex(direction, items(), activeIndex()));
  }
  function startRideInterval() {
    clearRideInterval();
    if (ride()) {
      _rideIntervalId = setInterval(autoNext, interval());
    }
  }
  function clearRideInterval() {
    if (_rideIntervalId) {
      clearInterval(_rideIntervalId);
    }
  }
  function autoNext() {
    activeIndex(getNewCarouselActiveIndex("next", items(), activeIndex()));
  }
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "carousel", "slide"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root20();
  event("keydown", $window, handleKeydown);
  attribute_effect(div, () => ({
    ...$$restProps,
    role: "presentation",
    class: get(classes),
    "data-bs-theme": theme()
  }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  event("mouseenter", div, () => pause() ? clearRideInterval() : void 0);
  event("mouseleave", div, () => pause() ? startRideInterval() : void 0);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Carousel = hmr(Carousel, () => Carousel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Carousel[HMR].source;
    set(Carousel[HMR].source, module.default[HMR].original);
  });
}
var Carousel_default = Carousel;

// node_modules/@sveltestrap/sveltestrap/dist/CarouselCaption/CarouselCaption.svelte
CarouselCaption[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CarouselCaption/CarouselCaption.svelte";
var root_18 = add_locations(from_html(`<h5> </h5>`), CarouselCaption[FILENAME], [[32, 21]]);
var root_25 = add_locations(from_html(`<p> </p>`), CarouselCaption[FILENAME], [[33, 19]]);
var root21 = add_locations(from_html(`<div><!> <!> <!></div>`), CarouselCaption[FILENAME], [[31, 0]]);
function CarouselCaption($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "captionHeader", "captionText"]);
  push($$props, false, CarouselCaption);
  let className = prop($$props, "class", 8, "");
  let captionHeader = prop($$props, "captionHeader", 8, "");
  let captionText = prop($$props, "captionText", 8, "");
  let classes = mutable_source("");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "carousel-caption", "d-none", "d-md-block"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root21();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var h5 = root_18();
      var text2 = child(h5, true);
      reset(h5);
      template_effect(() => set_text(text2, captionHeader()));
      append($$anchor2, h5);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (captionHeader()) $$render(consequent);
      }),
      "if",
      CarouselCaption,
      32,
      2
    );
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var p = root_25();
      var text_1 = child(p, true);
      reset(p);
      template_effect(() => set_text(text_1, captionText()));
      append($$anchor2, p);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (captionText()) $$render(consequent_1);
      }),
      "if",
      CarouselCaption,
      33,
      2
    );
  }
  var node_2 = sibling(node_1, 2);
  slot(node_2, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CarouselCaption = hmr(CarouselCaption, () => CarouselCaption[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarouselCaption[HMR].source;
    set(CarouselCaption[HMR].source, module.default[HMR].original);
  });
}
var CarouselCaption_default = CarouselCaption;

// node_modules/@sveltestrap/sveltestrap/dist/CarouselControl/CarouselControl.svelte
CarouselControl[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CarouselControl/CarouselControl.svelte";
var root22 = add_locations(from_html(`<a><span aria-hidden="true"></span> <span class="visually-hidden"> </span></a>`), CarouselControl[FILENAME], [[65, 0, [[66, 2], [67, 2]]]]);
function CarouselControl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "direction",
    "directionText",
    "activeIndex",
    "items",
    "wrap"
  ]);
  push($$props, false, CarouselControl);
  let className = prop($$props, "class", 8, "");
  let direction = prop($$props, "direction", 8, "");
  let directionText = prop($$props, "directionText", 8, "");
  let activeIndex = prop($$props, "activeIndex", 12, 0);
  let items = prop($$props, "items", 24, () => []);
  let wrap = prop($$props, "wrap", 8, true);
  let classes = mutable_source("");
  let screenText = mutable_source("");
  function clickHandler() {
    const endOrBeginning = strict_equals(direction(), "next") && activeIndex() + 1 > items().length - 1 || strict_equals(direction(), "prev") && activeIndex() - 1 < 0;
    if (!wrap() && endOrBeginning) {
      return;
    }
    activeIndex(getNewCarouselActiveIndex(direction(), items(), activeIndex()));
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(direction()), deep_read_state(className())),
    () => {
      set(classes, classnames(`carousel-control-${direction()}`, className()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(directionText()), deep_read_state(direction())),
    () => {
      set(screenText, directionText() ? directionText() : strict_equals(direction(), "next") ? "Next" : "Previous");
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var a = root22();
  attribute_effect(a, () => ({
    ...$$restProps,
    class: get(classes),
    role: "button",
    href: `#${direction() ?? ""}`
  }));
  var span = child(a);
  var span_1 = sibling(span, 2);
  var text2 = child(span_1, true);
  reset(span_1);
  reset(a);
  template_effect(() => {
    set_class(span, 1, `carousel-control-${direction() ?? ""}-icon`);
    set_text(text2, get(screenText));
  });
  event("click", a, preventDefault(clickHandler));
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  CarouselControl = hmr(CarouselControl, () => CarouselControl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarouselControl[HMR].source;
    set(CarouselControl[HMR].source, module.default[HMR].original);
  });
}
var CarouselControl_default = CarouselControl;

// node_modules/@sveltestrap/sveltestrap/dist/CarouselIndicators/CarouselIndicators.svelte
CarouselIndicators[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CarouselIndicators/CarouselIndicators.svelte";
var root_19 = add_locations(from_html(`<button data-bs-target=""> </button>`), CarouselIndicators[FILENAME], [[33, 4]]);
var root23 = add_locations(from_html(`<div></div>`), CarouselIndicators[FILENAME], [[31, 0]]);
function CarouselIndicators($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "items", "activeIndex"]);
  push($$props, false, CarouselIndicators);
  let className = prop($$props, "class", 8, "");
  let items = prop($$props, "items", 24, () => []);
  let activeIndex = prop($$props, "activeIndex", 12, 0);
  let classes = mutable_source("");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "carousel-indicators"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root23();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  add_svelte_meta(
    () => each(div, 5, items, index, ($$anchor2, item, index2) => {
      var button = root_19();
      let classes_1;
      var text2 = child(button, true);
      reset(button);
      template_effect(
        ($0) => {
          set_attribute(button, "aria-current", strict_equals(activeIndex(), index2));
          set_attribute(button, "aria-label", (get(item), untrack(() => get(item).title)));
          classes_1 = set_class(button, 1, "", null, classes_1, $0);
          set_text(text2, (get(item), untrack(() => get(item).title ? get(item).title : "")));
        },
        [() => ({ active: strict_equals(activeIndex(), index2) })]
      );
      event("click", button, () => activeIndex(index2));
      append($$anchor2, button);
    }),
    "each",
    CarouselIndicators,
    32,
    2
  );
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CarouselIndicators = hmr(CarouselIndicators, () => CarouselIndicators[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarouselIndicators[HMR].source;
    set(CarouselIndicators[HMR].source, module.default[HMR].original);
  });
}
var CarouselIndicators_default = CarouselIndicators;

// node_modules/@sveltestrap/sveltestrap/dist/CarouselItem/CarouselItem.svelte
CarouselItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/CarouselItem/CarouselItem.svelte";
var root24 = add_locations(from_html(`<div><!></div>`), CarouselItem[FILENAME], [[31, 0]]);
function CarouselItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "activeIndex", "itemIndex"]);
  push($$props, false, CarouselItem);
  let className = prop($$props, "class", 8, "");
  let activeIndex = prop($$props, "activeIndex", 8, 0);
  let itemIndex = prop($$props, "itemIndex", 8, 0);
  let classes = mutable_source("");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "carousel-item"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root24();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: get(classes), [CLASS]: $0 }), [
    () => ({ active: strict_equals(itemIndex(), activeIndex()) })
  ]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CarouselItem = hmr(CarouselItem, () => CarouselItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarouselItem[HMR].source;
    set(CarouselItem[HMR].source, module.default[HMR].original);
  });
}
var CarouselItem_default = CarouselItem;

// node_modules/@sveltestrap/sveltestrap/dist/Col/Col.svelte
Col[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Col/Col.svelte";
var root25 = add_locations(from_html(`<div><!></div>`), Col[FILENAME], [[64, 0]]);
function Col($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "xs", "sm", "md", "lg", "xl", "xxl"]);
  push($$props, false, Col);
  let className = prop($$props, "class", 8, "");
  let xs = prop($$props, "xs", 8, void 0);
  let sm = prop($$props, "sm", 8, void 0);
  let md = prop($$props, "md", 8, void 0);
  let lg = prop($$props, "lg", 8, void 0);
  let xl = prop($$props, "xl", 8, void 0);
  let xxl = prop($$props, "xxl", 8, void 0);
  const colClasses = [];
  const lookup = { xs: xs(), sm: sm(), md: md(), lg: lg(), xl: xl(), xxl: xxl() };
  Object.keys(lookup).forEach((colWidth) => {
    const columnProp = lookup[colWidth];
    if (!columnProp && strict_equals(columnProp, "", false)) {
      return;
    }
    const isXs = strict_equals(colWidth, "xs");
    if (isObject(columnProp)) {
      const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
      const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
      if (columnProp.size || strict_equals(columnProp.size, "")) {
        colClasses.push(colClass);
      }
      if (columnProp.push) {
        colClasses.push(`push${colSizeInterfix}${columnProp.push}`);
      }
      if (columnProp.pull) {
        colClasses.push(`pull${colSizeInterfix}${columnProp.pull}`);
      }
      if (columnProp.offset) {
        colClasses.push(`offset${colSizeInterfix}${columnProp.offset}`);
      }
      if (columnProp.order) {
        colClasses.push(`order${colSizeInterfix}${columnProp.order}`);
      }
    } else {
      colClasses.push(getColumnSizeClass(isXs, colWidth, columnProp));
    }
  });
  if (!colClasses.length) {
    colClasses.push("col");
  }
  if (className()) {
    colClasses.push(className());
  }
  var $$exports = { ...legacy_api() };
  init();
  var div = root25();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [() => untrack(() => colClasses.join(" "))]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Col = hmr(Col, () => Col[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Col[HMR].source;
    set(Col[HMR].source, module.default[HMR].original);
  });
}
var Col_default = Col;

// node_modules/@sveltestrap/sveltestrap/dist/Column/Column.svelte
Column[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Column/Column.svelte";
var root_110 = add_locations(from_html(`<col/>`), Column[FILENAME], [[16, 2]]);
var root_32 = add_locations(from_html(`<th><!> <!></th>`), Column[FILENAME], [[18, 2]]);
var root_6 = add_locations(from_html(`<th><!> <!></th>`), Column[FILENAME], [[23, 2]]);
var root_82 = add_locations(from_html(`<td><!></td>`), Column[FILENAME], [[28, 2]]);
function Column($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "footer", "header", "width"]);
  push($$props, false, Column);
  let className = prop($$props, "class", 8, "");
  let footer = prop($$props, "footer", 8, void 0);
  let header = prop($$props, "header", 8, void 0);
  let width = prop($$props, "width", 8, void 0);
  const colgroup = getContext("colgroup");
  const head2 = getContext("header");
  const foot = getContext("footer");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var col = root_110();
      template_effect(() => set_style(col, `width: ${width() ?? ""};`));
      append($$anchor2, col);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var th = root_32();
          attribute_effect(th, () => ({ ...$$restProps }));
          var node_2 = child(th);
          {
            var consequent_1 = ($$anchor4) => {
              var text2 = text();
              template_effect(() => set_text(text2, footer()));
              append($$anchor4, text2);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if (footer()) $$render(consequent_1);
              }),
              "if",
              Column,
              19,
              4
            );
          }
          var node_3 = sibling(node_2, 2);
          slot(node_3, $$props, "footer", {}, null);
          reset(th);
          append($$anchor3, th);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          {
            var consequent_4 = ($$anchor4) => {
              var th_1 = root_6();
              attribute_effect(th_1, () => ({ ...$$restProps }));
              var node_5 = child(th_1);
              {
                var consequent_3 = ($$anchor5) => {
                  var text_1 = text();
                  template_effect(() => set_text(text_1, header()));
                  append($$anchor5, text_1);
                };
                add_svelte_meta(
                  () => if_block(node_5, ($$render) => {
                    if (header()) $$render(consequent_3);
                  }),
                  "if",
                  Column,
                  24,
                  4
                );
              }
              var node_6 = sibling(node_5, 2);
              slot(node_6, $$props, "header", {}, null);
              reset(th_1);
              append($$anchor4, th_1);
            };
            var alternate = ($$anchor4) => {
              var td = root_82();
              attribute_effect(td, () => ({ class: className(), ...$$restProps }));
              var node_7 = child(td);
              slot(node_7, $$props, "default", {}, null);
              reset(td);
              append($$anchor4, td);
            };
            add_svelte_meta(
              () => if_block(
                node_4,
                ($$render) => {
                  if (head2) $$render(consequent_4);
                  else $$render(alternate, false);
                },
                true
              ),
              "if",
              Column,
              22,
              0
            );
          }
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(
            node_1,
            ($$render) => {
              if (foot) $$render(consequent_2);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          Column,
          17,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (colgroup) $$render(consequent);
        else $$render(alternate_2, false);
      }),
      "if",
      Column,
      15,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Column = hmr(Column, () => Column[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Column[HMR].source;
    set(Column[HMR].source, module.default[HMR].original);
  });
}
var Column_default = Column;

// node_modules/@sveltestrap/sveltestrap/dist/Container/Container.svelte
Container[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Container/Container.svelte";
var root26 = add_locations(from_html(`<div><!></div>`), Container[FILENAME], [[60, 0]]);
function Container($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "sm", "md", "lg", "xl", "xxl", "fluid"]);
  push($$props, false, Container);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let sm = prop($$props, "sm", 8, void 0);
  let md = prop($$props, "md", 8, void 0);
  let lg = prop($$props, "lg", 8, void 0);
  let xl = prop($$props, "xl", 8, void 0);
  let xxl = prop($$props, "xxl", 8, void 0);
  let fluid = prop($$props, "fluid", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(sm()), deep_read_state(md()), deep_read_state(lg()), deep_read_state(xl()), deep_read_state(xxl()), deep_read_state(fluid())),
    () => {
      set(classes, classnames(className(), {
        "container-sm": sm(),
        "container-md": md(),
        "container-lg": lg(),
        "container-xl": xl(),
        "container-xxl": xxl(),
        "container-fluid": fluid(),
        container: !sm() && !md() && !lg() && !xl() && !xxl() && !fluid()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root26();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Container = hmr(Container, () => Container[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Container[HMR].source;
    set(Container[HMR].source, module.default[HMR].original);
  });
}
var Container_default = Container;

// node_modules/@sveltestrap/sveltestrap/dist/DropdownItem/DropdownItem.svelte
DropdownItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/DropdownItem/DropdownItem.svelte";
var root_111 = add_locations(from_html(`<h6><!></h6>`), DropdownItem[FILENAME], [[39, 4]]);
var root_33 = add_locations(from_html(`<div><!></div>`), DropdownItem[FILENAME], [[44, 4]]);
var root_52 = add_locations(from_html(`<a><!></a>`), DropdownItem[FILENAME], [[48, 4]]);
var root_62 = add_locations(from_html(`<button><!></button>`), DropdownItem[FILENAME], [[52, 4]]);
var root27 = add_locations(from_html(`<li><!></li>`), DropdownItem[FILENAME], [[37, 0]]);
function DropdownItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "active",
    "disabled",
    "divider",
    "header",
    "toggle",
    "href"
  ]);
  push($$props, false, DropdownItem);
  const $context = () => (validate_store(context, "context"), store_get(context, "$context", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const classes = mutable_source();
  const context = getContext("dropdownContext");
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let divider = prop($$props, "divider", 8, false);
  let header = prop($$props, "header", 8, false);
  let toggle = prop($$props, "toggle", 8, true);
  let href = prop($$props, "href", 8, "");
  function handleItemClick(e) {
    if (disabled() || header() || divider()) {
      e.preventDefault();
      return;
    }
    if (toggle() && (strict_equals($context().autoClose, true) || strict_equals($context().autoClose, "inside"))) {
      $context().toggle(e);
    }
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(disabled()), deep_read_state(divider()), deep_read_state(header()), deep_read_state(active())),
    () => {
      set(classes, classnames(className(), {
        disabled: disabled(),
        "dropdown-item": !divider() && !header(),
        active: active(),
        "dropdown-header": header(),
        "dropdown-divider": divider()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root27();
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var h6 = root_111();
      attribute_effect(h6, () => ({ ...$$restProps, class: get(classes) }));
      var node_1 = child(h6);
      slot(node_1, $$props, "default", {}, null);
      reset(h6);
      append($$anchor2, h6);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      {
        var consequent_1 = ($$anchor3) => {
          var div = root_33();
          attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
          var node_3 = child(div);
          slot(node_3, $$props, "default", {}, null);
          reset(div);
          event("click", div, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", div, handleItemClick);
          append($$anchor3, div);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          {
            var consequent_2 = ($$anchor4) => {
              var a = root_52();
              attribute_effect(a, () => ({
                ...$$restProps,
                click: true,
                href: href(),
                class: get(classes)
              }));
              var node_5 = child(a);
              slot(node_5, $$props, "default", {}, null);
              reset(a);
              event("click", a, handleItemClick);
              append($$anchor4, a);
            };
            var alternate = ($$anchor4) => {
              var button = root_62();
              attribute_effect(button, () => ({ type: "button", ...$$restProps, class: get(classes) }));
              var node_6 = child(button);
              slot(node_6, $$props, "default", {}, null);
              reset(button);
              event("click", button, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", button, handleItemClick);
              append($$anchor4, button);
            };
            add_svelte_meta(
              () => if_block(
                node_4,
                ($$render) => {
                  if (href()) $$render(consequent_2);
                  else $$render(alternate, false);
                },
                true
              ),
              "if",
              DropdownItem,
              47,
              2
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (divider()) $$render(consequent_1);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          DropdownItem,
          42,
          2
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (header()) $$render(consequent);
        else $$render(alternate_2, false);
      }),
      "if",
      DropdownItem,
      38,
      2
    );
  }
  reset(li);
  append($$anchor, li);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  DropdownItem = hmr(DropdownItem, () => DropdownItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownItem[HMR].source;
    set(DropdownItem[HMR].source, module.default[HMR].original);
  });
}
var DropdownItem_default = DropdownItem;

// node_modules/@sveltestrap/sveltestrap/dist/DropdownMenu/DropdownMenu.svelte
DropdownMenu[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/DropdownMenu/DropdownMenu.svelte";
var root28 = add_locations(from_html(`<ul><!></ul>`), DropdownMenu[FILENAME], [[46, 0]]);
function DropdownMenu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "end", "right"]);
  push($$props, false, DropdownMenu);
  const $context = () => (validate_store(context, "context"), store_get(context, "$context", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const popperOptions = mutable_source();
  const classes = mutable_source();
  const context = getContext("dropdownContext");
  let className = prop($$props, "class", 8, "");
  let end = prop($$props, "end", 8, false);
  let right = prop($$props, "right", 8, false);
  const popperPlacement = (direction, end2) => {
    let prefix = direction;
    if (strict_equals(direction, "up")) {
      prefix = "top";
    }
    if (strict_equals(direction, "down")) {
      prefix = "bottom";
    }
    let suffix = end2 ? "end" : "start";
    return `${prefix}-${suffix}`;
  };
  legacy_pre_effect(
    () => ($context(), deep_read_state(end()), deep_read_state(right())),
    () => {
      set(popperOptions, {
        modifiers: [
          { name: "flip" },
          { name: "offset", options: { offset: [0, 2] } }
        ],
        placement: popperPlacement($context().direction, end() || right())
      });
    }
  );
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(end()), deep_read_state(right()), $context()),
    () => {
      set(classes, classnames(className(), "dropdown-menu", {
        "dropdown-menu-end": end() || right(),
        show: $context().isOpen
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var ul = root28();
  attribute_effect(ul, () => ({
    ...$$restProps,
    class: get(classes),
    "data-bs-popper": ($context(), untrack(() => $context().inNavbar ? "static" : void 0))
  }));
  var node = child(ul);
  slot(node, $$props, "default", {}, null);
  reset(ul);
  action(ul, ($$node, $$action_arg) => {
    var _a, _b;
    return (_b = (_a = $context()).popperContent) == null ? void 0 : _b.call(_a, $$node, $$action_arg);
  }, () => get(popperOptions));
  append($$anchor, ul);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  DropdownMenu = hmr(DropdownMenu, () => DropdownMenu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownMenu[HMR].source;
    set(DropdownMenu[HMR].source, module.default[HMR].original);
  });
}
var DropdownMenu_default = DropdownMenu;

// node_modules/@sveltestrap/sveltestrap/dist/DropdownToggle/DropdownToggle.svelte
DropdownToggle[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/DropdownToggle/DropdownToggle.svelte";
var root_26 = add_locations(from_html(`<span class="visually-hidden"> </span>`), DropdownToggle[FILENAME], [[64, 6]]);
var root_112 = add_locations(from_html(`<a><!></a>`), DropdownToggle[FILENAME], [[53, 2]]);
var root_53 = add_locations(from_html(`<span class="visually-hidden"> </span>`), DropdownToggle[FILENAME], [[79, 6]]);
var root_43 = add_locations(from_html(`<div><!></div>`), DropdownToggle[FILENAME], [[69, 2]]);
var root_83 = add_locations(from_html(`<span class="visually-hidden"> </span>`), DropdownToggle[FILENAME], [[94, 6]]);
var root_7 = add_locations(from_html(`<span><!></span>`), DropdownToggle[FILENAME], [[84, 2]]);
var root_10 = add_locations(from_html(`<span class="visually-hidden"> </span>`), DropdownToggle[FILENAME], [[109, 6]]);
var root_9 = add_locations(from_html(`<button><!></button>`), DropdownToggle[FILENAME], [[98, 2]]);
function DropdownToggle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "ariaLabel",
    "active",
    "block",
    "caret",
    "color",
    "disabled",
    "inner",
    "nav",
    "outline",
    "size",
    "split",
    "tag"
  ]);
  push($$props, false, DropdownToggle);
  const $context = () => (validate_store(context, "context"), store_get(context, "$context", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const classes = mutable_source();
  const btnClasses = mutable_source();
  const context = getContext("dropdownContext");
  let className = prop($$props, "class", 8, "");
  let ariaLabel = prop($$props, "ariaLabel", 8, "Toggle Dropdown");
  let active = prop($$props, "active", 8, false);
  let block = prop($$props, "block", 8, false);
  let caret = prop($$props, "caret", 8, false);
  let color = prop($$props, "color", 8, "secondary");
  let disabled = prop($$props, "disabled", 8, false);
  let inner = prop($$props, "inner", 12, void 0);
  let nav = prop($$props, "nav", 8, false);
  let outline = prop($$props, "outline", 8, false);
  let size = prop($$props, "size", 8, "");
  let split = prop($$props, "split", 8, false);
  let tag = prop($$props, "tag", 8, null);
  function toggleButton(e) {
    if (disabled()) {
      e.preventDefault();
      return;
    }
    if (nav()) {
      e.preventDefault();
    }
    $context().toggle(e);
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(caret()), deep_read_state(split()), deep_read_state(nav()), $context()),
    () => {
      set(classes, classnames(className(), {
        "dropdown-toggle": caret() || split(),
        "dropdown-toggle-split": split(),
        "nav-link": nav(),
        show: $context().isOpen
      }));
    }
  );
  legacy_pre_effect(
    () => (classnames, get(classes), deep_read_state(outline()), deep_read_state(color()), deep_read_state(size()), deep_read_state(block()), deep_read_state(active())),
    () => {
      set(btnClasses, classnames(get(classes), "btn", `btn${outline() ? "-outline" : ""}-${color()}`, size() ? `btn-${size()}` : false, block() ? "d-block w-100" : false, { active: active() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_112();
      attribute_effect(a, () => ({
        ...$$restProps,
        href: "#nav",
        "aria-expanded": ($context(), untrack(() => $context().isOpen)),
        class: get(classes)
      }));
      var node_1 = child(a);
      slot(node_1, $$props, "default", {}, ($$anchor3) => {
        var span = root_26();
        var text2 = child(span, true);
        reset(span);
        template_effect(() => set_text(text2, ariaLabel()));
        append($$anchor3, span);
      });
      reset(a);
      action(a, ($$node) => {
        var _a, _b;
        return (_b = (_a = $context()).popperRef) == null ? void 0 : _b.call(_a, $$node);
      });
      bind_this(a, ($$value) => inner($$value), () => inner());
      effect(() => event("click", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }));
      effect(() => event("click", a, toggleButton));
      append($$anchor2, a);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var div = root_43();
          attribute_effect(div, () => ({
            ...$$restProps,
            "aria-expanded": ($context(), untrack(() => $context().isOpen)),
            class: get(classes)
          }));
          var node_3 = child(div);
          slot(node_3, $$props, "default", {}, ($$anchor4) => {
            var span_1 = root_53();
            var text_1 = child(span_1, true);
            reset(span_1);
            template_effect(() => set_text(text_1, ariaLabel()));
            append($$anchor4, span_1);
          });
          reset(div);
          action(div, ($$node) => {
            var _a, _b;
            return (_b = (_a = $context()).popperRef) == null ? void 0 : _b.call(_a, $$node);
          });
          bind_this(div, ($$value) => inner($$value), () => inner());
          effect(() => event("click", div, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }));
          effect(() => event("click", div, toggleButton));
          append($$anchor3, div);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          {
            var consequent_2 = ($$anchor4) => {
              var span_2 = root_7();
              attribute_effect(span_2, () => ({
                ...$$restProps,
                "aria-expanded": ($context(), untrack(() => $context().isOpen)),
                class: get(classes)
              }));
              var node_5 = child(span_2);
              slot(node_5, $$props, "default", {}, ($$anchor5) => {
                var span_3 = root_83();
                var text_2 = child(span_3, true);
                reset(span_3);
                template_effect(() => set_text(text_2, ariaLabel()));
                append($$anchor5, span_3);
              });
              reset(span_2);
              action(span_2, ($$node) => {
                var _a, _b;
                return (_b = (_a = $context()).popperRef) == null ? void 0 : _b.call(_a, $$node);
              });
              bind_this(span_2, ($$value) => inner($$value), () => inner());
              effect(() => event("click", span_2, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              }));
              effect(() => event("click", span_2, toggleButton));
              append($$anchor4, span_2);
            };
            var alternate = ($$anchor4) => {
              var button = root_9();
              attribute_effect(button, () => ({
                ...$$restProps,
                type: "button",
                "aria-expanded": ($context(), untrack(() => $context().isOpen)),
                class: get(btnClasses)
              }));
              var node_6 = child(button);
              slot(node_6, $$props, "default", {}, ($$anchor5) => {
                var span_4 = root_10();
                var text_3 = child(span_4, true);
                reset(span_4);
                template_effect(() => set_text(text_3, ariaLabel()));
                append($$anchor5, span_4);
              });
              reset(button);
              action(button, ($$node) => {
                var _a, _b;
                return (_b = (_a = $context()).popperRef) == null ? void 0 : _b.call(_a, $$node);
              });
              bind_this(button, ($$value) => inner($$value), () => inner());
              effect(() => event("click", button, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              }));
              effect(() => event("click", button, toggleButton));
              append($$anchor4, button);
            };
            add_svelte_meta(
              () => if_block(
                node_4,
                ($$render) => {
                  if (strict_equals(tag(), "span")) $$render(consequent_2);
                  else $$render(alternate, false);
                },
                true
              ),
              "if",
              DropdownToggle,
              82,
              0
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (strict_equals(tag(), "div")) $$render(consequent_1);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          DropdownToggle,
          67,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (nav()) $$render(consequent);
        else $$render(alternate_2, false);
      }),
      "if",
      DropdownToggle,
      52,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  DropdownToggle = hmr(DropdownToggle, () => DropdownToggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownToggle[HMR].source;
    set(DropdownToggle[HMR].source, module.default[HMR].original);
  });
}
var DropdownToggle_default = DropdownToggle;

// node_modules/@sveltestrap/sveltestrap/dist/Fade/Fade.svelte
Fade[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Fade/Fade.svelte";
var root_113 = add_locations(from_html(`<div><!></div>`), Fade[FILENAME], [[61, 2]]);
function Fade($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "isOpen",
    "class",
    "onEntering",
    "onEntered",
    "onExiting",
    "onExited",
    "toggler"
  ]);
  push($$props, false, Fade);
  const dispatch = createEventDispatcher();
  let isOpen = prop($$props, "isOpen", 12, false);
  let className = prop($$props, "class", 8, "");
  let onEntering = prop($$props, "onEntering", 8, () => dispatch("opening"));
  let onEntered = prop($$props, "onEntered", 8, () => dispatch("open"));
  let onExiting = prop($$props, "onExiting", 8, () => dispatch("closing"));
  let onExited = prop($$props, "onExited", 8, () => dispatch("close"));
  let toggler = prop($$props, "toggler", 8, null);
  onMount(() => toggle_default(toggler(), (e) => {
    isOpen(!isOpen());
    e.preventDefault();
  }));
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_113();
      attribute_effect(div, () => ({ ...$$restProps, class: className() }));
      var node_1 = child(div);
      slot(node_1, $$props, "default", {}, null);
      reset(div);
      transition(3, div, () => fade);
      event("introstart", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("introend", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("outrostart", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("outroend", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("introstart", div, function(...$$args) {
        apply(onEntering, this, $$args, Fade, [68, 19]);
      });
      event("introend", div, function(...$$args) {
        apply(onEntered, this, $$args, Fade, [69, 17]);
      });
      event("outrostart", div, function(...$$args) {
        apply(onExiting, this, $$args, Fade, [70, 19]);
      });
      event("outroend", div, function(...$$args) {
        apply(onExited, this, $$args, Fade, [71, 17]);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent);
      }),
      "if",
      Fade,
      60,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Fade = hmr(Fade, () => Fade[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fade[HMR].source;
    set(Fade[HMR].source, module.default[HMR].original);
  });
}
var Fade_default = Fade;

// node_modules/@sveltestrap/sveltestrap/dist/Figure/Figure.svelte
Figure[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Figure/Figure.svelte";
var root_114 = add_locations(from_html(`<figcaption class="figure-caption"> <!></figcaption>`), Figure[FILENAME], [[28, 4]]);
var root29 = add_locations(from_html(`<figure><!> <!></figure>`), Figure[FILENAME], [[25, 0]]);
function Figure($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "caption"]);
  push($$props, false, Figure);
  const classes = mutable_source();
  setContext("figure", true);
  let className = prop($$props, "class", 8, "");
  let caption = prop($$props, "caption", 8, void 0);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames("figure", className()));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var figure = root29();
  attribute_effect(figure, () => ({ class: get(classes), ...$$restProps }));
  var node = child(figure);
  slot(node, $$props, "default", {}, null);
  var node_1 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var figcaption = root_114();
      var text2 = child(figcaption, true);
      var node_2 = sibling(text2);
      slot(node_2, $$props, "caption", {}, null);
      reset(figcaption);
      template_effect(() => set_text(text2, caption()));
      append($$anchor2, figcaption);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (deep_read_state(caption()), untrack(() => caption() || $$slots.caption)) $$render(consequent);
      }),
      "if",
      Figure,
      27,
      2
    );
  }
  reset(figure);
  append($$anchor, figure);
  return pop($$exports);
}
if (import.meta.hot) {
  Figure = hmr(Figure, () => Figure[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Figure[HMR].source;
    set(Figure[HMR].source, module.default[HMR].original);
  });
}
var Figure_default = Figure;

// node_modules/@sveltestrap/sveltestrap/dist/Form/Form.svelte
Form[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Form/Form.svelte";
var root30 = add_locations(from_html(`<form><!></form>`), Form[FILENAME], [[15, 0]]);
function Form($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "inline", "validated"]);
  push($$props, false, Form);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let inline = prop($$props, "inline", 8, false);
  let validated = prop($$props, "validated", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(inline()), deep_read_state(validated())),
    () => {
      set(classes, classnames(className(), { "form-inline": inline(), "was-validated": validated() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var form = root30();
  attribute_effect(form, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(form);
  slot(node, $$props, "default", {}, null);
  reset(form);
  event("submit", form, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, form);
  return pop($$exports);
}
if (import.meta.hot) {
  Form = hmr(Form, () => Form[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Form[HMR].source;
    set(Form[HMR].source, module.default[HMR].original);
  });
}
var Form_default = Form;

// node_modules/@sveltestrap/sveltestrap/dist/FormCheck/FormCheck.svelte
FormCheck[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/FormCheck/FormCheck.svelte";
var root_115 = add_locations(from_html(`<input/>`), FormCheck[FILENAME], [[37, 4]]);
var root_34 = add_locations(from_html(`<input/>`), FormCheck[FILENAME], [[53, 4]]);
var root_44 = add_locations(from_html(`<input/>`), FormCheck[FILENAME], [[69, 4]]);
var root_54 = add_locations(from_html(`<label class="form-check-label"><!></label>`), FormCheck[FILENAME], [[86, 4]]);
var root31 = add_locations(from_html(`<div><!> <!></div>`), FormCheck[FILENAME], [[35, 0]]);
function FormCheck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "checked",
    "disabled",
    "group",
    "id",
    "inline",
    "inner",
    "invalid",
    "label",
    "name",
    "reverse",
    "size",
    "type",
    "valid",
    "value"
  ]);
  push($$props, false, FormCheck);
  const classes = mutable_source();
  const inputClasses = mutable_source();
  const idFor = mutable_source();
  const binding_group = [];
  let className = prop($$props, "class", 8, "");
  let checked = prop($$props, "checked", 12, false);
  let disabled = prop($$props, "disabled", 8, false);
  let group = prop($$props, "group", 12, void 0);
  let id = prop($$props, "id", 8, void 0);
  let inline = prop($$props, "inline", 8, false);
  let inner = prop($$props, "inner", 12, void 0);
  let invalid = prop($$props, "invalid", 8, false);
  let label = prop($$props, "label", 8, "");
  let name = prop($$props, "name", 8, "");
  let reverse = prop($$props, "reverse", 8, false);
  let size = prop($$props, "size", 8, "");
  let type = prop($$props, "type", 8, "checkbox");
  let valid = prop($$props, "valid", 8, false);
  let value = prop($$props, "value", 8, void 0);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(reverse()), deep_read_state(type()), deep_read_state(inline()), deep_read_state(size())),
    () => {
      set(classes, classnames(className(), "form-check", {
        "form-check-reverse": reverse(),
        "form-switch": strict_equals(type(), "switch"),
        "form-check-inline": inline(),
        [`form-control-${size()}`]: size()
      }));
    }
  );
  legacy_pre_effect(
    () => (classnames, deep_read_state(invalid()), deep_read_state(valid())),
    () => {
      set(inputClasses, classnames("form-check-input", { "is-invalid": invalid(), "is-valid": valid() }));
    }
  );
  legacy_pre_effect(() => (deep_read_state(id()), deep_read_state(label())), () => {
    set(idFor, id() || label());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root31();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var input = root_115();
      remove_input_defaults(input);
      attribute_effect(input, () => ({
        ...$$restProps,
        class: get(inputClasses),
        id: get(idFor),
        type: "radio",
        disabled: disabled(),
        name: name(),
        value: value()
      }));
      bind_this(input, ($$value) => inner($$value), () => inner());
      bind_group(
        binding_group,
        [],
        input,
        () => {
          value();
          return group();
        },
        group
      );
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("input", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, input);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent_1 = ($$anchor3) => {
          var input_1 = root_34();
          remove_input_defaults(input_1);
          attribute_effect(input_1, () => ({
            ...$$restProps,
            class: get(inputClasses),
            id: get(idFor),
            type: "checkbox",
            disabled: disabled(),
            name: name(),
            value: value()
          }));
          bind_this(input_1, ($$value) => inner($$value), () => inner());
          bind_checked(input_1, checked);
          event("blur", input_1, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input_1, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input_1, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", input_1, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, input_1);
        };
        var alternate = ($$anchor3) => {
          var input_2 = root_44();
          remove_input_defaults(input_2);
          attribute_effect(input_2, () => ({
            ...$$restProps,
            class: get(inputClasses),
            id: get(idFor),
            type: "checkbox",
            disabled: disabled(),
            name: name(),
            value: value()
          }));
          bind_this(input_2, ($$value) => inner($$value), () => inner());
          bind_checked(input_2, checked);
          event("blur", input_2, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input_2, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input_2, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", input_2, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, input_2);
        };
        add_svelte_meta(
          () => if_block(
            node_1,
            ($$render) => {
              if (strict_equals(type(), "switch")) $$render(consequent_1);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          FormCheck,
          52,
          2
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(type(), "radio")) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      FormCheck,
      36,
      2
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var label_1 = root_54();
      var node_3 = child(label_1);
      slot(node_3, $$props, "label", {}, ($$anchor3) => {
        var text2 = text();
        template_effect(() => set_text(text2, label()));
        append($$anchor3, text2);
      });
      reset(label_1);
      template_effect(() => set_attribute(label_1, "for", get(idFor)));
      append($$anchor2, label_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (label()) $$render(consequent_2);
      }),
      "if",
      FormCheck,
      85,
      2
    );
  }
  reset(div);
  template_effect(() => set_class(div, 1, clsx(get(classes))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  FormCheck = hmr(FormCheck, () => FormCheck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FormCheck[HMR].source;
    set(FormCheck[HMR].source, module.default[HMR].original);
  });
}
var FormCheck_default = FormCheck;

// node_modules/@sveltestrap/sveltestrap/dist/FormFeedback/FormFeedback.svelte
FormFeedback[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/FormFeedback/FormFeedback.svelte";
var root32 = add_locations(from_html(`<div><!></div>`), FormFeedback[FILENAME], [[17, 0]]);
function FormFeedback($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "valid", "tooltip"]);
  push($$props, false, FormFeedback);
  let className = prop($$props, "class", 8, "");
  let valid = prop($$props, "valid", 8, void 0);
  let tooltip = prop($$props, "tooltip", 8, false);
  let classes = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(tooltip()), classnames, deep_read_state(className()), deep_read_state(valid())),
    () => {
      const validMode = tooltip() ? "tooltip" : "feedback";
      set(classes, classnames(className(), valid() ? `valid-${validMode}` : `invalid-${validMode}`));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root32();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  FormFeedback = hmr(FormFeedback, () => FormFeedback[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FormFeedback[HMR].source;
    set(FormFeedback[HMR].source, module.default[HMR].original);
  });
}
var FormFeedback_default = FormFeedback;

// node_modules/@sveltestrap/sveltestrap/dist/FormGroup/FormGroup.svelte
FormGroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/FormGroup/FormGroup.svelte";
var root_27 = add_locations(from_html(`<label> <!></label>`), FormGroup[FILENAME], [[73, 6]]);
var root_116 = add_locations(from_html(`<fieldset><!> <!></fieldset>`), FormGroup[FILENAME], [[69, 2]]);
var root_45 = add_locations(from_html(`<label> <!></label>`), FormGroup[FILENAME], [[84, 6]]);
var root_35 = add_locations(from_html(`<div><!> <!></div>`), FormGroup[FILENAME], [[80, 2]]);
function FormGroup($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "check",
    "disabled",
    "floating",
    "inline",
    "label",
    "row",
    "spacing",
    "tag"
  ]);
  push($$props, false, FormGroup);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let check = prop($$props, "check", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let floating = prop($$props, "floating", 8, false);
  let inline = prop($$props, "inline", 8, false);
  let label = prop($$props, "label", 8, "");
  let row = prop($$props, "row", 8, false);
  let spacing = prop($$props, "spacing", 8, "mb-3");
  let tag = prop($$props, "tag", 8, null);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(spacing()), deep_read_state(row()), deep_read_state(check()), deep_read_state(inline()), deep_read_state(floating()), deep_read_state(disabled())),
    () => {
      set(classes, classnames(className(), spacing(), {
        row: row(),
        "form-check": check(),
        "form-check-inline": check() && inline(),
        "form-floating": floating(),
        disabled: check() && disabled()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fieldset = root_116();
      attribute_effect(fieldset, () => ({ ...$$restProps, class: get(classes) }));
      var node_1 = child(fieldset);
      slot(node_1, $$props, "default", {}, null);
      var node_2 = sibling(node_1, 2);
      {
        var consequent = ($$anchor3) => {
          var label_1 = root_27();
          var text2 = child(label_1);
          var node_3 = sibling(text2);
          slot(node_3, $$props, "label", {}, null);
          reset(label_1);
          template_effect(() => set_text(text2, `${label() ?? ""} `));
          append($$anchor3, label_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (deep_read_state(label()), untrack(() => label() || $$slots.label)) $$render(consequent);
          }),
          "if",
          FormGroup,
          71,
          4
        );
      }
      reset(fieldset);
      append($$anchor2, fieldset);
    };
    var alternate = ($$anchor2) => {
      var div = root_35();
      attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
      var node_4 = child(div);
      slot(node_4, $$props, "default", {}, null);
      var node_5 = sibling(node_4, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var label_2 = root_45();
          var text_1 = child(label_2);
          var node_6 = sibling(text_1);
          slot(node_6, $$props, "label", {}, null);
          reset(label_2);
          template_effect(() => set_text(text_1, `${label() ?? ""} `));
          append($$anchor3, label_2);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (deep_read_state(label()), untrack(() => label() || $$slots.label)) $$render(consequent_2);
          }),
          "if",
          FormGroup,
          82,
          4
        );
      }
      reset(div);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(tag(), "fieldset")) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      FormGroup,
      68,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FormGroup = hmr(FormGroup, () => FormGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FormGroup[HMR].source;
    set(FormGroup[HMR].source, module.default[HMR].original);
  });
}
var FormGroup_default = FormGroup;

// node_modules/@sveltestrap/sveltestrap/dist/FormText/FormText.svelte
FormText[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/FormText/FormText.svelte";
var root33 = add_locations(from_html(`<small><!></small>`), FormText[FILENAME], [[12, 0]]);
function FormText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "inline", "color"]);
  push($$props, false, FormText);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let inline = prop($$props, "inline", 8, false);
  let color = prop($$props, "color", 8, void 0);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(inline()), deep_read_state(color())),
    () => {
      set(classes, classnames(className(), !inline() ? "form-text" : false, color() ? `text-${color()}` : false));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var small = root33();
  attribute_effect(small, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(small);
  slot(node, $$props, "default", {}, null);
  reset(small);
  append($$anchor, small);
  return pop($$exports);
}
if (import.meta.hot) {
  FormText = hmr(FormText, () => FormText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FormText[HMR].source;
    set(FormText[HMR].source, module.default[HMR].original);
  });
}
var FormText_default = FormText;

// node_modules/@sveltestrap/sveltestrap/dist/Icon/Icon.svelte
Icon[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Icon/Icon.svelte";
var root34 = add_locations(from_html(`<i></i>`), Icon[FILENAME], [[22, 0]]);
function Icon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "name"]);
  push($$props, false, Icon);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let name = prop($$props, "name", 8, "");
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(name())),
    () => {
      set(classes, classnames(className(), `bi-${name()}`));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var i = root34();
  attribute_effect(i, () => ({ ...$$restProps, class: get(classes) }));
  append($$anchor, i);
  return pop($$exports);
}
if (import.meta.hot) {
  Icon = hmr(Icon, () => Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Icon[HMR].source;
    set(Icon[HMR].source, module.default[HMR].original);
  });
}
var Icon_default = Icon;

// node_modules/@sveltestrap/sveltestrap/dist/Image/Image.svelte
Image[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Image/Image.svelte";
var root35 = add_locations(from_html(`<img/>`), Image[FILENAME], [[53, 0]]);
function Image($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "alt", "figure", "fluid", "theme", "thumbnail"]);
  push($$props, false, Image);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let alt = prop($$props, "alt", 8, void 0);
  let figure = prop($$props, "figure", 24, () => getContext("figure"));
  let fluid = prop($$props, "fluid", 8, false);
  let theme = prop($$props, "theme", 8, null);
  let thumbnail = prop($$props, "thumbnail", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(figure()), deep_read_state(fluid()), deep_read_state(thumbnail())),
    () => {
      set(classes, classnames(className(), {
        "figure-img": figure(),
        "img-fluid": fluid(),
        "img-thumbnail": thumbnail()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var img = root35();
  attribute_effect(img, () => ({
    alt: alt(),
    ...$$restProps,
    "data-bs-theme": theme(),
    class: get(classes)
  }));
  replay_events(img);
  append($$anchor, img);
  return pop($$exports);
}
if (import.meta.hot) {
  Image = hmr(Image, () => Image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image[HMR].source;
    set(Image[HMR].source, module.default[HMR].original);
  });
}
var Image_default = Image;

// node_modules/@sveltestrap/sveltestrap/dist/InlineContainer/InlineContainer.svelte
InlineContainer[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/InlineContainer/InlineContainer.svelte";
var root36 = add_locations(from_html(`<div><!></div>`), InlineContainer[FILENAME], [[5, 0]]);
function InlineContainer($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, InlineContainer);
  let x = "wtf svelte?";
  var $$exports = { ...legacy_api() };
  var div = root36();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  InlineContainer = hmr(InlineContainer, () => InlineContainer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InlineContainer[HMR].source;
    set(InlineContainer[HMR].source, module.default[HMR].original);
  });
}
var InlineContainer_default = InlineContainer;

// node_modules/@sveltestrap/sveltestrap/dist/Input/Input.svelte
Input[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Input/Input.svelte";
var root_28 = add_locations(from_html(`<input/>`), Input[FILENAME], [[244, 4]]);
var root_46 = add_locations(from_html(`<input/>`), Input[FILENAME], [[269, 4]]);
var root_63 = add_locations(from_html(`<input/>`), Input[FILENAME], [[293, 4]]);
var root_84 = add_locations(from_html(`<input/>`), Input[FILENAME], [[319, 4]]);
var root_122 = add_locations(from_html(`<input/>`), Input[FILENAME], [[375, 4]]);
var root_142 = add_locations(from_html(`<input/>`), Input[FILENAME], [[401, 4]]);
var root_162 = add_locations(from_html(`<input/>`), Input[FILENAME], [[427, 4]]);
var root_172 = add_locations(from_html(`<input/>`), Input[FILENAME], [[453, 4]]);
var root_192 = add_locations(from_html(`<textarea></textarea>`), Input[FILENAME], [[478, 2]]);
var root_21 = add_locations(from_html(`<select><!></select>`), Input[FILENAME], [[501, 2]]);
var root37 = add_locations(from_html(`<!> <!>`, 1), Input[FILENAME], []);
function Input($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "bsSize",
    "checked",
    "color",
    "disabled",
    "feedback",
    "files",
    "group",
    "inner",
    "invalid",
    "label",
    "max",
    "min",
    "multiple",
    "name",
    "placeholder",
    "plaintext",
    "readonly",
    "reverse",
    "size",
    "theme",
    "type",
    "valid",
    "value"
  ]);
  push($$props, false, Input);
  var $$ownership_validator = create_ownership_validator($$props);
  const binding_group = [];
  let className = prop($$props, "class", 8, "");
  let bsSize = prop($$props, "bsSize", 12, void 0);
  let checked = prop($$props, "checked", 12, false);
  let color = prop($$props, "color", 8, void 0);
  let disabled = prop($$props, "disabled", 8, void 0);
  let feedback = prop($$props, "feedback", 8, void 0);
  let files = prop($$props, "files", 12, void 0);
  let group = prop($$props, "group", 12, void 0);
  let inner = prop($$props, "inner", 12, void 0);
  let invalid = prop($$props, "invalid", 8, false);
  let label = prop($$props, "label", 8, void 0);
  let max = prop($$props, "max", 8, void 0);
  let min = prop($$props, "min", 8, void 0);
  let multiple = prop($$props, "multiple", 8, void 0);
  let name = prop($$props, "name", 8, "");
  let placeholder = prop($$props, "placeholder", 8, "");
  let plaintext = prop($$props, "plaintext", 8, false);
  let readonly = prop($$props, "readonly", 8, void 0);
  let reverse = prop($$props, "reverse", 8, false);
  let size = prop($$props, "size", 12, void 0);
  let theme = prop($$props, "theme", 8, void 0);
  let type = prop($$props, "type", 8, "text");
  let valid = prop($$props, "valid", 8, false);
  let value = prop($$props, "value", 12, void 0);
  let classes = mutable_source();
  let tag = mutable_source();
  legacy_pre_effect(
    () => (get(tag), deep_read_state(type()), deep_read_state(color()), deep_read_state(plaintext()), deep_read_state(size()), deep_read_state(bsSize()), classnames, deep_read_state(className()), deep_read_state(invalid()), deep_read_state(valid())),
    () => {
      const isNotaNumber = new RegExp("\\D", "g");
      let isBtn = false;
      let formControlClass = "form-control";
      set(tag, "input");
      switch (type()) {
        case "color":
          formControlClass = `form-control form-control-color`;
          break;
        case "range":
          formControlClass = "form-range";
          break;
        case "select":
          formControlClass = `form-select`;
          set(tag, "select");
          break;
        case "textarea":
          set(tag, "textarea");
          break;
        case "button":
        case "reset":
        case "submit":
          formControlClass = `btn btn-${color() || "secondary"}`;
          isBtn = true;
          break;
        case "hidden":
        case "image":
          formControlClass = void 0;
          break;
        default:
          formControlClass = "form-control";
          set(tag, "input");
      }
      if (plaintext()) {
        formControlClass = `${formControlClass}-plaintext`;
        set(tag, "input");
      }
      if (size() && isNotaNumber.test(size())) {
        console.warn(`Please use the prop "bsSize" instead of the "size" to bootstrap's input sizing.`);
        bsSize(size());
        size(void 0);
      }
      set(classes, classnames(className(), formControlClass, {
        "is-invalid": invalid(),
        "is-valid": valid(),
        [`form-control-${bsSize()}`]: bsSize() && !isBtn && strict_equals(get(tag), "select", false),
        [`form-select-${bsSize()}`]: bsSize() && strict_equals(get(tag), "select"),
        [`btn-${bsSize()}`]: bsSize() && isBtn
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root37();
  var node = first_child(fragment);
  {
    var consequent_8 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var input = root_28();
          remove_input_defaults(input);
          attribute_effect(input, () => ({
            ...$$restProps,
            ...{ type: type() },
            "data-bs-theme": theme(),
            class: get(classes),
            disabled: disabled(),
            name: name(),
            placeholder: placeholder(),
            readonly: readonly(),
            size: size()
          }));
          bind_this(input, ($$value) => inner($$value), () => inner());
          bind_value(input, value);
          event("blur", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("dblclick", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mousedown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, input);
        };
        var alternate_7 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var input_1 = root_46();
              remove_input_defaults(input_1);
              attribute_effect(input_1, () => ({
                ...$$restProps,
                "data-bs-theme": theme(),
                class: get(classes),
                type: "color",
                disabled: disabled(),
                name: name(),
                placeholder: placeholder(),
                readonly: readonly()
              }));
              bind_this(input_1, ($$value) => inner($$value), () => inner());
              bind_value(input_1, value);
              event("blur", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("dblclick", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("input", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keydown", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keypress", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keyup", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mousedown", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseup", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              append($$anchor4, input_1);
            };
            var alternate_6 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_3 = first_child(fragment_3);
              {
                var consequent_2 = ($$anchor5) => {
                  var input_2 = root_63();
                  remove_input_defaults(input_2);
                  attribute_effect(input_2, () => ({
                    ...$$restProps,
                    "data-bs-theme": theme(),
                    class: get(classes),
                    type: "email",
                    disabled: disabled(),
                    multiple: multiple(),
                    name: name(),
                    placeholder: placeholder(),
                    readonly: readonly(),
                    size: size()
                  }));
                  bind_this(input_2, ($$value) => inner($$value), () => inner());
                  bind_value(input_2, value);
                  event("blur", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("change", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("click", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("dblclick", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("focus", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("input", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("keydown", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("keypress", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("keyup", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("mousedown", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  event("mouseup", input_2, function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  });
                  append($$anchor5, input_2);
                };
                var alternate_5 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_4 = first_child(fragment_4);
                  {
                    var consequent_3 = ($$anchor6) => {
                      var input_3 = root_84();
                      remove_input_defaults(input_3);
                      attribute_effect(input_3, () => ({
                        ...$$restProps,
                        "data-bs-theme": theme(),
                        class: get(classes),
                        type: "file",
                        disabled: disabled(),
                        invalid: invalid(),
                        multiple: multiple(),
                        name: name(),
                        placeholder: placeholder(),
                        readonly: readonly(),
                        valid: valid()
                      }));
                      bind_this(input_3, ($$value) => inner($$value), () => inner());
                      bind_files(input_3, files);
                      bind_value(input_3, value);
                      event("blur", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("change", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("click", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("focus", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("input", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("keydown", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("keypress", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("keyup", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("mousedown", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      event("mouseup", input_3, function($$arg) {
                        bubble_event.call(this, $$props, $$arg);
                      });
                      append($$anchor6, input_3);
                    };
                    var alternate_4 = ($$anchor6) => {
                      var fragment_5 = comment();
                      var node_5 = first_child(fragment_5);
                      {
                        var consequent_4 = ($$anchor7) => {
                          var fragment_6 = comment();
                          var node_6 = first_child(fragment_6);
                          {
                            $$ownership_validator.binding("checked", FormCheck_default, checked);
                            $$ownership_validator.binding("inner", FormCheck_default, inner);
                            $$ownership_validator.binding("group", FormCheck_default, group);
                            $$ownership_validator.binding("value", FormCheck_default, value);
                            add_svelte_meta(
                              () => FormCheck_default(node_6, spread_props(() => $$restProps, {
                                get "data-bs-theme"() {
                                  return theme();
                                },
                                get class() {
                                  return className();
                                },
                                get size() {
                                  return bsSize();
                                },
                                get type() {
                                  return type();
                                },
                                get disabled() {
                                  return disabled();
                                },
                                get invalid() {
                                  return invalid();
                                },
                                get label() {
                                  return label();
                                },
                                get name() {
                                  return name();
                                },
                                get placeholder() {
                                  return placeholder();
                                },
                                get reverse() {
                                  return reverse();
                                },
                                get readonly() {
                                  return readonly();
                                },
                                get valid() {
                                  return valid();
                                },
                                get checked() {
                                  return checked();
                                },
                                set checked($$value) {
                                  checked($$value);
                                },
                                get inner() {
                                  return inner();
                                },
                                set inner($$value) {
                                  inner($$value);
                                },
                                get group() {
                                  return group();
                                },
                                set group($$value) {
                                  group($$value);
                                },
                                get value() {
                                  return value();
                                },
                                set value($$value) {
                                  value($$value);
                                },
                                $$events: {
                                  blur($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  change($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  focus($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  input($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  keydown($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  keypress($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  keyup($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  mousedown($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  },
                                  mouseup($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  }
                                },
                                $$legacy: true
                              })),
                              "component",
                              Input,
                              346,
                              4,
                              { componentTag: "FormCheck" }
                            );
                          }
                          append($$anchor7, fragment_6);
                        };
                        var alternate_3 = ($$anchor7) => {
                          var fragment_7 = comment();
                          var node_7 = first_child(fragment_7);
                          {
                            var consequent_5 = ($$anchor8) => {
                              var input_4 = root_122();
                              remove_input_defaults(input_4);
                              attribute_effect(input_4, () => ({
                                ...$$restProps,
                                type: "number",
                                "data-bs-theme": theme(),
                                class: get(classes),
                                disabled: disabled(),
                                max: max(),
                                min: min(),
                                name: name(),
                                placeholder: placeholder(),
                                readonly: readonly()
                              }));
                              bind_this(input_4, ($$value) => inner($$value), () => inner());
                              bind_value(input_4, value);
                              event("blur", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("change", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("click", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("dblclick", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("focus", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("input", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("keydown", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("keypress", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("keyup", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("mousedown", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              event("mouseup", input_4, function($$arg) {
                                bubble_event.call(this, $$props, $$arg);
                              });
                              append($$anchor8, input_4);
                            };
                            var alternate_2 = ($$anchor8) => {
                              var fragment_8 = comment();
                              var node_8 = first_child(fragment_8);
                              {
                                var consequent_6 = ($$anchor9) => {
                                  var input_5 = root_142();
                                  remove_input_defaults(input_5);
                                  attribute_effect(input_5, () => ({
                                    ...$$restProps,
                                    type: "range",
                                    "data-bs-theme": theme(),
                                    class: get(classes),
                                    disabled: disabled(),
                                    max: max(),
                                    min: min(),
                                    name: name(),
                                    placeholder: placeholder(),
                                    readonly: readonly()
                                  }));
                                  bind_this(input_5, ($$value) => inner($$value), () => inner());
                                  bind_value(input_5, value);
                                  event("blur", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("change", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("click", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("dblclick", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("focus", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("input", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("keydown", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("keypress", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("keyup", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("mousedown", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  event("mouseup", input_5, function($$arg) {
                                    bubble_event.call(this, $$props, $$arg);
                                  });
                                  append($$anchor9, input_5);
                                };
                                var alternate_1 = ($$anchor9) => {
                                  var fragment_9 = comment();
                                  var node_9 = first_child(fragment_9);
                                  {
                                    var consequent_7 = ($$anchor10) => {
                                      var input_6 = root_162();
                                      remove_input_defaults(input_6);
                                      attribute_effect(input_6, () => ({
                                        ...$$restProps,
                                        ...{ type: type() },
                                        "data-bs-theme": theme(),
                                        class: get(classes),
                                        disabled: disabled(),
                                        max: max(),
                                        min: min(),
                                        name: name(),
                                        placeholder: placeholder(),
                                        readonly: readonly()
                                      }));
                                      bind_this(input_6, ($$value) => inner($$value), () => inner());
                                      bind_value(input_6, value);
                                      event("blur", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("change", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("click", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("dblclick", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("focus", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("input", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keydown", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keypress", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keyup", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("mousedown", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("mouseup", input_6, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      append($$anchor10, input_6);
                                    };
                                    var alternate = ($$anchor10) => {
                                      var input_7 = root_172();
                                      remove_input_defaults(input_7);
                                      attribute_effect(input_7, () => ({
                                        ...$$restProps,
                                        "data-bs-theme": theme(),
                                        class: get(classes),
                                        ...{ type: type() },
                                        name: name(),
                                        disabled: disabled(),
                                        placeholder: placeholder(),
                                        readonly: readonly()
                                      }));
                                      bind_this(input_7, ($$value) => inner($$value), () => inner());
                                      bind_value(input_7, value);
                                      event("blur", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("change", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("click", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("dblclick", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("focus", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("input", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keydown", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keypress", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("keyup", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("mousedown", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      event("mouseup", input_7, function($$arg) {
                                        bubble_event.call(this, $$props, $$arg);
                                      });
                                      append($$anchor10, input_7);
                                    };
                                    add_svelte_meta(
                                      () => if_block(
                                        node_9,
                                        ($$render) => {
                                          if (strict_equals(type(), "date") || strict_equals(type(), "datetime") || strict_equals(type(), "datetime-local") || strict_equals(type(), "month") || strict_equals(type(), "time") || strict_equals(type(), "week")) $$render(consequent_7);
                                          else $$render(alternate, false);
                                        },
                                        true
                                      ),
                                      "if",
                                      Input,
                                      426,
                                      2
                                    );
                                  }
                                  append($$anchor9, fragment_9);
                                };
                                add_svelte_meta(
                                  () => if_block(
                                    node_8,
                                    ($$render) => {
                                      if (strict_equals(type(), "range")) $$render(consequent_6);
                                      else $$render(alternate_1, false);
                                    },
                                    true
                                  ),
                                  "if",
                                  Input,
                                  400,
                                  2
                                );
                              }
                              append($$anchor8, fragment_8);
                            };
                            add_svelte_meta(
                              () => if_block(
                                node_7,
                                ($$render) => {
                                  if (strict_equals(type(), "number")) $$render(consequent_5);
                                  else $$render(alternate_2, false);
                                },
                                true
                              ),
                              "if",
                              Input,
                              374,
                              2
                            );
                          }
                          append($$anchor7, fragment_7);
                        };
                        add_svelte_meta(
                          () => if_block(
                            node_5,
                            ($$render) => {
                              if (strict_equals(type(), "checkbox") || strict_equals(type(), "radio") || strict_equals(type(), "switch")) $$render(consequent_4);
                              else $$render(alternate_3, false);
                            },
                            true
                          ),
                          "if",
                          Input,
                          345,
                          2
                        );
                      }
                      append($$anchor6, fragment_5);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_4,
                        ($$render) => {
                          if (strict_equals(type(), "file")) $$render(consequent_3);
                          else $$render(alternate_4, false);
                        },
                        true
                      ),
                      "if",
                      Input,
                      318,
                      2
                    );
                  }
                  append($$anchor5, fragment_4);
                };
                add_svelte_meta(
                  () => if_block(
                    node_3,
                    ($$render) => {
                      if (strict_equals(type(), "email")) $$render(consequent_2);
                      else $$render(alternate_5, false);
                    },
                    true
                  ),
                  "if",
                  Input,
                  292,
                  2
                );
              }
              append($$anchor4, fragment_3);
            };
            add_svelte_meta(
              () => if_block(
                node_2,
                ($$render) => {
                  if (strict_equals(type(), "color")) $$render(consequent_1);
                  else $$render(alternate_6, false);
                },
                true
              ),
              "if",
              Input,
              268,
              2
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (strict_equals(type(), "text") || strict_equals(type(), "password") || strict_equals(type(), "search") || strict_equals(type(), "tel") || strict_equals(type(), "url")) $$render(consequent);
            else $$render(alternate_7, false);
          }),
          "if",
          Input,
          243,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_9 = ($$anchor2) => {
      var fragment_10 = comment();
      var node_10 = first_child(fragment_10);
      {
        var consequent_9 = ($$anchor3) => {
          var textarea = root_192();
          remove_textarea_child(textarea);
          attribute_effect(textarea, () => ({
            ...$$restProps,
            "data-bs-theme": theme(),
            class: get(classes),
            disabled: disabled(),
            name: name(),
            placeholder: placeholder(),
            readonly: readonly()
          }));
          bind_this(textarea, ($$value) => inner($$value), () => inner());
          bind_value(textarea, value);
          event("blur", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("dblclick", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mousedown", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseup", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, textarea);
        };
        var alternate_8 = ($$anchor3) => {
          var fragment_11 = comment();
          var node_11 = first_child(fragment_11);
          {
            var consequent_10 = ($$anchor4) => {
              var select = root_21();
              template_effect(() => {
                value();
                invalidate_inner_signals(() => {
                  $$restProps;
                  theme();
                  get(classes);
                  inner();
                  name();
                  disabled();
                  readonly();
                });
              });
              attribute_effect(select, () => ({
                ...$$restProps,
                "data-bs-theme": theme(),
                class: get(classes),
                name: name(),
                disabled: disabled(),
                readonly: readonly()
              }));
              var node_12 = child(select);
              slot(node_12, $$props, "default", {}, null);
              reset(select);
              bind_this(select, ($$value) => inner($$value), () => inner());
              bind_select_value(select, value);
              event("blur", select, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", select, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", select, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", select, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("input", select, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              append($$anchor4, select);
            };
            add_svelte_meta(
              () => if_block(
                node_11,
                ($$render) => {
                  if (strict_equals(get(tag), "select") && !multiple()) $$render(consequent_10);
                },
                true
              ),
              "if",
              Input,
              500,
              0
            );
          }
          append($$anchor3, fragment_11);
        };
        add_svelte_meta(
          () => if_block(
            node_10,
            ($$render) => {
              if (strict_equals(get(tag), "textarea")) $$render(consequent_9);
              else $$render(alternate_8, false);
            },
            true
          ),
          "if",
          Input,
          477,
          0
        );
      }
      append($$anchor2, fragment_10);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(get(tag), "input")) $$render(consequent_8);
        else $$render(alternate_9, false);
      }),
      "if",
      Input,
      242,
      0
    );
  }
  var node_13 = sibling(node, 2);
  {
    var consequent_12 = ($$anchor2) => {
      var fragment_12 = comment();
      var node_14 = first_child(fragment_12);
      {
        var consequent_11 = ($$anchor3) => {
          var fragment_13 = comment();
          var node_15 = first_child(fragment_13);
          add_svelte_meta(
            () => each(node_15, 1, feedback, index, ($$anchor4, msg) => {
              var fragment_14 = comment();
              var node_16 = first_child(fragment_14);
              add_svelte_meta(
                () => FormFeedback_default(node_16, {
                  get valid() {
                    return valid();
                  },
                  children: wrap_snippet(Input, ($$anchor5, $$slotProps) => {
                    next();
                    var text2 = text();
                    template_effect(() => set_text(text2, get(msg)));
                    append($$anchor5, text2);
                  }),
                  $$slots: { default: true }
                }),
                "component",
                Input,
                523,
                6,
                { componentTag: "FormFeedback" }
              );
              append($$anchor4, fragment_14);
            }),
            "each",
            Input,
            522,
            4
          );
          append($$anchor3, fragment_13);
        };
        var alternate_10 = ($$anchor3) => {
          var fragment_16 = comment();
          var node_17 = first_child(fragment_16);
          add_svelte_meta(
            () => FormFeedback_default(node_17, {
              get valid() {
                return valid();
              },
              children: wrap_snippet(Input, ($$anchor4, $$slotProps) => {
                next();
                var text_1 = text();
                template_effect(() => set_text(text_1, feedback()));
                append($$anchor4, text_1);
              }),
              $$slots: { default: true }
            }),
            "component",
            Input,
            526,
            4,
            { componentTag: "FormFeedback" }
          );
          append($$anchor3, fragment_16);
        };
        add_svelte_meta(
          () => if_block(node_14, ($$render) => {
            if (deep_read_state(feedback()), untrack(() => Array.isArray(feedback()))) $$render(consequent_11);
            else $$render(alternate_10, false);
          }),
          "if",
          Input,
          521,
          2
        );
      }
      append($$anchor2, fragment_12);
    };
    add_svelte_meta(
      () => if_block(node_13, ($$render) => {
        if (feedback()) $$render(consequent_12);
      }),
      "if",
      Input,
      520,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Input = hmr(Input, () => Input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Input[HMR].source;
    set(Input[HMR].source, module.default[HMR].original);
  });
}
var Input_default = Input;

// node_modules/@sveltestrap/sveltestrap/dist/InputGroup/InputGroup.svelte
InputGroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/InputGroup/InputGroup.svelte";
var root38 = add_locations(from_html(`<div><!></div>`), InputGroup[FILENAME], [[28, 0]]);
function InputGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "size", "theme"]);
  push($$props, false, InputGroup);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let size = prop($$props, "size", 8, "");
  let theme = prop($$props, "theme", 8, null);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(size())),
    () => {
      set(classes, classnames(className(), "input-group", size() ? `input-group-${size()}` : null));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root38();
  attribute_effect(div, () => ({
    ...$$restProps,
    class: get(classes),
    "data-bs-theme": theme()
  }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  InputGroup = hmr(InputGroup, () => InputGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputGroup[HMR].source;
    set(InputGroup[HMR].source, module.default[HMR].original);
  });
}
var InputGroup_default = InputGroup;

// node_modules/@sveltestrap/sveltestrap/dist/InputGroupText/InputGroupText.svelte
InputGroupText[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/InputGroupText/InputGroupText.svelte";
var root39 = add_locations(from_html(`<span><!></span>`), InputGroupText[FILENAME], [[15, 0]]);
function InputGroupText($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, InputGroupText);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "input-group-text"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var span = root39();
  attribute_effect(span, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(span);
  slot(node, $$props, "default", {}, null);
  reset(span);
  append($$anchor, span);
  return pop($$exports);
}
if (import.meta.hot) {
  InputGroupText = hmr(InputGroupText, () => InputGroupText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputGroupText[HMR].source;
    set(InputGroupText[HMR].source, module.default[HMR].original);
  });
}
var InputGroupText_default = InputGroupText;

// node_modules/@sveltestrap/sveltestrap/dist/Jumbotron/Jumbotron.svelte
Jumbotron[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Jumbotron/Jumbotron.svelte";
var root40 = add_locations(from_html(`<div><!></div>`), Jumbotron[FILENAME], [[15, 0]]);
function Jumbotron($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Jumbotron);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "p-5 mb-4 bg-light rounded-3"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root40();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(() => set_class(div, 1, clsx(get(classes))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Jumbotron = hmr(Jumbotron, () => Jumbotron[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Jumbotron[HMR].source;
    set(Jumbotron[HMR].source, module.default[HMR].original);
  });
}
var Jumbotron_default = Jumbotron;

// node_modules/@sveltestrap/sveltestrap/dist/Label/Label.svelte
Label[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Label/Label.svelte";
var root41 = add_locations(from_html(`<label><!></label>`), Label[FILENAME], [[68, 0]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "hidden",
    "check",
    "size",
    "for",
    "xs",
    "sm",
    "md",
    "lg",
    "xl",
    "xxl",
    "widths"
  ]);
  push($$props, false, Label);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let hidden = prop($$props, "hidden", 8, false);
  let check = prop($$props, "check", 8, false);
  let size = prop($$props, "size", 8, "");
  let fore = prop($$props, "for", 8, null);
  let xs = prop($$props, "xs", 8, "");
  let sm = prop($$props, "sm", 8, "");
  let md = prop($$props, "md", 8, "");
  let lg = prop($$props, "lg", 8, "");
  let xl = prop($$props, "xl", 8, "");
  let xxl = prop($$props, "xxl", 8, "");
  const colWidths = { xs: xs(), sm: sm(), md: md(), lg: lg(), xl: xl(), xxl: xxl() };
  let widths = prop($$props, "widths", 24, () => Object.keys(colWidths));
  const colClasses = [];
  widths().forEach((colWidth) => {
    let columnProp = $$sanitized_props[colWidth];
    if (!columnProp && strict_equals(columnProp, "", false)) {
      return;
    }
    const isXs = strict_equals(colWidth, "xs");
    let colClass;
    if (isObject(columnProp)) {
      const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
      colClasses.push(classnames({
        [colClass]: columnProp.size || strict_equals(columnProp.size, ""),
        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || strict_equals(columnProp.order, 0),
        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || strict_equals(columnProp.offset, 0)
      }));
    } else {
      colClass = getColumnSizeClass(isXs, colWidth, columnProp);
      colClasses.push(colClass);
    }
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(hidden()), deep_read_state(check()), deep_read_state(size())),
    () => {
      set(classes, classnames(className(), hidden() ? "visually-hidden" : false, check() ? "form-check-label" : false, size() ? `col-form-label-${size()}` : false, colClasses, colClasses.length ? "col-form-label" : "form-label"));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var label = root41();
  attribute_effect(label, () => ({ ...$$restProps, class: get(classes), for: fore() }));
  var node = child(label);
  slot(node, $$props, "default", {}, null);
  reset(label);
  append($$anchor, label);
  return pop($$exports);
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var Label_default = Label;

// node_modules/@sveltestrap/sveltestrap/dist/ListGroup/ListGroup.svelte
ListGroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ListGroup/ListGroup.svelte";
var root_117 = add_locations(from_html(`<ol><!></ol>`), ListGroup[FILENAME], [[45, 2]]);
var root_29 = add_locations(from_html(`<ul><!></ul>`), ListGroup[FILENAME], [[49, 2]]);
function ListGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "flush", "horizontal", "numbered", "theme"]);
  push($$props, false, ListGroup);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let flush = prop($$props, "flush", 8, false);
  let horizontal = prop($$props, "horizontal", 8, false);
  let numbered = prop($$props, "numbered", 8, false);
  let theme = prop($$props, "theme", 8, null);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(flush()), deep_read_state(horizontal()), deep_read_state(numbered())),
    () => {
      set(classes, classnames(className(), "list-group", {
        "list-group-flush": flush(),
        "list-group-horizontal": horizontal(),
        "list-group-numbered": numbered()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var ol = root_117();
      attribute_effect(ol, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_1 = child(ol);
      slot(node_1, $$props, "default", {}, null);
      reset(ol);
      append($$anchor2, ol);
    };
    var alternate = ($$anchor2) => {
      var ul = root_29();
      attribute_effect(ul, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme()
      }));
      var node_2 = child(ul);
      slot(node_2, $$props, "default", {}, null);
      reset(ul);
      append($$anchor2, ul);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (numbered()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      ListGroup,
      44,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ListGroup = hmr(ListGroup, () => ListGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListGroup[HMR].source;
    set(ListGroup[HMR].source, module.default[HMR].original);
  });
}
var ListGroup_default = ListGroup;

// node_modules/@sveltestrap/sveltestrap/dist/ListGroupItem/ListGroupItem.svelte
ListGroupItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ListGroupItem/ListGroupItem.svelte";
var root_118 = add_locations(from_html(`<a><!></a>`), ListGroupItem[FILENAME], [[22, 2]]);
var root_36 = add_locations(from_html(`<button><!></button>`), ListGroupItem[FILENAME], [[26, 2]]);
var root_47 = add_locations(from_html(`<li><!></li>`), ListGroupItem[FILENAME], [[32, 2]]);
function ListGroupItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "active",
    "disabled",
    "color",
    "action",
    "href",
    "tag"
  ]);
  push($$props, false, ListGroupItem);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let color = prop($$props, "color", 8, "");
  let action2 = prop($$props, "action", 8, false);
  let href = prop($$props, "href", 8, null);
  let tag = prop($$props, "tag", 8, null);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(active()), deep_read_state(disabled()), deep_read_state(action2()), deep_read_state(tag()), deep_read_state(color())),
    () => {
      set(classes, classnames(className(), "list-group-item", {
        active: active(),
        disabled: disabled(),
        "list-group-item-action": action2() || strict_equals(tag(), "button"),
        [`list-group-item-${color()}`]: color()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_118();
      attribute_effect(a, () => ({
        ...$$restProps,
        class: get(classes),
        href: href(),
        disabled: disabled(),
        active: active()
      }));
      var node_1 = child(a);
      slot(node_1, $$props, "default", {}, null);
      reset(a);
      event("click", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var button = root_36();
          attribute_effect(button, () => ({
            ...$$restProps,
            class: get(classes),
            type: "button",
            disabled: disabled(),
            active: active()
          }));
          var node_3 = child(button);
          slot(node_3, $$props, "default", {}, null);
          reset(button);
          event("click", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, button);
        };
        var alternate = ($$anchor3) => {
          var li = root_47();
          attribute_effect(li, () => ({
            ...$$restProps,
            class: get(classes),
            disabled: disabled(),
            active: active()
          }));
          var node_4 = child(li);
          slot(node_4, $$props, "default", {}, null);
          reset(li);
          event("click", li, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, li);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (strict_equals(tag(), "button")) $$render(consequent_1);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          ListGroupItem,
          25,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      ListGroupItem,
      21,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ListGroupItem = hmr(ListGroupItem, () => ListGroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListGroupItem[HMR].source;
    set(ListGroupItem[HMR].source, module.default[HMR].original);
  });
}
var ListGroupItem_default = ListGroupItem;

// node_modules/@sveltestrap/sveltestrap/dist/ModalBackdrop/ModalBackdrop.svelte
ModalBackdrop[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ModalBackdrop/ModalBackdrop.svelte";
var root_119 = add_locations(from_html(`<div></div>`), ModalBackdrop[FILENAME], [[22, 2]]);
function ModalBackdrop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "isOpen", "fade"]);
  push($$props, false, ModalBackdrop);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let isOpen = prop($$props, "isOpen", 8, false);
  let fade2 = prop($$props, "fade", 8, true);
  let loaded = mutable_source(false);
  onMount(() => {
    set(loaded, true);
  });
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "modal-backdrop"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_119();
      attribute_effect(
        div,
        ($0) => ({
          role: "presentation",
          ...$$restProps,
          class: get(classes),
          [CLASS]: $0
        }),
        [() => ({ fade: fade2() })]
      );
      transition(1, div, () => backdropIn);
      transition(2, div, () => backdropOut);
      event("click", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen() && get(loaded)) $$render(consequent);
      }),
      "if",
      ModalBackdrop,
      21,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ModalBackdrop = hmr(ModalBackdrop, () => ModalBackdrop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ModalBackdrop[HMR].source;
    set(ModalBackdrop[HMR].source, module.default[HMR].original);
  });
}
var ModalBackdrop_default = ModalBackdrop;

// node_modules/@sveltestrap/sveltestrap/dist/ModalBody/ModalBody.svelte
ModalBody[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ModalBody/ModalBody.svelte";
var root42 = add_locations(from_html(`<div><!></div>`), ModalBody[FILENAME], [[14, 0]]);
function ModalBody($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, ModalBody);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "modal-body"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root42();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ModalBody = hmr(ModalBody, () => ModalBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ModalBody[HMR].source;
    set(ModalBody[HMR].source, module.default[HMR].original);
  });
}
var ModalBody_default = ModalBody;

// node_modules/@sveltestrap/sveltestrap/dist/ModalHeader/ModalHeader.svelte
ModalHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ModalHeader/ModalHeader.svelte";
var root_48 = add_locations(from_html(`<button type="button" class="btn-close"></button>`), ModalHeader[FILENAME], [[44, 6]]);
var root43 = add_locations(from_html(`<div><h5 class="modal-title"><!></h5> <!></div>`), ModalHeader[FILENAME], [[34, 0, [[35, 2]]]]);
function ModalHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "toggle", "closeAriaLabel", "id", "content"]);
  push($$props, false, ModalHeader);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let toggle = prop($$props, "toggle", 8, void 0);
  let closeAriaLabel = prop($$props, "closeAriaLabel", 8, "Close");
  let id = prop($$props, "id", 8, void 0);
  let content = prop($$props, "content", 8, void 0);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "modal-header"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root43();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var h5 = child(div);
  var node = child(h5);
  {
    var consequent = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, content()));
      append($$anchor2, text2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (content()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      ModalHeader,
      36,
      4
    );
  }
  reset(h5);
  var node_2 = sibling(h5, 2);
  slot(node_2, $$props, "close", {}, ($$anchor2) => {
    var fragment_2 = comment();
    var node_3 = first_child(fragment_2);
    {
      var consequent_1 = ($$anchor3) => {
        var button = root_48();
        template_effect(() => set_attribute(button, "aria-label", closeAriaLabel()));
        event("click", button, function(...$$args) {
          apply(toggle, this, $$args, ModalHeader, [44, 38]);
        });
        append($$anchor3, button);
      };
      add_svelte_meta(
        () => if_block(node_3, ($$render) => {
          if (strict_equals(typeof toggle(), "function")) $$render(consequent_1);
        }),
        "if",
        ModalHeader,
        43,
        4
      );
    }
    append($$anchor2, fragment_2);
  });
  reset(div);
  template_effect(() => set_attribute(h5, "id", id()));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ModalHeader = hmr(ModalHeader, () => ModalHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ModalHeader[HMR].source;
    set(ModalHeader[HMR].source, module.default[HMR].original);
  });
}
var ModalHeader_default = ModalHeader;

// node_modules/@sveltestrap/sveltestrap/dist/Portal/Portal.svelte
Portal[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Portal/Portal.svelte";
var root44 = add_locations(from_html(`<div><!></div>`), Portal[FILENAME], [[19, 0]]);
function Portal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, Portal);
  let ref = mutable_source();
  let portal;
  onMount(() => {
    portal = document.createElement("div");
    document.body.appendChild(portal);
    portal.appendChild(get(ref));
  });
  onDestroy(() => {
    if (portal) {
      document.body.removeChild(portal);
    }
  });
  var $$exports = { ...legacy_api() };
  init();
  var div = root44();
  attribute_effect(div, () => ({ ...$$restProps }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  bind_this(div, ($$value) => set(ref, $$value), () => get(ref));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Portal = hmr(Portal, () => Portal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Portal[HMR].source;
    set(Portal[HMR].source, module.default[HMR].original);
  });
}
var Portal_default = Portal;

// node_modules/@sveltestrap/sveltestrap/dist/Modal/Modal.svelte
Modal[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Modal/Modal.svelte";
var openCount = 0;
var root_37 = add_locations(from_html(`<div role="dialog"><!> <div role="document"><div><!> <!></div></div></div>`), Modal[FILENAME], [[329, 8, [[347, 10, [[348, 12]]]]]]);
var root_210 = add_locations(from_html(`<div><!></div>`), Modal[FILENAME], [[326, 4]]);
var root45 = add_locations(from_html(`<!> <!>`, 1), Modal[FILENAME], []);
var $$css = {
  hash: "s-CZnj0CZDIM0e",
  code: "\n  .modal-open {\n    overflow: hidden;\n    padding-right: 0;\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWwuc3ZlbHRlIiwic291cmNlcyI6WyJNb2RhbC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIC8vIFRPRE8gZmFkZSBvcHRpb25cbiAgbGV0IG9wZW5Db3VudCA9IDA7XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBvbkRlc3Ryb3ksIG9uTW91bnQsIGFmdGVyVXBkYXRlIH0gZnJvbSAnc3ZlbHRlJztcblxuICBpbXBvcnQgeyBtb2RhbEluLCBtb2RhbE91dCB9IGZyb20gJy4uL3RyYW5zaXRpb25zJztcbiAgaW1wb3J0IHsgSW5saW5lQ29udGFpbmVyIH0gZnJvbSAnLi4vSW5saW5lQ29udGFpbmVyJztcbiAgaW1wb3J0IHsgTW9kYWxCYWNrZHJvcCB9IGZyb20gJy4uL01vZGFsQmFja2Ryb3AnO1xuICBpbXBvcnQgeyBNb2RhbEJvZHkgfSBmcm9tICcuLi9Nb2RhbEJvZHknO1xuICBpbXBvcnQgeyBNb2RhbEhlYWRlciB9IGZyb20gJy4uL01vZGFsSGVhZGVyJztcbiAgaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSAnLi4vUG9ydGFsJztcblxuICBpbXBvcnQge1xuICAgIGJyb3dzZXJFdmVudCxcbiAgICBjbGFzc25hbWVzLFxuICAgIGNvbmRpdGlvbmFsbHlVcGRhdGVTY3JvbGxiYXIsXG4gICAgZ2V0T3JpZ2luYWxCb2R5UGFkZGluZyxcbiAgICBzZXRTY3JvbGxiYXJXaWR0aCxcbiAgICB1dWlkXG4gIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgQ1NTIGNsYXNzIG5hbWVzIHRvIGFwcGx5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gIGV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xuXG4gIC8vIFByZXZlbnRzIHRoZSBtb2RhbCBmcm9tIGNsb3Npbmcgd2hlbiB0aGUgYmFja2Ryb3AgaGFzIGJlZW4gY2xpY2tlZC5cbiAgbGV0IHN0YXRpY01vZGFsID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFByZXZlbnRzIHRoZSBtb2RhbCBmcm9tIGNsb3Npbmcgd2hlbiB0aGUgYmFja2Ryb3AgaGFzIGJlZW4gY2xpY2tlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgeyBzdGF0aWNNb2RhbCBhcyBzdGF0aWMgfTtcblxuICAvKipcbiAgICogQXV0b21hdGljYWxseSBwdXRzIGZvY3VzIG9uIHRoZSBtb2RhbCB3aXRoIGl0IGZpcnN0IG9wZW5zLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgYXV0b0ZvY3VzID0gdHJ1ZTtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1vZGFsIHNob3VsZCBpbmNsdWRlIGEgYm9keSBjb250ZW50LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgYm9keSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBBdXRvLXBvc2l0aW9uaW5nIG9mIHRoZSBtb2RhbCB0byBlbnN1cmUgaXRzIGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IGNlbnRlcmVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnRhaW5lciBlbGVtZW50IHRoYXQgdGhlIG1vZGFsIHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICogQHR5cGUge0hUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGV4cG9ydCBsZXQgY29udGFpbmVyID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm8gdGhlIG1vZGFsIGlzIHJlbmRlcmVkIGluIGZ1bGxzY3JlZW4gbW9kZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IGZ1bGxzY3JlZW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBtb2RhbCBoZWFkZXIgY29udGVudC5cbiAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGV4cG9ydCBsZXQgaGVhZGVyID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNvbnRyb2wgdGhlIG1vZGFsIHN0YXRlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBpc09wZW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQ2NvbnRyb2wgd2hldGhlciB0aGUgbW9kYWwgY2FuIGJlIGNsb3NlZCB1c2luZyB0aGUgRVNDIGtleS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IGtleWJvYXJkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIG1vZGFsIGJhY2tkcm9wLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgYmFja2Ryb3AgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlIG1vZGFsIGJvZHkvY29udGVudC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGV4cG9ydCBsZXQgY29udGVudENsYXNzTmFtZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBDb250cm9sIHRoZSBmYWRlIGVmZmVjdCB3aGVuIG9wZW5pbmcgb3IgY2xvc2luZyB0aGUgbW9kYWwuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBmYWRlID0gdHJ1ZTtcblxuICAvKipcbiAgICogYGxhYmVsbGVkQnlgIGZvciBhY2Nlc3NpYmlsaXR5LCBhc3NvY2lhdGluZyB0aGUgbW9kYWwgd2l0aCBhIGhlYWRlciBlbGVtZW50LlxuICAgKiBAdHlwZSB7c3RyaW5nIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZXhwb3J0IGxldCBsYWJlbGxlZEJ5ID0gaGVhZGVyID8gYG1vZGFsLSR7dXVpZCgpfWAgOiB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgY2xhc3NlcyB0byBiZSBhZGRlZCB0byB0aGUgbW9kYWwgY29udGVudC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGV4cG9ydCBsZXQgbW9kYWxDbGFzc05hbWUgPSAnJztcblxuICAvKipcbiAgICogQ3VzdG9tIHN0eWxpbmcgdG8gYXBwbHkgdG8gdGhlIG1vZGFsLlxuICAgKiBAdHlwZSB7c3RyaW5nIHwgbnVsbH1cbiAgICovXG4gIGV4cG9ydCBsZXQgbW9kYWxTdHlsZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFNob3VsZCBmb2N1cyBzaG91bGQgYmUgcmV0dXJuZWQgdG8gdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBhZnRlciBtb2RhbCBjbG9zZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IHJldHVybkZvY3VzQWZ0ZXJDbG9zZSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIG1vZGFsIGNvbnRlbnQgc2hvdWxkIGJlIHNjcm9sbGFibGUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBzY3JvbGxhYmxlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgdGhlIHNpemUgb2YgdGhlIG1vZGFsIChlLmcuLCAnc20nLCAnbGcnKS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGV4cG9ydCBsZXQgc2l6ZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhlbWUgbmFtZSBvdmVycmlkZSB0byBhcHBseSB0byB0aGlzIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XG4gICAqL1xuICBleHBvcnQgbGV0IHRoZW1lID0gbnVsbDtcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gdG9nZ2xlIHRoZSBtb2RhbCBzdGF0ZS5cbiAgICogQHR5cGUge0Z1bmN0aW9uIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZXhwb3J0IGxldCB0b2dnbGUgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbW9kYWwgc2hvdWxkIGJlIHVubW91bnRlZCB3aGVuIGNsb3NlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IHVubW91bnRPbkNsb3NlID0gdHJ1ZTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBjbGFzc2VzIHRvIGJlIGFkZGVkIHRvIHRoZSBtb2RhbCB3cmFwcGVyLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZXhwb3J0IGxldCB3cmFwQ2xhc3NOYW1lID0gJyc7XG5cbiAgbGV0IGhhc09wZW5lZCA9IGZhbHNlO1xuICBsZXQgX2lzTW91bnRlZCA9IGZhbHNlO1xuICBsZXQgX3RyaWdnZXJpbmdFbGVtZW50O1xuICBsZXQgX29yaWdpbmFsQm9keVBhZGRpbmc7XG4gIGxldCBfbGFzdElzT3BlbiA9IGlzT3BlbjtcbiAgbGV0IF9sYXN0SGFzT3BlbmVkID0gaGFzT3BlbmVkO1xuICBsZXQgX2RpYWxvZztcbiAgbGV0IF9tb3VzZURvd25FbGVtZW50O1xuICBsZXQgX3JlbW92ZUVzY0xpc3RlbmVyO1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIGhhc09wZW5lZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGhhc09wZW5lZCAmJiBhdXRvRm9jdXMpIHtcbiAgICAgIHNldEZvY3VzKCk7XG4gICAgfVxuICB9KTtcblxuICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgICBpZiAoaGFzT3BlbmVkKSB7XG4gICAgICBjbG9zZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgYWZ0ZXJVcGRhdGUoKCkgPT4ge1xuICAgIGlmIChpc09wZW4gJiYgIV9sYXN0SXNPcGVuKSB7XG4gICAgICBpbml0KCk7XG4gICAgICBoYXNPcGVuZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhdXRvRm9jdXMgJiYgaGFzT3BlbmVkICYmICFfbGFzdEhhc09wZW5lZCkge1xuICAgICAgc2V0Rm9jdXMoKTtcbiAgICB9XG5cbiAgICBfbGFzdElzT3BlbiA9IGlzT3BlbjtcbiAgICBfbGFzdEhhc09wZW5lZCA9IGhhc09wZW5lZDtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0Rm9jdXMoKSB7XG4gICAgaWYgKF9kaWFsb2cgJiYgX2RpYWxvZy5wYXJlbnROb2RlICYmIHR5cGVvZiBfZGlhbG9nLnBhcmVudE5vZGUuZm9jdXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIF9kaWFsb2cucGFyZW50Tm9kZS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIF90cmlnZ2VyaW5nRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfdHJpZ2dlcmluZ0VsZW1lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghc3RhdGljTW9kYWwpIHtcbiAgICAgIF9vcmlnaW5hbEJvZHlQYWRkaW5nID0gZ2V0T3JpZ2luYWxCb2R5UGFkZGluZygpO1xuICAgICAgY29uZGl0aW9uYWxseVVwZGF0ZVNjcm9sbGJhcigpO1xuICAgICAgaWYgKG9wZW5Db3VudCA9PT0gMCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoZG9jdW1lbnQuYm9keS5jbGFzc05hbWUsICdtb2RhbC1vcGVuJyk7XG4gICAgICB9XG5cbiAgICAgICsrb3BlbkNvdW50O1xuICAgIH1cbiAgICBfaXNNb3VudGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hbmFnZUZvY3VzQWZ0ZXJDbG9zZSgpIHtcbiAgICBpZiAoX3RyaWdnZXJpbmdFbGVtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIF90cmlnZ2VyaW5nRWxlbWVudC5mb2N1cyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXR1cm5Gb2N1c0FmdGVyQ2xvc2UpIHtcbiAgICAgICAgX3RyaWdnZXJpbmdFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIF90cmlnZ2VyaW5nRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBtYW5hZ2VGb2N1c0FmdGVyQ2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmIChvcGVuQ291bnQgPD0gMSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC1vcGVuJyk7XG4gICAgfVxuXG4gICAgbWFuYWdlRm9jdXNBZnRlckNsb3NlKCk7XG4gICAgb3BlbkNvdW50ID0gTWF0aC5tYXgoMCwgb3BlbkNvdW50IC0gMSk7XG5cbiAgICBzZXRTY3JvbGxiYXJXaWR0aChfb3JpZ2luYWxCb2R5UGFkZGluZyk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVCYWNrZHJvcENsaWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IF9tb3VzZURvd25FbGVtZW50KSB7XG4gICAgICBpZiAoIWlzT3BlbiB8fCAhYmFja2Ryb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiYWNrZHJvcEVsZW0gPSBfZGlhbG9nID8gX2RpYWxvZy5wYXJlbnROb2RlIDogbnVsbDtcbiAgICAgIGlmIChiYWNrZHJvcCA9PT0gdHJ1ZSAmJiBiYWNrZHJvcEVsZW0gJiYgZS50YXJnZXQgPT09IGJhY2tkcm9wRWxlbSAmJiB0b2dnbGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdG9nZ2xlKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW9kYWxPcGVuZWQoKSB7XG4gICAgZGlzcGF0Y2goJ29wZW4nKTtcbiAgICBfcmVtb3ZlRXNjTGlzdGVuZXIgPSBicm93c2VyRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ICYmIGV2ZW50LmtleSA9PT0gJ0VzY2FwZScgJiYga2V5Ym9hcmQpIHtcbiAgICAgICAgaWYgKHRvZ2dsZSAmJiBiYWNrZHJvcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmIChfcmVtb3ZlRXNjTGlzdGVuZXIpIF9yZW1vdmVFc2NMaXN0ZW5lcigpO1xuICAgICAgICAgIHRvZ2dsZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW9kYWxDbG9zaW5nKCkge1xuICAgIGRpc3BhdGNoKCdjbG9zaW5nJyk7XG4gICAgaWYgKF9yZW1vdmVFc2NMaXN0ZW5lcikge1xuICAgICAgX3JlbW92ZUVzY0xpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb2RhbENsb3NlZCgpIHtcbiAgICBkaXNwYXRjaCgnY2xvc2UnKTtcbiAgICBpZiAodW5tb3VudE9uQ2xvc2UpIHtcbiAgICAgIGRlc3Ryb3koKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbiAgICBpZiAoX2lzTW91bnRlZCkge1xuICAgICAgaGFzT3BlbmVkID0gZmFsc2U7XG4gICAgfVxuICAgIF9pc01vdW50ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUJhY2tkcm9wTW91c2VEb3duKGUpIHtcbiAgICBfbW91c2VEb3duRWxlbWVudCA9IGUudGFyZ2V0O1xuICB9XG5cbiAgY29uc3QgZGlhbG9nQmFzZUNsYXNzID0gJ21vZGFsLWRpYWxvZyc7XG5cbiAgJDogY2xhc3NlcyA9IGNsYXNzbmFtZXMoZGlhbG9nQmFzZUNsYXNzLCBjbGFzc05hbWUsIHtcbiAgICBbYG1vZGFsLSR7c2l6ZX1gXTogc2l6ZSxcbiAgICAnbW9kYWwtZnVsbHNjcmVlbic6IGZ1bGxzY3JlZW4gPT09IHRydWUsXG4gICAgW2Btb2RhbC1mdWxsc2NyZWVuLSR7ZnVsbHNjcmVlbn0tZG93bmBdOiBmdWxsc2NyZWVuICYmIHR5cGVvZiBmdWxsc2NyZWVuID09PSAnc3RyaW5nJyxcbiAgICBbYCR7ZGlhbG9nQmFzZUNsYXNzfS1jZW50ZXJlZGBdOiBjZW50ZXJlZCxcbiAgICBbYCR7ZGlhbG9nQmFzZUNsYXNzfS1zY3JvbGxhYmxlYF06IHNjcm9sbGFibGVcbiAgfSk7XG5cbiAgJDogb3V0ZXIgPSBjb250YWluZXIgPT09ICdpbmxpbmUnIHx8IHN0YXRpY01vZGFsID8gSW5saW5lQ29udGFpbmVyIDogUG9ydGFsO1xuPC9zY3JpcHQ+XG5cbnsjaWYgX2lzTW91bnRlZH1cbiAgPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17b3V0ZXJ9PlxuICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LWNsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgPGRpdiBjbGFzcz17d3JhcENsYXNzTmFtZX0gdGFiaW5kZXg9XCItMVwiIHsuLi4kJHJlc3RQcm9wc30gZGF0YS1icy10aGVtZT17dGhlbWV9PlxuICAgICAgeyNpZiBpc09wZW59XG4gICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LW5vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zIC0tPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgaW46bW9kYWxJbnxnbG9iYWxcbiAgICAgICAgICBvdXQ6bW9kYWxPdXR8Z2xvYmFsXG4gICAgICAgICAgc3R5bGU9e21vZGFsU3R5bGV9XG4gICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PXtsYWJlbGxlZEJ5fVxuICAgICAgICAgIGNsYXNzPXtjbGFzc25hbWVzKCdtb2RhbCcsIG1vZGFsQ2xhc3NOYW1lLCB7XG4gICAgICAgICAgICBmYWRlLFxuICAgICAgICAgICAgJ3Bvc2l0aW9uLXN0YXRpYyc6IHN0YXRpY01vZGFsXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgICAgb246aW50cm9zdGFydD17KCkgPT4gZGlzcGF0Y2goJ29wZW5pbmcnKX1cbiAgICAgICAgICBvbjppbnRyb2VuZD17b25Nb2RhbE9wZW5lZH1cbiAgICAgICAgICBvbjpvdXRyb3N0YXJ0PXtvbk1vZGFsQ2xvc2luZ31cbiAgICAgICAgICBvbjpvdXRyb2VuZD17b25Nb2RhbENsb3NlZH1cbiAgICAgICAgICBvbjpjbGljaz17aGFuZGxlQmFja2Ryb3BDbGlja31cbiAgICAgICAgICBvbjptb3VzZWRvd249e2hhbmRsZUJhY2tkcm9wTW91c2VEb3dufVxuICAgICAgICA+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImV4dGVybmFsXCIgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPXtjbGFzc2VzfSByb2xlPVwiZG9jdW1lbnRcIiBiaW5kOnRoaXM9e19kaWFsb2d9PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz17Y2xhc3NuYW1lcygnbW9kYWwtY29udGVudCcsIGNvbnRlbnRDbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgeyNpZiBoZWFkZXJ9XG4gICAgICAgICAgICAgICAgPE1vZGFsSGVhZGVyIHt0b2dnbGV9IGlkPXtsYWJlbGxlZEJ5fT5cbiAgICAgICAgICAgICAgICAgIHtoZWFkZXJ9XG4gICAgICAgICAgICAgICAgPC9Nb2RhbEhlYWRlcj5cbiAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgeyNpZiBib2R5fVxuICAgICAgICAgICAgICAgIDxNb2RhbEJvZHk+XG4gICAgICAgICAgICAgICAgICA8c2xvdCAvPlxuICAgICAgICAgICAgICAgIDwvTW9kYWxCb2R5PlxuICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPHNsb3QgLz5cbiAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gIDwvc3ZlbHRlOmNvbXBvbmVudD5cbnsvaWZ9XG5cbnsjaWYgYmFja2Ryb3AgJiYgIXN0YXRpY01vZGFsfVxuICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtvdXRlcn0+XG4gICAgPE1vZGFsQmFja2Ryb3Age2ZhZGV9IHtpc09wZW59IC8+XG4gIDwvc3ZlbHRlOmNvbXBvbmVudD5cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgOmdsb2JhbCgubW9kYWwtb3Blbikge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgfVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwiaWdub3JlTGlzdCI6W119 */"
};
function Modal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "static",
    "autoFocus",
    "body",
    "centered",
    "container",
    "fullscreen",
    "header",
    "isOpen",
    "keyboard",
    "backdrop",
    "contentClassName",
    "fade",
    "labelledBy",
    "modalClassName",
    "modalStyle",
    "returnFocusAfterClose",
    "scrollable",
    "size",
    "theme",
    "toggle",
    "unmountOnClose",
    "wrapClassName"
  ]);
  push($$props, false, Modal);
  append_styles($$anchor, $$css);
  const classes = mutable_source();
  const outer = mutable_source();
  const dispatch = createEventDispatcher();
  let className = prop($$props, "class", 8, "");
  let staticModal = prop($$props, "static", 8, false);
  let autoFocus = prop($$props, "autoFocus", 8, true);
  let body = prop($$props, "body", 8, false);
  let centered = prop($$props, "centered", 8, false);
  let container = prop($$props, "container", 8, void 0);
  let fullscreen = prop($$props, "fullscreen", 8, false);
  let header = prop($$props, "header", 8, void 0);
  let isOpen = prop($$props, "isOpen", 8, false);
  let keyboard = prop($$props, "keyboard", 8, true);
  let backdrop = prop($$props, "backdrop", 8, true);
  let contentClassName = prop($$props, "contentClassName", 8, "");
  let fade2 = prop($$props, "fade", 8, true);
  let labelledBy = prop($$props, "labelledBy", 24, () => header() ? `modal-${uuid()}` : void 0);
  let modalClassName = prop($$props, "modalClassName", 8, "");
  let modalStyle = prop($$props, "modalStyle", 8, null);
  let returnFocusAfterClose = prop($$props, "returnFocusAfterClose", 8, true);
  let scrollable = prop($$props, "scrollable", 8, false);
  let size = prop($$props, "size", 8, "");
  let theme = prop($$props, "theme", 8, null);
  let toggle = prop($$props, "toggle", 8, void 0);
  let unmountOnClose = prop($$props, "unmountOnClose", 8, true);
  let wrapClassName = prop($$props, "wrapClassName", 8, "");
  let hasOpened = false;
  let _isMounted = mutable_source(false);
  let _triggeringElement;
  let _originalBodyPadding;
  let _lastIsOpen = isOpen();
  let _lastHasOpened = hasOpened;
  let _dialog = mutable_source();
  let _mouseDownElement;
  let _removeEscListener;
  onMount(() => {
    if (isOpen()) {
      init2();
      hasOpened = true;
    }
    if (hasOpened && autoFocus()) {
      setFocus();
    }
  });
  onDestroy(() => {
    destroy();
    if (hasOpened) {
      close();
    }
  });
  afterUpdate(() => {
    if (isOpen() && !_lastIsOpen) {
      init2();
      hasOpened = true;
    }
    if (autoFocus() && hasOpened && !_lastHasOpened) {
      setFocus();
    }
    _lastIsOpen = isOpen();
    _lastHasOpened = hasOpened;
  });
  function setFocus() {
    if (get(_dialog) && get(_dialog).parentNode && strict_equals(typeof get(_dialog).parentNode.focus, "function")) {
      get(_dialog).parentNode.focus();
    }
  }
  function init2() {
    try {
      _triggeringElement = document.activeElement;
    } catch (err) {
      _triggeringElement = null;
    }
    if (!staticModal()) {
      _originalBodyPadding = getOriginalBodyPadding();
      conditionallyUpdateScrollbar();
      if (strict_equals(openCount, 0)) {
        document.body.className = classnames(document.body.className, "modal-open");
      }
      ++openCount;
    }
    set(_isMounted, true);
  }
  function manageFocusAfterClose() {
    if (_triggeringElement) {
      if (strict_equals(typeof _triggeringElement.focus, "function") && returnFocusAfterClose()) {
        _triggeringElement.focus();
      }
      _triggeringElement = null;
    }
  }
  function destroy() {
    manageFocusAfterClose();
  }
  function close() {
    if (openCount <= 1) {
      document.body.classList.remove("modal-open");
    }
    manageFocusAfterClose();
    openCount = Math.max(0, openCount - 1);
    setScrollbarWidth(_originalBodyPadding);
  }
  function handleBackdropClick(e) {
    if (strict_equals(e.target, _mouseDownElement)) {
      if (!isOpen() || !backdrop()) {
        return;
      }
      const backdropElem = get(_dialog) ? get(_dialog).parentNode : null;
      if (strict_equals(backdrop(), true) && backdropElem && strict_equals(e.target, backdropElem) && toggle()) {
        e.stopPropagation();
        toggle()(e);
      }
    }
  }
  function onModalOpened() {
    dispatch("open");
    _removeEscListener = browserEvent(document, "keydown", (event2) => {
      if (event2.key && strict_equals(event2.key, "Escape") && keyboard()) {
        if (toggle() && strict_equals(backdrop(), true)) {
          if (_removeEscListener) _removeEscListener();
          toggle()(event2);
        }
      }
    });
  }
  function onModalClosing() {
    dispatch("closing");
    if (_removeEscListener) {
      _removeEscListener();
    }
  }
  function onModalClosed() {
    dispatch("close");
    if (unmountOnClose()) {
      destroy();
    }
    close();
    if (get(_isMounted)) {
      hasOpened = false;
    }
    set(_isMounted, false);
  }
  function handleBackdropMouseDown(e) {
    _mouseDownElement = e.target;
  }
  const dialogBaseClass = "modal-dialog";
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(size()), deep_read_state(fullscreen()), deep_read_state(centered()), deep_read_state(scrollable())),
    () => {
      set(classes, classnames(dialogBaseClass, className(), {
        [`modal-${size()}`]: size(),
        "modal-fullscreen": strict_equals(fullscreen(), true),
        [`modal-fullscreen-${fullscreen()}-down`]: fullscreen() && strict_equals(typeof fullscreen(), "string"),
        [`${dialogBaseClass}-centered`]: centered(),
        [`${dialogBaseClass}-scrollable`]: scrollable()
      }));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(container()), deep_read_state(staticModal()), InlineContainer_default, Portal_default),
    () => {
      set(outer, strict_equals(container(), "inline") || staticModal() ? InlineContainer_default : Portal_default);
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root45();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => component(node_1, () => get(outer), ($$anchor3, $$component) => {
          $$component($$anchor3, {
            children: wrap_snippet(Modal, ($$anchor4, $$slotProps) => {
              var div = root_210();
              attribute_effect(div, () => ({
                class: wrapClassName(),
                tabindex: "-1",
                ...$$restProps,
                "data-bs-theme": theme()
              }));
              var node_2 = child(div);
              {
                var consequent_2 = ($$anchor5) => {
                  var div_1 = root_37();
                  var node_3 = child(div_1);
                  slot(node_3, $$props, "external", {}, null);
                  var div_2 = sibling(node_3, 2);
                  var div_3 = child(div_2);
                  var node_4 = child(div_3);
                  {
                    var consequent = ($$anchor6) => {
                      var fragment_2 = comment();
                      var node_5 = first_child(fragment_2);
                      add_svelte_meta(
                        () => ModalHeader_default(node_5, {
                          get toggle() {
                            return toggle();
                          },
                          get id() {
                            return labelledBy();
                          },
                          children: wrap_snippet(Modal, ($$anchor7, $$slotProps2) => {
                            next();
                            var text2 = text();
                            template_effect(() => set_text(text2, header()));
                            append($$anchor7, text2);
                          }),
                          $$slots: { default: true }
                        }),
                        "component",
                        Modal,
                        350,
                        16,
                        { componentTag: "ModalHeader" }
                      );
                      append($$anchor6, fragment_2);
                    };
                    add_svelte_meta(
                      () => if_block(node_4, ($$render) => {
                        if (header()) $$render(consequent);
                      }),
                      "if",
                      Modal,
                      349,
                      14
                    );
                  }
                  var node_6 = sibling(node_4, 2);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var fragment_4 = comment();
                      var node_7 = first_child(fragment_4);
                      add_svelte_meta(
                        () => ModalBody_default(node_7, {
                          children: wrap_snippet(Modal, ($$anchor7, $$slotProps2) => {
                            var fragment_5 = comment();
                            var node_8 = first_child(fragment_5);
                            slot(node_8, $$props, "default", {}, null);
                            append($$anchor7, fragment_5);
                          }),
                          $$slots: { default: true }
                        }),
                        "component",
                        Modal,
                        355,
                        16,
                        { componentTag: "ModalBody" }
                      );
                      append($$anchor6, fragment_4);
                    };
                    var alternate = ($$anchor6) => {
                      var fragment_6 = comment();
                      var node_9 = first_child(fragment_6);
                      slot(node_9, $$props, "default", {}, null);
                      append($$anchor6, fragment_6);
                    };
                    add_svelte_meta(
                      () => if_block(node_6, ($$render) => {
                        if (body()) $$render(consequent_1);
                        else $$render(alternate, false);
                      }),
                      "if",
                      Modal,
                      354,
                      14
                    );
                  }
                  reset(div_3);
                  reset(div_2);
                  bind_this(div_2, ($$value) => set(_dialog, $$value), () => get(_dialog));
                  reset(div_1);
                  template_effect(
                    ($0, $1) => {
                      set_style(div_1, modalStyle());
                      set_attribute(div_1, "aria-labelledby", labelledBy());
                      set_class(div_1, 1, $0);
                      set_class(div_2, 1, clsx(get(classes)));
                      set_class(div_3, 1, $1);
                    },
                    [
                      () => clsx((deep_read_state(classnames), deep_read_state(modalClassName()), deep_read_state(fade2()), deep_read_state(staticModal()), untrack(() => classnames("modal", modalClassName(), { fade: fade2(), "position-static": staticModal() })))),
                      () => clsx((deep_read_state(classnames), deep_read_state(contentClassName()), untrack(() => classnames("modal-content", contentClassName()))))
                    ]
                  );
                  transition(5, div_1, () => modalIn);
                  transition(6, div_1, () => modalOut);
                  event("introstart", div_1, () => dispatch("opening"));
                  event("introend", div_1, onModalOpened);
                  event("outrostart", div_1, onModalClosing);
                  event("outroend", div_1, onModalClosed);
                  event("click", div_1, handleBackdropClick);
                  event("mousedown", div_1, handleBackdropMouseDown);
                  append($$anchor5, div_1);
                };
                add_svelte_meta(
                  () => if_block(node_2, ($$render) => {
                    if (isOpen()) $$render(consequent_2);
                  }),
                  "if",
                  Modal,
                  327,
                  6
                );
              }
              reset(div);
              append($$anchor4, div);
            }),
            $$slots: { default: true }
          });
        }),
        "component",
        Modal,
        324,
        2,
        { componentTag: "svelte:component" }
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(_isMounted)) $$render(consequent_3);
      }),
      "if",
      Modal,
      323,
      0
    );
  }
  var node_10 = sibling(node, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_7 = comment();
      var node_11 = first_child(fragment_7);
      add_svelte_meta(
        () => component(node_11, () => get(outer), ($$anchor3, $$component) => {
          $$component($$anchor3, {
            children: wrap_snippet(Modal, ($$anchor4, $$slotProps) => {
              var fragment_8 = comment();
              var node_12 = first_child(fragment_8);
              add_svelte_meta(
                () => ModalBackdrop_default(node_12, {
                  get fade() {
                    return fade2();
                  },
                  get isOpen() {
                    return isOpen();
                  }
                }),
                "component",
                Modal,
                371,
                4,
                { componentTag: "ModalBackdrop" }
              );
              append($$anchor4, fragment_8);
            }),
            $$slots: { default: true }
          });
        }),
        "component",
        Modal,
        370,
        2,
        { componentTag: "svelte:component" }
      );
      append($$anchor2, fragment_7);
    };
    add_svelte_meta(
      () => if_block(node_10, ($$render) => {
        if (backdrop() && !staticModal()) $$render(consequent_4);
      }),
      "if",
      Modal,
      369,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Modal = hmr(Modal, () => Modal[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-CZnj0CZDIM0e");
    module.default[HMR].source = Modal[HMR].source;
    set(Modal[HMR].source, module.default[HMR].original);
  });
}
var Modal_default = Modal;

// node_modules/@sveltestrap/sveltestrap/dist/ModalFooter/ModalFooter.svelte
ModalFooter[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ModalFooter/ModalFooter.svelte";
var root46 = add_locations(from_html(`<div><!></div>`), ModalFooter[FILENAME], [[14, 0]]);
function ModalFooter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, ModalFooter);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "modal-footer"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root46();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ModalFooter = hmr(ModalFooter, () => ModalFooter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ModalFooter[HMR].source;
    set(ModalFooter[HMR].source, module.default[HMR].original);
  });
}
var ModalFooter_default = ModalFooter;

// node_modules/@sveltestrap/sveltestrap/dist/Nav/Nav.svelte
Nav[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Nav/Nav.svelte";
var root47 = add_locations(from_html(`<ul><!></ul>`), Nav[FILENAME], [[109, 0]]);
function Nav($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "tabs",
    "pills",
    "vertical",
    "horizontal",
    "justified",
    "fill",
    "navbar",
    "card",
    "theme",
    "underline"
  ]);
  push($$props, false, Nav);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let tabs = prop($$props, "tabs", 8, false);
  let pills = prop($$props, "pills", 8, false);
  let vertical = prop($$props, "vertical", 8, "");
  let horizontal = prop($$props, "horizontal", 8, "");
  let justified = prop($$props, "justified", 8, false);
  let fill = prop($$props, "fill", 8, false);
  let navbar = prop($$props, "navbar", 8, false);
  let card = prop($$props, "card", 8, false);
  let theme = prop($$props, "theme", 8, null);
  let underline = prop($$props, "underline", 8, false);
  function getVerticalClass(vertical2) {
    if (!vertical2) {
      return false;
    }
    if (strict_equals(vertical2, true) || strict_equals(vertical2, "xs")) {
      return "flex-column";
    }
    return `flex-${vertical2}-column`;
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(navbar()), deep_read_state(horizontal()), deep_read_state(vertical()), deep_read_state(tabs()), deep_read_state(card()), deep_read_state(pills()), deep_read_state(justified()), deep_read_state(fill()), deep_read_state(underline())),
    () => {
      set(classes, classnames(className(), navbar() ? "navbar-nav" : "nav", horizontal() ? `justify-content-${horizontal()}` : false, getVerticalClass(vertical()), {
        "nav-tabs": tabs(),
        "card-header-tabs": card() && tabs(),
        "nav-pills": pills(),
        "card-header-pills": card() && pills(),
        "nav-justified": justified(),
        "nav-fill": fill(),
        "nav-underline": underline()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var ul = root47();
  attribute_effect(ul, () => ({
    ...$$restProps,
    class: get(classes),
    "data-bs-theme": theme()
  }));
  var node = child(ul);
  slot(node, $$props, "default", {}, null);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  Nav = hmr(Nav, () => Nav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nav[HMR].source;
    set(Nav[HMR].source, module.default[HMR].original);
  });
}
var Nav_default = Nav;

// node_modules/@sveltestrap/sveltestrap/dist/Navbar/Navbar.svelte
Navbar[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Navbar/Navbar.svelte";
var root48 = add_locations(from_html(`<nav><!></nav>`), Navbar[FILENAME], [[100, 0]]);
function Navbar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "container",
    "color",
    "dark",
    "expand",
    "fixed",
    "light",
    "sticky",
    "theme"
  ]);
  push($$props, false, Navbar);
  const classes = mutable_source();
  setContext("navbar", { inNavbar: true });
  let className = prop($$props, "class", 8, "");
  let container = prop($$props, "container", 8, "fluid");
  let color = prop($$props, "color", 8, "");
  let dark = prop($$props, "dark", 8, false);
  let expand = prop($$props, "expand", 8, "");
  let fixed = prop($$props, "fixed", 8, "");
  let light = prop($$props, "light", 8, false);
  let sticky = prop($$props, "sticky", 8, "");
  let theme = prop($$props, "theme", 12, null);
  let containerProps = {
    sm: strict_equals(container(), "sm"),
    md: strict_equals(container(), "md"),
    lg: strict_equals(container(), "lg"),
    xl: strict_equals(container(), "xl"),
    xxl: strict_equals(container(), "xxl"),
    fluid: strict_equals(container(), "fluid")
  };
  function getExpandClass(expand2) {
    if (strict_equals(expand2, false)) {
      return false;
    }
    if (strict_equals(expand2, true) || strict_equals(expand2, "xs")) {
      return "navbar-expand";
    }
    return `navbar-expand-${expand2}`;
  }
  legacy_pre_effect(
    () => (deep_read_state(theme()), deep_read_state(dark()), deep_read_state(light())),
    () => {
      theme(dark() ? "dark" : light() ? "light" : theme());
    }
  );
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(expand()), deep_read_state(color()), deep_read_state(fixed()), deep_read_state(sticky())),
    () => {
      set(classes, classnames(className(), "navbar", getExpandClass(expand()), {
        [`bg-${color()}`]: color(),
        [`fixed-${fixed()}`]: fixed(),
        [`sticky-${sticky()}`]: sticky()
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var nav = root48();
  attribute_effect(nav, () => ({
    ...$$restProps,
    class: get(classes),
    "data-bs-theme": theme()
  }));
  var node = child(nav);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => Container_default(node_1, spread_props(() => containerProps, {
          children: wrap_snippet(Navbar, ($$anchor3, $$slotProps) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            slot(node_2, $$props, "default", {}, null);
            append($$anchor3, fragment_1);
          }),
          $$slots: { default: true }
        })),
        "component",
        Navbar,
        102,
        4,
        { componentTag: "Container" }
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      slot(node_3, $$props, "default", {}, null);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (container()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Navbar,
      101,
      2
    );
  }
  reset(nav);
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Navbar = hmr(Navbar, () => Navbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navbar[HMR].source;
    set(Navbar[HMR].source, module.default[HMR].original);
  });
}
var Navbar_default = Navbar;

// node_modules/@sveltestrap/sveltestrap/dist/NavItem/NavItem.svelte
NavItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/NavItem/NavItem.svelte";
var root49 = add_locations(from_html(`<li><!></li>`), NavItem[FILENAME], [[20, 0]]);
function NavItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "active"]);
  push($$props, false, NavItem);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(active())),
    () => {
      set(classes, classnames(className(), "nav-item", active() ? "active" : false));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root49();
  attribute_effect(li, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(li);
  slot(node, $$props, "default", {}, null);
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  NavItem = hmr(NavItem, () => NavItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavItem[HMR].source;
    set(NavItem[HMR].source, module.default[HMR].original);
  });
}
var NavItem_default = NavItem;

// node_modules/@sveltestrap/sveltestrap/dist/NavLink/NavLink.svelte
NavLink[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/NavLink/NavLink.svelte";
var root50 = add_locations(from_html(`<a><!></a>`), NavLink[FILENAME], [[47, 0]]);
function NavLink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "disabled", "active", "href"]);
  push($$props, false, NavLink);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let disabled = prop($$props, "disabled", 8, false);
  let active = prop($$props, "active", 8, false);
  let href = prop($$props, "href", 8, "#");
  function handleClick(e) {
    if (disabled()) {
      e.preventDefault();
      e.stopImmediatePropagation();
      return;
    }
    if (strict_equals(href(), "#")) {
      e.preventDefault();
    }
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(disabled()), deep_read_state(active())),
    () => {
      set(classes, classnames(className(), "nav-link", { disabled: disabled(), active: active() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var a = root50();
  attribute_effect(a, () => ({ ...$$restProps, href: href(), class: get(classes) }));
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", a, handleClick);
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  NavLink = hmr(NavLink, () => NavLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavLink[HMR].source;
    set(NavLink[HMR].source, module.default[HMR].original);
  });
}
var NavLink_default = NavLink;

// node_modules/@sveltestrap/sveltestrap/dist/NavbarBrand/NavbarBrand.svelte
NavbarBrand[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/NavbarBrand/NavbarBrand.svelte";
var root51 = add_locations(from_html(`<a><!></a>`), NavbarBrand[FILENAME], [[20, 0]]);
function NavbarBrand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "href"]);
  push($$props, false, NavbarBrand);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let href = prop($$props, "href", 8, "/");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "navbar-brand"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var a = root51();
  attribute_effect(a, () => ({ ...$$restProps, class: get(classes), href: href() }));
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  NavbarBrand = hmr(NavbarBrand, () => NavbarBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavbarBrand[HMR].source;
    set(NavbarBrand[HMR].source, module.default[HMR].original);
  });
}
var NavbarBrand_default = NavbarBrand;

// node_modules/@sveltestrap/sveltestrap/dist/NavbarToggler/NavbarToggler.svelte
NavbarToggler[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/NavbarToggler/NavbarToggler.svelte";
var root_120 = add_locations(from_html(`<span class="navbar-toggler-icon"></span>`), NavbarToggler[FILENAME], [[16, 4]]);
var root52 = add_locations(from_html(`<button><!></button>`), NavbarToggler[FILENAME], [[14, 0]]);
function NavbarToggler($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, NavbarToggler);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "navbar-toggler"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var button = root52();
  attribute_effect(button, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(button);
  slot(node, $$props, "default", {}, ($$anchor2) => {
    var span = root_120();
    append($$anchor2, span);
  });
  reset(button);
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, button);
  return pop($$exports);
}
if (import.meta.hot) {
  NavbarToggler = hmr(NavbarToggler, () => NavbarToggler[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavbarToggler[HMR].source;
    set(NavbarToggler[HMR].source, module.default[HMR].original);
  });
}
var NavbarToggler_default = NavbarToggler;

// node_modules/@sveltestrap/sveltestrap/dist/OffcanvasBackdrop/OffcanvasBackdrop.svelte
OffcanvasBackdrop[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/OffcanvasBackdrop/OffcanvasBackdrop.svelte";
var root_121 = add_locations(from_html(`<div></div>`), OffcanvasBackdrop[FILENAME], [[13, 2]]);
function OffcanvasBackdrop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "isOpen", "fade"]);
  push($$props, false, OffcanvasBackdrop);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let isOpen = prop($$props, "isOpen", 8, false);
  let fade2 = prop($$props, "fade", 8, true);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "offcanvas-backdrop"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_121();
      attribute_effect(
        div,
        ($0) => ({
          role: "presentation",
          ...$$restProps,
          class: get(classes),
          [CLASS]: $0
        }),
        [() => ({ fade: fade2() })]
      );
      event("click", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      transition(1, div, () => backdropIn);
      transition(2, div, () => backdropOut);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent);
      }),
      "if",
      OffcanvasBackdrop,
      12,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  OffcanvasBackdrop = hmr(OffcanvasBackdrop, () => OffcanvasBackdrop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OffcanvasBackdrop[HMR].source;
    set(OffcanvasBackdrop[HMR].source, module.default[HMR].original);
  });
}
var OffcanvasBackdrop_default = OffcanvasBackdrop;

// node_modules/@sveltestrap/sveltestrap/dist/OffcanvasBody/OffcanvasBody.svelte
OffcanvasBody[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/OffcanvasBody/OffcanvasBody.svelte";
var root53 = add_locations(from_html(`<div><!></div>`), OffcanvasBody[FILENAME], [[10, 0]]);
function OffcanvasBody($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, OffcanvasBody);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "offcanvas-body"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root53();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  OffcanvasBody = hmr(OffcanvasBody, () => OffcanvasBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OffcanvasBody[HMR].source;
    set(OffcanvasBody[HMR].source, module.default[HMR].original);
  });
}
var OffcanvasBody_default = OffcanvasBody;

// node_modules/@sveltestrap/sveltestrap/dist/OffcanvasHeader/OffcanvasHeader.svelte
OffcanvasHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/OffcanvasHeader/OffcanvasHeader.svelte";
var root_49 = add_locations(from_html(`<button class="btn-close" type="button"></button>`), OffcanvasHeader[FILENAME], [[23, 6]]);
var root54 = add_locations(from_html(`<div><h5 class="offcanvas-title"><!></h5> <!></div>`), OffcanvasHeader[FILENAME], [[13, 0, [[14, 2]]]]);
function OffcanvasHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "content", "closeAriaLabel", "toggle"]);
  push($$props, false, OffcanvasHeader);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let content = prop($$props, "content", 8, void 0);
  let closeAriaLabel = prop($$props, "closeAriaLabel", 8, "Close");
  let toggle = prop($$props, "toggle", 8, void 0);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "offcanvas-header"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root54();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var h5 = child(div);
  var node = child(h5);
  {
    var consequent = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, content()));
      append($$anchor2, text2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (content()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      OffcanvasHeader,
      15,
      4
    );
  }
  reset(h5);
  var node_2 = sibling(h5, 2);
  slot(node_2, $$props, "close", {}, ($$anchor2) => {
    var fragment_2 = comment();
    var node_3 = first_child(fragment_2);
    {
      var consequent_1 = ($$anchor3) => {
        var button = root_49();
        template_effect(() => set_attribute(button, "aria-label", closeAriaLabel()));
        event("click", button, function(...$$args) {
          apply(toggle, this, $$args, OffcanvasHeader, [23, 70]);
        });
        append($$anchor3, button);
      };
      add_svelte_meta(
        () => if_block(node_3, ($$render) => {
          if (strict_equals(typeof toggle(), "function")) $$render(consequent_1);
        }),
        "if",
        OffcanvasHeader,
        22,
        4
      );
    }
    append($$anchor2, fragment_2);
  });
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  OffcanvasHeader = hmr(OffcanvasHeader, () => OffcanvasHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OffcanvasHeader[HMR].source;
    set(OffcanvasHeader[HMR].source, module.default[HMR].original);
  });
}
var OffcanvasHeader_default = OffcanvasHeader;

// node_modules/@sveltestrap/sveltestrap/dist/Offcanvas/Offcanvas.svelte
Offcanvas[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Offcanvas/Offcanvas.svelte";
var root_38 = add_locations(from_html(`<!> <!>`, 1), Offcanvas[FILENAME], []);
var root_123 = add_locations(from_html(`<div><!> <!></div> <!>`, 1), Offcanvas[FILENAME], [[193, 2]]);
var $$css2 = {
  hash: "s-_xRepSbKi5Nf",
  code: "\n  .overflow-noscroll {\n    overflow: hidden;\n    padding-right: 0px;\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2ZmY2FudmFzLnN2ZWx0ZSIsInNvdXJjZXMiOlsiT2ZmY2FudmFzLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGltcG9ydCB7IElubGluZUNvbnRhaW5lciB9IGZyb20gJy4uL0lubGluZUNvbnRhaW5lcic7XG4gIGltcG9ydCB7IE9mZmNhbnZhc0JhY2tkcm9wIH0gZnJvbSAnLi4vT2ZmY2FudmFzQmFja2Ryb3AnO1xuICBpbXBvcnQgeyBPZmZjYW52YXNCb2R5IH0gZnJvbSAnLi4vT2ZmY2FudmFzQm9keSc7XG4gIGltcG9ydCB7IE9mZmNhbnZhc0hlYWRlciB9IGZyb20gJy4uL09mZmNhbnZhc0hlYWRlcic7XG4gIGltcG9ydCB7IFBvcnRhbCB9IGZyb20gJy4uL1BvcnRhbCc7XG5cbiAgaW1wb3J0IHsgY2xhc3NuYW1lcywgYnJvd3NlckV2ZW50LCBnZXRUcmFuc2l0aW9uRHVyYXRpb24gfSBmcm9tICcuLi91dGlscyc7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBDU1MgY2xhc3MgbmFtZXMgdG8gYXBwbHkuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gIGV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBiYWNrZHJvcCBpcyBkaXNwbGF5ZWQgYmVoaW5kIHRoZSBvZmZjYW52YXMuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBiYWNrZHJvcCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIG9mZmNhbnZhcyBib2R5IGlzIGRpc3BsYXllZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IGJvZHkgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGVsZW1lbnQgd2hlcmUgdGhlIG9mZmNhbnZhcyB3aWxsIGJlIHBsYWNlZC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGV4cG9ydCBsZXQgY29udGFpbmVyID0gJ2JvZHknO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIHRvIHVzZSBhIGZhZGUgYW5pbWF0aW9uIHdoZW4gb3BlbmluZy9jbG9zaW5nIHRoZSBvZmZjYW52YXMuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBmYWRlID0gdHJ1ZTtcblxuICAvKipcbiAgICogVGhlIGhlYWRlciBjb250ZW50IG9mIHRoZSBvZmZjYW52YXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBleHBvcnQgbGV0IGhlYWRlciA9ICcnO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgb2ZmY2FudmFzIGlzIGN1cnJlbnRseSBvcGVuLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgaXNPcGVuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIga2V5Ym9hcmQgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZCBmb3IgY2xvc2luZyB0aGUgb2ZmY2FudmFzLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQga2V5Ym9hcmQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgcGxhY2VtZW50IG9mIHRoZSBvZmZjYW52YXMgKCdzdGFydCcsICdlbmQnLCBldGMuKS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGV4cG9ydCBsZXQgcGxhY2VtZW50ID0gJ3N0YXJ0JztcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0byBhbGxvdyBzY3JvbGxpbmcgb2YgdGhlIGJvZHkgd2hlbiB0aGUgb2ZmY2FudmFzIGlzIG9wZW4uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCBzY3JvbGwgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIHNpemUgb2YgdGhlIG9mZmNhbnZhcyBmb3Igc21hbGwgc2NyZWVucy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IHNtID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBvZmZjYW52YXMgZm9yIG1lZGl1bSBzY3JlZW5zLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgbWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIHNpemUgb2YgdGhlIG9mZmNhbnZhcyBmb3IgbGFyZ2Ugc2NyZWVucy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBleHBvcnQgbGV0IGxnID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBvZmZjYW52YXMgZm9yIGV4dHJhLWxhcmdlIHNjcmVlbnMuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZXhwb3J0IGxldCB4bCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgc2l6ZSBvZiB0aGUgb2ZmY2FudmFzIGZvciBleHRyYS1leHRyYS1sYXJnZSBzY3JlZW5zLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGV4cG9ydCBsZXQgeHhsID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgQ1NTIHN0eWxlcyB0byBhcHBseSB0byB0aGUgb2ZmY2FudmFzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZXhwb3J0IGxldCBzdHlsZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhlbWUgbmFtZSBvdmVycmlkZSB0byBhcHBseSB0byB0aGlzIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XG4gICAqL1xuICBleHBvcnQgbGV0IHRoZW1lID0gbnVsbDtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gdG9nZ2xlIHRoZSBzdGF0ZSBvZiB0aGUgb2ZmY2FudmFzLlxuICAgKiBAdHlwZSB7dW5kZWZpbmVkfGZ1bmN0aW9ufVxuICAgKi9cbiAgZXhwb3J0IGxldCB0b2dnbGUgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRPRE86IFN1cHBvcnQgdGhlc2UgbGlrZSBNb2RhbHM6XG4gICAqIC0gYXV0b0ZvY3VzXG4gICAqIC0gdW5tb3VudE9uQ2xvc2VcbiAgICogLSBmb2N1cyB0cmFwXG4gICAqL1xuICBsZXQgYm9keUVsZW1lbnQ7XG4gIGxldCBpc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgbGV0IGVsZW1lbnQ7XG4gIGxldCByZW1vdmVFc2NMaXN0ZW5lcjtcblxuICBvbk1vdW50KCgpID0+IChib2R5RWxlbWVudCA9IGRvY3VtZW50LmJvZHkpKTtcblxuICAkOiBpZiAoYm9keUVsZW1lbnQgJiYgIXNjcm9sbCkge1xuICAgIGJvZHlFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ292ZXJmbG93LW5vc2Nyb2xsJywgaXNPcGVuIHx8IGlzVHJhbnNpdGlvbmluZyk7XG4gIH1cblxuICAkOiBpZiAoZWxlbWVudCkge1xuICAgIGlzT3BlbiA9IGlzT3BlbjtcbiAgICBpc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuXG4gICAgZGlzcGF0Y2goaXNPcGVuID8gJ29wZW5pbmcnIDogJ2Nsb3NpbmcnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICBkaXNwYXRjaChpc09wZW4gPyAnb3BlbicgOiAnY2xvc2UnKTtcbiAgICB9LCBnZXRUcmFuc2l0aW9uRHVyYXRpb24oZWxlbWVudCkpO1xuICB9XG5cbiAgJDogaWYgKGlzT3BlbiAmJiB0b2dnbGUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZW1vdmVFc2NMaXN0ZW5lciA9IGJyb3dzZXJFdmVudChkb2N1bWVudCwgJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5rZXkgJiYgZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiBrZXlib2FyZCkge1xuICAgICAgICB0b2dnbGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gICQ6IGlmICghaXNPcGVuICYmIHJlbW92ZUVzY0xpc3RlbmVyKSB7XG4gICAgcmVtb3ZlRXNjTGlzdGVuZXIoKTtcbiAgfVxuXG4gICQ6IGhhbmRsZU1vdXNlRG93biA9XG4gICAgYmFja2Ryb3AgJiYgdG9nZ2xlICYmIGJvZHlFbGVtZW50ICYmIGlzT3BlblxuICAgICAgPyAoZSkgPT4ge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gYm9keUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgJDogY2xhc3NlcyA9IGNsYXNzbmFtZXMoXG4gICAge1xuICAgICAgb2ZmY2FudmFzOiAhc20gJiYgIW1kICYmICFsZyAmJiAheGwgJiYgIXh4bCxcbiAgICAgICdvZmZjYW52YXMtc20nOiBzbSxcbiAgICAgICdvZmZjYW52YXMtbWQnOiBtZCxcbiAgICAgICdvZmZjYW52YXMtbGcnOiBsZyxcbiAgICAgICdvZmZjYW52YXMteGwnOiB4bCxcbiAgICAgICdvZmZjYW52YXMteHhsJzogeHhsLFxuICAgICAgc2hvdzogaXNPcGVuXG4gICAgfSxcbiAgICBgb2ZmY2FudmFzLSR7cGxhY2VtZW50fWAsXG4gICAgY2xhc3NOYW1lXG4gICk7XG5cbiAgJDogb3V0ZXIgPSBjb250YWluZXIgPT09ICdpbmxpbmUnID8gSW5saW5lQ29udGFpbmVyIDogUG9ydGFsO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6Ym9keSBvbjptb3VzZWRvd249e2hhbmRsZU1vdXNlRG93bn0gLz5cblxuPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17b3V0ZXJ9PlxuICA8ZGl2XG4gICAgey4uLiQkcmVzdFByb3BzfVxuICAgIGJpbmQ6dGhpcz17ZWxlbWVudH1cbiAgICBhcmlhLWhpZGRlbj17IWlzT3BlbiA/IHRydWUgOiB1bmRlZmluZWR9XG4gICAgYXJpYS1tb2RhbD17aXNPcGVuID8gdHJ1ZSA6IHVuZGVmaW5lZH1cbiAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICByb2xlPXtpc09wZW4gPyAnZGlhbG9nJyA6IHVuZGVmaW5lZH1cbiAgICBkYXRhLWJzLXRoZW1lPXt0aGVtZX1cbiAgICBzdHlsZT17YHZpc2liaWxpdHk6ICR7aXNPcGVuIHx8IGlzVHJhbnNpdGlvbmluZyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nfTske3N0eWxlfWB9XG4gICAgdGFiaW5kZXg9XCItMVwiXG4gID5cbiAgICB7I2lmIHRvZ2dsZSB8fCBoZWFkZXIgfHwgJCRzbG90cy5oZWFkZXJ9XG4gICAgICA8T2ZmY2FudmFzSGVhZGVyIHt0b2dnbGV9PlxuICAgICAgICB7I2lmIGhlYWRlcn1cbiAgICAgICAgICB7aGVhZGVyfVxuICAgICAgICB7L2lmfVxuICAgICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyXCIgLz5cbiAgICAgIDwvT2ZmY2FudmFzSGVhZGVyPlxuICAgIHsvaWZ9XG4gICAgeyNpZiBib2R5fVxuICAgICAgPE9mZmNhbnZhc0JvZHk+XG4gICAgICAgIDxzbG90IC8+XG4gICAgICA8L09mZmNhbnZhc0JvZHk+XG4gICAgezplbHNlfVxuICAgICAgPHNsb3QgLz5cbiAgICB7L2lmfVxuICA8L2Rpdj5cbiAgeyNpZiBiYWNrZHJvcH1cbiAgICA8T2ZmY2FudmFzQmFja2Ryb3Agb246Y2xpY2s9e3RvZ2dsZSB8fCB1bmRlZmluZWR9IHtmYWRlfSB7aXNPcGVufSAvPlxuICB7L2lmfVxuPC9zdmVsdGU6Y29tcG9uZW50PlxuXG48c3R5bGU+XG4gIDpnbG9iYWwoLm92ZXJmbG93LW5vc2Nyb2xsKSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwcHg7XG4gIH1cbjwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImlnbm9yZUxpc3QiOltdfQ== */"
};
function Offcanvas($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "backdrop",
    "body",
    "container",
    "fade",
    "header",
    "isOpen",
    "keyboard",
    "placement",
    "scroll",
    "sm",
    "md",
    "lg",
    "xl",
    "xxl",
    "style",
    "theme",
    "toggle"
  ]);
  push($$props, false, Offcanvas);
  append_styles($$anchor, $$css2);
  const handleMouseDown = mutable_source();
  const classes = mutable_source();
  const outer = mutable_source();
  const dispatch = createEventDispatcher();
  let className = prop($$props, "class", 8, "");
  let backdrop = prop($$props, "backdrop", 8, true);
  let body = prop($$props, "body", 8, true);
  let container = prop($$props, "container", 8, "body");
  let fade2 = prop($$props, "fade", 8, true);
  let header = prop($$props, "header", 8, "");
  let isOpen = prop($$props, "isOpen", 12, false);
  let keyboard = prop($$props, "keyboard", 8, true);
  let placement = prop($$props, "placement", 8, "start");
  let scroll = prop($$props, "scroll", 8, false);
  let sm = prop($$props, "sm", 8, false);
  let md = prop($$props, "md", 8, false);
  let lg = prop($$props, "lg", 8, false);
  let xl = prop($$props, "xl", 8, false);
  let xxl = prop($$props, "xxl", 8, false);
  let style = prop($$props, "style", 8, "");
  let theme = prop($$props, "theme", 8, null);
  let toggle = prop($$props, "toggle", 8, void 0);
  let bodyElement = mutable_source();
  let isTransitioning = mutable_source(false);
  let element = mutable_source();
  let removeEscListener = mutable_source();
  onMount(() => set(bodyElement, document.body));
  legacy_pre_effect(
    () => (get(element), deep_read_state(isOpen()), getTransitionDuration),
    () => {
      if (get(element)) {
        isOpen(isOpen());
        set(isTransitioning, true);
        dispatch(isOpen() ? "opening" : "closing");
        setTimeout(
          () => {
            set(isTransitioning, false);
            dispatch(isOpen() ? "open" : "close");
          },
          getTransitionDuration(get(element))
        );
      }
    }
  );
  legacy_pre_effect(
    () => (get(bodyElement), deep_read_state(scroll()), deep_read_state(isOpen()), get(isTransitioning)),
    () => {
      if (get(bodyElement) && !scroll()) {
        get(bodyElement).classList.toggle("overflow-noscroll", isOpen() || get(isTransitioning));
      }
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(isOpen()), deep_read_state(toggle()), browserEvent, deep_read_state(keyboard())),
    () => {
      if (isOpen() && toggle() && strict_equals(typeof window, "undefined", false)) {
        set(removeEscListener, browserEvent(document, "keydown", (event2) => {
          if (event2.key && strict_equals(event2.key, "Escape") && keyboard()) {
            toggle()();
          }
        }));
      }
    }
  );
  legacy_pre_effect(() => (deep_read_state(isOpen()), get(removeEscListener)), () => {
    if (!isOpen() && get(removeEscListener)) {
      get(removeEscListener)();
    }
  });
  legacy_pre_effect(
    () => (deep_read_state(backdrop()), deep_read_state(toggle()), get(bodyElement), deep_read_state(isOpen())),
    () => {
      set(handleMouseDown, backdrop() && toggle() && get(bodyElement) && isOpen() ? (e) => {
        if (strict_equals(e.target, get(bodyElement))) {
          toggle()();
        }
      } : void 0);
    }
  );
  legacy_pre_effect(
    () => (classnames, deep_read_state(sm()), deep_read_state(md()), deep_read_state(lg()), deep_read_state(xl()), deep_read_state(xxl()), deep_read_state(isOpen()), deep_read_state(placement()), deep_read_state(className())),
    () => {
      set(classes, classnames(
        {
          offcanvas: !sm() && !md() && !lg() && !xl() && !xxl(),
          "offcanvas-sm": sm(),
          "offcanvas-md": md(),
          "offcanvas-lg": lg(),
          "offcanvas-xl": xl(),
          "offcanvas-xxl": xxl(),
          show: isOpen()
        },
        `offcanvas-${placement()}`,
        className()
      ));
    }
  );
  legacy_pre_effect(() => (deep_read_state(container()), InlineContainer_default, Portal_default), () => {
    set(outer, strict_equals(container(), "inline") ? InlineContainer_default : Portal_default);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  event("mousedown", $document.body, function(...$$args) {
    apply(() => get(handleMouseDown), this, $$args, Offcanvas, [190, 27]);
  });
  var node = first_child(fragment);
  add_svelte_meta(
    () => component(node, () => get(outer), ($$anchor2, $$component) => {
      $$component($$anchor2, {
        children: wrap_snippet(Offcanvas, ($$anchor3, $$slotProps) => {
          var fragment_1 = root_123();
          var div = first_child(fragment_1);
          attribute_effect(div, () => ({
            ...$$restProps,
            "aria-hidden": !isOpen() ? true : void 0,
            "aria-modal": isOpen() ? true : void 0,
            class: get(classes),
            role: isOpen() ? "dialog" : void 0,
            "data-bs-theme": theme(),
            style: `visibility: ${isOpen() || get(isTransitioning) ? "visible" : "hidden"};${style()}`,
            tabindex: "-1"
          }));
          var node_1 = child(div);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              add_svelte_meta(
                () => OffcanvasHeader_default(node_2, {
                  get toggle() {
                    return toggle();
                  },
                  children: wrap_snippet(Offcanvas, ($$anchor5, $$slotProps2) => {
                    var fragment_3 = root_38();
                    var node_3 = first_child(fragment_3);
                    {
                      var consequent = ($$anchor6) => {
                        var text2 = text();
                        template_effect(() => set_text(text2, header()));
                        append($$anchor6, text2);
                      };
                      add_svelte_meta(
                        () => if_block(node_3, ($$render) => {
                          if (header()) $$render(consequent);
                        }),
                        "if",
                        Offcanvas,
                        206,
                        8
                      );
                    }
                    var node_4 = sibling(node_3, 2);
                    slot(node_4, $$props, "header", {}, null);
                    append($$anchor5, fragment_3);
                  }),
                  $$slots: { default: true }
                }),
                "component",
                Offcanvas,
                205,
                6,
                { componentTag: "OffcanvasHeader" }
              );
              append($$anchor4, fragment_2);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if (deep_read_state(toggle()), deep_read_state(header()), untrack(() => toggle() || header() || $$slots.header)) $$render(consequent_1);
              }),
              "if",
              Offcanvas,
              204,
              4
            );
          }
          var node_5 = sibling(node_1, 2);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_6 = first_child(fragment_5);
              add_svelte_meta(
                () => OffcanvasBody_default(node_6, {
                  children: wrap_snippet(Offcanvas, ($$anchor5, $$slotProps2) => {
                    var fragment_6 = comment();
                    var node_7 = first_child(fragment_6);
                    slot(node_7, $$props, "default", {}, null);
                    append($$anchor5, fragment_6);
                  }),
                  $$slots: { default: true }
                }),
                "component",
                Offcanvas,
                213,
                6,
                { componentTag: "OffcanvasBody" }
              );
              append($$anchor4, fragment_5);
            };
            var alternate = ($$anchor4) => {
              var fragment_7 = comment();
              var node_8 = first_child(fragment_7);
              slot(node_8, $$props, "default", {}, null);
              append($$anchor4, fragment_7);
            };
            add_svelte_meta(
              () => if_block(node_5, ($$render) => {
                if (body()) $$render(consequent_2);
                else $$render(alternate, false);
              }),
              "if",
              Offcanvas,
              212,
              4
            );
          }
          reset(div);
          bind_this(div, ($$value) => set(element, $$value), () => get(element));
          var node_9 = sibling(div, 2);
          {
            var consequent_3 = ($$anchor4) => {
              var fragment_8 = comment();
              var node_10 = first_child(fragment_8);
              add_svelte_meta(
                () => OffcanvasBackdrop_default(node_10, {
                  get fade() {
                    return fade2();
                  },
                  get isOpen() {
                    return isOpen();
                  },
                  $$events: {
                    click(...$$args) {
                      apply(() => toggle() || void 0, this, $$args, Offcanvas, [221, 33]);
                    }
                  }
                }),
                "component",
                Offcanvas,
                221,
                4,
                { componentTag: "OffcanvasBackdrop" }
              );
              append($$anchor4, fragment_8);
            };
            add_svelte_meta(
              () => if_block(node_9, ($$render) => {
                if (backdrop()) $$render(consequent_3);
              }),
              "if",
              Offcanvas,
              220,
              2
            );
          }
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      });
    }),
    "component",
    Offcanvas,
    192,
    0,
    { componentTag: "svelte:component" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Offcanvas = hmr(Offcanvas, () => Offcanvas[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-_xRepSbKi5Nf");
    module.default[HMR].source = Offcanvas[HMR].source;
    set(Offcanvas[HMR].source, module.default[HMR].original);
  });
}
var Offcanvas_default = Offcanvas;

// node_modules/@sveltestrap/sveltestrap/dist/Pagination/Pagination.svelte
Pagination[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Pagination/Pagination.svelte";
var root55 = add_locations(from_html(`<nav><ul><!></ul></nav>`), Pagination[FILENAME], [[45, 0, [[46, 2]]]]);
function Pagination($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["ariaLabel", "class", "listClassName", "size", "theme"]);
  push($$props, false, Pagination);
  const classes = mutable_source();
  const listClasses = mutable_source();
  let ariaLabel = prop($$props, "ariaLabel", 8, "pagination");
  let className = prop($$props, "class", 8, "");
  let listClassName = prop($$props, "listClassName", 8, "");
  let size = prop($$props, "size", 8, "");
  let theme = prop($$props, "theme", 8, null);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className()));
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(listClassName()), deep_read_state(size())),
    () => {
      set(listClasses, classnames(listClassName(), "pagination", { [`pagination-${size()}`]: !!size() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var nav = root55();
  attribute_effect(nav, () => ({
    ...$$restProps,
    class: get(classes),
    "aria-label": ariaLabel(),
    "data-bs-theme": theme()
  }));
  var ul = child(nav);
  var node = child(ul);
  slot(node, $$props, "default", {}, null);
  reset(ul);
  reset(nav);
  template_effect(() => set_class(ul, 1, clsx(get(listClasses))));
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Pagination = hmr(Pagination, () => Pagination[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pagination[HMR].source;
    set(Pagination[HMR].source, module.default[HMR].original);
  });
}
var Pagination_default = Pagination;

// node_modules/@sveltestrap/sveltestrap/dist/PaginationItem/PaginationItem.svelte
PaginationItem[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/PaginationItem/PaginationItem.svelte";
var root56 = add_locations(from_html(`<li><!></li>`), PaginationItem[FILENAME], [[15, 0]]);
function PaginationItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "active", "disabled"]);
  push($$props, false, PaginationItem);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(active()), deep_read_state(disabled())),
    () => {
      set(classes, classnames(className(), "page-item", { active: active(), disabled: disabled() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root56();
  attribute_effect(li, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(li);
  slot(node, $$props, "default", {}, null);
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationItem = hmr(PaginationItem, () => PaginationItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationItem[HMR].source;
    set(PaginationItem[HMR].source, module.default[HMR].original);
  });
}
var PaginationItem_default = PaginationItem;

// node_modules/@sveltestrap/sveltestrap/dist/PaginationLink/PaginationLink.svelte
PaginationLink[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/PaginationLink/PaginationLink.svelte";
var root_124 = add_locations(from_html(`<span aria-hidden="true"><!></span> <span class="visually-hidden"> </span>`, 1), PaginationLink[FILENAME], [[43, 4], [46, 4]]);
var root57 = add_locations(from_html(`<a><!></a>`), PaginationLink[FILENAME], [[41, 0]]);
function PaginationLink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "next",
    "previous",
    "first",
    "last",
    "ariaLabel",
    "href"
  ]);
  push($$props, false, PaginationLink);
  const classes = mutable_source();
  const realLabel = mutable_source();
  let className = prop($$props, "class", 8, "");
  let next2 = prop($$props, "next", 8, false);
  let previous = prop($$props, "previous", 8, false);
  let first = prop($$props, "first", 8, false);
  let last = prop($$props, "last", 8, false);
  let ariaLabel = prop($$props, "ariaLabel", 8, "");
  let href = prop($$props, "href", 8, "");
  let defaultAriaLabel = mutable_source();
  let defaultCaret = mutable_source();
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "page-link"));
  });
  legacy_pre_effect(
    () => (deep_read_state(previous()), deep_read_state(next2()), deep_read_state(first()), deep_read_state(last())),
    () => {
      if (previous()) {
        set(defaultAriaLabel, "Previous");
      } else if (next2()) {
        set(defaultAriaLabel, "Next");
      } else if (first()) {
        set(defaultAriaLabel, "First");
      } else if (last()) {
        set(defaultAriaLabel, "Last");
      }
    }
  );
  legacy_pre_effect(() => (deep_read_state(ariaLabel()), get(defaultAriaLabel)), () => {
    set(realLabel, ariaLabel() || get(defaultAriaLabel));
  });
  legacy_pre_effect(
    () => (deep_read_state(previous()), deep_read_state(next2()), deep_read_state(first()), deep_read_state(last())),
    () => {
      if (previous()) {
        set(defaultCaret, "‹");
      } else if (next2()) {
        set(defaultCaret, "›");
      } else if (first()) {
        set(defaultCaret, "«");
      } else if (last()) {
        set(defaultCaret, "»");
      }
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var a = root57();
  attribute_effect(a, () => ({ ...$$restProps, class: get(classes), href: href() }));
  var node = child(a);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_124();
      var span = first_child(fragment);
      var node_1 = child(span);
      slot(node_1, $$props, "default", {}, ($$anchor3) => {
        var text2 = text();
        template_effect(() => set_text(text2, get(defaultCaret)));
        append($$anchor3, text2);
      });
      reset(span);
      var span_1 = sibling(span, 2);
      var text_1 = child(span_1, true);
      reset(span_1);
      template_effect(() => set_text(text_1, get(realLabel)));
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_2 = first_child(fragment_2);
      slot(node_2, $$props, "default", {}, null);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (previous() || next2() || first() || last()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      PaginationLink,
      42,
      2
    );
  }
  reset(a);
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationLink = hmr(PaginationLink, () => PaginationLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationLink[HMR].source;
    set(PaginationLink[HMR].source, module.default[HMR].original);
  });
}
var PaginationLink_default = PaginationLink;

// node_modules/@sveltestrap/sveltestrap/dist/Popover/Popover.svelte
Popover[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Popover/Popover.svelte";
var root_211 = add_locations(from_html(`<div><div class="popover-arrow" data-popper-arrow=""></div> <h3 class="popover-header"><!></h3> <div class="popover-body"><!></div></div>`), Popover[FILENAME], [[200, 4, [[208, 6], [209, 6], [212, 6]]]]);
function Popover($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "animation",
    "content",
    "container",
    "dismissible",
    "hideOnOutsideClick",
    "isOpen",
    "placement",
    "target",
    "theme",
    "title",
    "trigger"
  ]);
  push($$props, false, Popover);
  const classes = mutable_source();
  const outer = mutable_source();
  let className = prop($$props, "class", 8, "");
  let animation = prop($$props, "animation", 8, true);
  let content = prop($$props, "content", 8, "");
  let container = prop($$props, "container", 8, void 0);
  let dismissible = prop($$props, "dismissible", 8, false);
  let hideOnOutsideClick = prop($$props, "hideOnOutsideClick", 8, false);
  let isOpen = prop($$props, "isOpen", 12, false);
  let placement = prop($$props, "placement", 8, "top");
  let target = prop($$props, "target", 8, "");
  let theme = prop($$props, "theme", 8, null);
  let title = prop($$props, "title", 8, "");
  let trigger = prop($$props, "trigger", 8, "click");
  let targetEl = mutable_source();
  let popoverEl = mutable_source();
  let popperInstance = mutable_source();
  let bsPlacement = mutable_source();
  let popperPlacement = mutable_source(placement());
  const checkPopperPlacement = {
    name: "checkPopperPlacement",
    enabled: true,
    phase: "main",
    fn({ state }) {
      set(popperPlacement, state.placement);
    }
  };
  const open = () => isOpen(true);
  const close = () => isOpen(false);
  const toggle = () => isOpen(!isOpen());
  onMount(() => {
    set(targetEl, document.querySelector(`#${target()}`));
    switch (trigger()) {
      case "hover":
        get(targetEl).addEventListener("mouseover", open);
        get(targetEl).addEventListener("mouseleave", close);
        break;
      case "focus":
        get(targetEl).addEventListener("focus", open);
        get(targetEl).addEventListener("blur", close);
        break;
      default:
        get(targetEl).addEventListener("click", toggle);
        if (dismissible()) {
          get(targetEl).addEventListener("blur", close);
        }
        break;
    }
    return () => {
      switch (trigger()) {
        case "hover":
          get(targetEl).removeEventListener("mouseover", open);
          get(targetEl).removeEventListener("mouseleave", close);
          break;
        case "focus":
          get(targetEl).removeEventListener("focus", open);
          get(targetEl).removeEventListener("blur", close);
          break;
        default:
          get(targetEl).removeEventListener("click", toggle);
          if (dismissible()) {
            get(targetEl).removeEventListener("blur", close);
          }
          break;
      }
    };
  });
  const handleOutsideClick = (event2) => {
    if (isOpen() && hideOnOutsideClick() && !get(popoverEl).contains(event2.target)) {
      isOpen(false);
    }
  };
  legacy_pre_effect(
    () => (deep_read_state(isOpen()), get(popoverEl), get(popperInstance), createPopper, get(targetEl), deep_read_state(placement())),
    () => {
      if (isOpen() && get(popoverEl)) {
        set(popperInstance, createPopper(get(targetEl), get(popoverEl), {
          placement: placement(),
          modifiers: [
            checkPopperPlacement,
            {
              name: "offset",
              options: {
                offset: () => {
                  return [0, 8];
                }
              }
            }
          ]
        }));
      } else if (get(popperInstance)) {
        get(popperInstance).destroy();
        set(popperInstance, void 0);
      }
    }
  );
  legacy_pre_effect(() => deep_read_state(target()), () => {
    if (!target()) {
      throw new Error("Need target!");
    }
  });
  legacy_pre_effect(() => get(popperPlacement), () => {
    if (strict_equals(get(popperPlacement), "left")) {
      set(bsPlacement, "start");
    } else if (strict_equals(get(popperPlacement), "right")) {
      set(bsPlacement, "end");
    } else {
      set(bsPlacement, get(popperPlacement));
    }
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(animation()), get(bsPlacement), deep_read_state(isOpen())),
    () => {
      set(classes, classnames(className(), "popover", animation() ? "fade" : false, `bs-popover-${get(bsPlacement)}`, isOpen() ? "show" : false));
    }
  );
  legacy_pre_effect(() => (deep_read_state(container()), InlineContainer_default, Portal_default), () => {
    set(outer, strict_equals(container(), "inline") ? InlineContainer_default : Portal_default);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  event("mousedown", $window, handleOutsideClick);
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => component(node_1, () => get(outer), ($$anchor3, $$component) => {
          $$component($$anchor3, {
            children: wrap_snippet(Popover, ($$anchor4, $$slotProps) => {
              var div = root_211();
              attribute_effect(div, () => ({
                ...$$restProps,
                class: get(classes),
                role: "tooltip",
                "data-bs-theme": theme(),
                "x-placement": get(popperPlacement)
              }));
              var h3 = sibling(child(div), 2);
              var node_2 = child(h3);
              slot(node_2, $$props, "title", {}, ($$anchor5) => {
                var text2 = text();
                template_effect(() => set_text(text2, title()));
                append($$anchor5, text2);
              });
              reset(h3);
              var div_1 = sibling(h3, 2);
              var node_3 = child(div_1);
              {
                var consequent = ($$anchor5) => {
                  var text_1 = text();
                  template_effect(() => set_text(text_1, content()));
                  append($$anchor5, text_1);
                };
                var alternate = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_4 = first_child(fragment_4);
                  slot(node_4, $$props, "default", {}, null);
                  append($$anchor5, fragment_4);
                };
                add_svelte_meta(
                  () => if_block(node_3, ($$render) => {
                    if (content()) $$render(consequent);
                    else $$render(alternate, false);
                  }),
                  "if",
                  Popover,
                  213,
                  8
                );
              }
              reset(div_1);
              reset(div);
              bind_this(div, ($$value) => set(popoverEl, $$value), () => get(popoverEl));
              append($$anchor4, div);
            }),
            $$slots: { default: true }
          });
        }),
        "component",
        Popover,
        199,
        2,
        { componentTag: "svelte:component" }
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent_1);
      }),
      "if",
      Popover,
      198,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Popover = hmr(Popover, () => Popover[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popover[HMR].source;
    set(Popover[HMR].source, module.default[HMR].original);
  });
}
var Popover_default = Popover;

// node_modules/@sveltestrap/sveltestrap/dist/Progress/Progress.svelte
Progress[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Progress/Progress.svelte";
var root_39 = add_locations(from_html(`<div><!></div>`), Progress[FILENAME], [[82, 4]]);
var root_64 = add_locations(from_html(`<div role="progressbar" aria-valuemin="0"><!></div>`), Progress[FILENAME], [[100, 6]]);
var root_410 = add_locations(from_html(`<div><!></div>`), Progress[FILENAME], [[96, 2]]);
function Progress($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "animated",
    "bar",
    "barClassName",
    "class",
    "color",
    "max",
    "multi",
    "striped",
    "theme",
    "value"
  ]);
  push($$props, false, Progress);
  const classes = mutable_source();
  const progressBarClasses = mutable_source();
  const percent = mutable_source();
  let animated = prop($$props, "animated", 8, false);
  let bar = prop($$props, "bar", 8, false);
  let barClassName = prop($$props, "barClassName", 8, "");
  let className = prop($$props, "class", 8, "");
  let color = prop($$props, "color", 8, "");
  let max = prop($$props, "max", 8, 100);
  let multi = prop($$props, "multi", 8, false);
  let striped = prop($$props, "striped", 8, false);
  let theme = prop($$props, "theme", 8, null);
  let value = prop($$props, "value", 8, 0);
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "progress"));
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(bar()), deep_read_state(className()), deep_read_state(barClassName()), deep_read_state(animated()), deep_read_state(color()), deep_read_state(striped())),
    () => {
      set(progressBarClasses, classnames("progress-bar", bar() ? className() || barClassName() : barClassName(), animated() ? "progress-bar-animated" : null, color() ? `text-bg-${color()}` : null, striped() || animated() ? "progress-bar-striped" : null));
    }
  );
  legacy_pre_effect(() => (deep_read_state(value()), deep_read_state(max())), () => {
    set(percent, parseInt(value(), 10) / parseInt(max(), 10) * 100);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(node_2, $$props, "default", {}, null);
          append($$anchor3, fragment_2);
        };
        var alternate = ($$anchor3) => {
          var div = root_39();
          attribute_effect(div, () => ({
            ...$$restProps,
            class: get(progressBarClasses),
            style: `width: ${get(percent) ?? ""}%`,
            "data-bs-theme": theme(),
            role: "progressbar",
            "aria-valuenow": value(),
            "aria-valuemin": "0",
            "aria-valuemax": max()
          }));
          var node_3 = child(div);
          slot(node_3, $$props, "default", {}, null);
          reset(div);
          append($$anchor3, div);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (multi()) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Progress,
          79,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_2 = ($$anchor2) => {
      var div_1 = root_410();
      attribute_effect(div_1, () => ({
        ...$$restProps,
        "data-bs-theme": theme(),
        class: get(classes)
      }));
      var node_4 = child(div_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_5 = first_child(fragment_3);
          slot(node_5, $$props, "default", {}, null);
          append($$anchor3, fragment_3);
        };
        var alternate_1 = ($$anchor3) => {
          var div_2 = root_64();
          var node_6 = child(div_2);
          slot(node_6, $$props, "default", {}, null);
          reset(div_2);
          template_effect(() => {
            set_class(div_2, 1, clsx(get(progressBarClasses)));
            set_style(div_2, `width: ${get(percent) ?? ""}%`);
            set_attribute(div_2, "data-bs-theme", theme());
            set_attribute(div_2, "aria-valuenow", value());
            set_attribute(div_2, "aria-valuemax", max());
          });
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (multi()) $$render(consequent_2);
            else $$render(alternate_1, false);
          }),
          "if",
          Progress,
          97,
          4
        );
      }
      reset(div_1);
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (bar()) $$render(consequent_1);
        else $$render(alternate_2, false);
      }),
      "if",
      Progress,
      78,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Progress = hmr(Progress, () => Progress[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progress[HMR].source;
    set(Progress[HMR].source, module.default[HMR].original);
  });
}
var Progress_default = Progress;

// node_modules/@sveltestrap/sveltestrap/dist/Row/Row.svelte
Row[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Row/Row.svelte";
var root58 = add_locations(from_html(`<div><!></div>`), Row[FILENAME], [[36, 0]]);
function Row($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "noGutters", "form", "cols", "inner"]);
  push($$props, false, Row);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let noGutters = prop($$props, "noGutters", 8, false);
  let form = prop($$props, "form", 8, false);
  let cols = prop($$props, "cols", 8, 0);
  let inner = prop($$props, "inner", 12, void 0);
  function getCols(cols2) {
    const colsValue = parseInt(cols2);
    if (!isNaN(colsValue)) {
      if (colsValue > 0) {
        return [`row-cols-${colsValue}`];
      }
    } else if (strict_equals(typeof cols2, "object")) {
      return ["xs", "sm", "md", "lg", "xl"].map((colWidth) => {
        const isXs = strict_equals(colWidth, "xs");
        const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
        const value = cols2[colWidth];
        if (strict_equals(typeof value, "number") && value > 0) {
          return `row-cols${colSizeInterfix}${value}`;
        }
        return null;
      }).filter((value) => !!value);
    }
    return [];
  }
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(noGutters()), deep_read_state(form()), deep_read_state(cols())),
    () => {
      set(classes, classnames(className(), noGutters() ? "gx-0" : null, form() ? "form-row" : "row", ...getCols(cols())));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root58();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  bind_this(div, ($$value) => inner($$value), () => inner());
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Row = hmr(Row, () => Row[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Row[HMR].source;
    set(Row[HMR].source, module.default[HMR].original);
  });
}
var Row_default = Row;

// node_modules/@sveltestrap/sveltestrap/dist/Spinner/Spinner.svelte
Spinner[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Spinner/Spinner.svelte";
var root59 = add_locations(from_html(`<div><span class="visually-hidden"><!></span></div>`), Spinner[FILENAME], [[39, 0, [[40, 2]]]]);
function Spinner($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "type", "size", "color"]);
  push($$props, false, Spinner);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let type = prop($$props, "type", 8, "border");
  let size = prop($$props, "size", 8, "");
  let color = prop($$props, "color", 8, "");
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(size()), deep_read_state(type()), deep_read_state(color())),
    () => {
      set(classes, classnames(className(), size() ? `spinner-${type()}-${size()}` : false, `spinner-${type()}`, color() ? `text-${color()}` : false));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root59();
  attribute_effect(div, () => ({ ...$$restProps, role: "status", class: get(classes) }));
  var span = child(div);
  var node = child(span);
  slot(node, $$props, "default", {}, ($$anchor2) => {
    var text2 = text("Loading...");
    append($$anchor2, text2);
  });
  reset(span);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Spinner = hmr(Spinner, () => Spinner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spinner[HMR].source;
    set(Spinner[HMR].source, module.default[HMR].original);
  });
}
var Spinner_default = Spinner;

// node_modules/@sveltestrap/sveltestrap/dist/Styles/Styles.svelte
Styles[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Styles/Styles.svelte";
var root_212 = add_locations(from_html(`<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css"/>`), Styles[FILENAME], [[18, 4]]);
var root_125 = add_locations(from_html(`<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"/> <!>`, 1), Styles[FILENAME], [[15, 2]]);
function Styles($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Styles);
  let icons = prop($$props, "icons", 8, true);
  let theme = prop($$props, "theme", 8, void 0);
  legacy_pre_effect(() => deep_read_state(theme()), () => {
    if (strict_equals(typeof document, "undefined", false) && strict_equals(theme(), void 0, false)) {
      if (strict_equals(theme(), "auto") && window.matchMedia("(prefers-color-scheme: dark)").matches) {
        document.documentElement.setAttribute("data-bs-theme", "dark");
      } else {
        document.documentElement.setAttribute("data-bs-theme", theme());
      }
    }
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  head(($$anchor2) => {
    var fragment = root_125();
    var node = sibling(first_child(fragment), 2);
    {
      var consequent = ($$anchor3) => {
        var link = root_212();
        append($$anchor3, link);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if (icons()) $$render(consequent);
        }),
        "if",
        Styles,
        17,
        2
      );
    }
    append($$anchor2, fragment);
  });
  return pop($$exports);
}
if (import.meta.hot) {
  Styles = hmr(Styles, () => Styles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Styles[HMR].source;
    set(Styles[HMR].source, module.default[HMR].original);
  });
}
var Styles_default = Styles;

// node_modules/@sveltestrap/sveltestrap/dist/Colgroup/Colgroup.svelte
Colgroup[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Colgroup/Colgroup.svelte";
var root60 = add_locations(from_html(`<colgroup><!></colgroup>`), Colgroup[FILENAME], [[7, 0]]);
function Colgroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Colgroup);
  setContext("colgroup", true);
  var $$exports = { ...legacy_api() };
  init();
  var colgroup = root60();
  var node = child(colgroup);
  slot(node, $$props, "default", {}, null);
  reset(colgroup);
  append($$anchor, colgroup);
  return pop($$exports);
}
if (import.meta.hot) {
  Colgroup = hmr(Colgroup, () => Colgroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Colgroup[HMR].source;
    set(Colgroup[HMR].source, module.default[HMR].original);
  });
}
var Colgroup_default = Colgroup;

// node_modules/@sveltestrap/sveltestrap/dist/ResponsiveContainer/ResponsiveContainer.svelte
ResponsiveContainer[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ResponsiveContainer/ResponsiveContainer.svelte";
var root_126 = add_locations(from_html(`<div><!></div>`), ResponsiveContainer[FILENAME], [[15, 2]]);
function ResponsiveContainer($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ResponsiveContainer);
  const responsiveClassName = mutable_source();
  let className = prop($$props, "class", 8, "");
  let responsive = prop($$props, "responsive", 8, false);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(responsive())),
    () => {
      set(responsiveClassName, classnames(className(), {
        "table-responsive": strict_equals(responsive(), true),
        [`table-responsive-${responsive()}`]: strict_equals(typeof responsive(), "string")
      }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_126();
      var node_1 = child(div);
      slot(node_1, $$props, "default", {}, null);
      reset(div);
      template_effect(() => set_class(div, 1, clsx(get(responsiveClassName))));
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      slot(node_2, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (responsive()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      ResponsiveContainer,
      14,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ResponsiveContainer = hmr(ResponsiveContainer, () => ResponsiveContainer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ResponsiveContainer[HMR].source;
    set(ResponsiveContainer[HMR].source, module.default[HMR].original);
  });
}
var ResponsiveContainer_default = ResponsiveContainer;

// node_modules/@sveltestrap/sveltestrap/dist/TableFooter/TableFooter.svelte
TableFooter[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/TableFooter/TableFooter.svelte";
var root61 = add_locations(from_html(`<tfoot><tr><!></tr></tfoot>`), TableFooter[FILENAME], [[7, 0, [[8, 2]]]]);
function TableFooter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TableFooter);
  setContext("footer", true);
  var $$exports = { ...legacy_api() };
  init();
  var tfoot = root61();
  attribute_effect(tfoot, () => ({ ...$$restProps }));
  var tr = child(tfoot);
  var node = child(tr);
  slot(node, $$props, "default", {}, null);
  reset(tr);
  reset(tfoot);
  append($$anchor, tfoot);
  return pop($$exports);
}
if (import.meta.hot) {
  TableFooter = hmr(TableFooter, () => TableFooter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableFooter[HMR].source;
    set(TableFooter[HMR].source, module.default[HMR].original);
  });
}
var TableFooter_default = TableFooter;

// node_modules/@sveltestrap/sveltestrap/dist/TableHeader/TableHeader.svelte
TableHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/TableHeader/TableHeader.svelte";
var root62 = add_locations(from_html(`<thead><tr><!></tr></thead>`), TableHeader[FILENAME], [[7, 0, [[8, 2]]]]);
function TableHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TableHeader);
  setContext("header", true);
  var $$exports = { ...legacy_api() };
  init();
  var thead = root62();
  attribute_effect(thead, () => ({ ...$$restProps }));
  var tr = child(thead);
  var node = child(tr);
  slot(node, $$props, "default", {}, null);
  reset(tr);
  reset(thead);
  append($$anchor, thead);
  return pop($$exports);
}
if (import.meta.hot) {
  TableHeader = hmr(TableHeader, () => TableHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHeader[HMR].source;
    set(TableHeader[HMR].source, module.default[HMR].original);
  });
}
var TableHeader_default = TableHeader;

// node_modules/@sveltestrap/sveltestrap/dist/Table/Table.svelte
Table[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Table/Table.svelte";
var root_55 = add_locations(from_html(`<tr><!></tr>`), Table[FILENAME], [[80, 10]]);
var root_213 = add_locations(from_html(`<!> <!> <tbody></tbody> <!>`, 1), Table[FILENAME], [[78, 6]]);
var root_127 = add_locations(from_html(`<table><!></table>`), Table[FILENAME], [[70, 2]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "size",
    "bordered",
    "borderless",
    "striped",
    "hover",
    "responsive",
    "rows"
  ]);
  push($$props, false, Table);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let size = prop($$props, "size", 8, "");
  let bordered = prop($$props, "bordered", 8, false);
  let borderless = prop($$props, "borderless", 8, false);
  let striped = prop($$props, "striped", 8, false);
  let hover = prop($$props, "hover", 8, false);
  let responsive = prop($$props, "responsive", 8, false);
  let rows = prop($$props, "rows", 8, void 0);
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(size()), deep_read_state(bordered()), deep_read_state(borderless()), deep_read_state(striped()), deep_read_state(hover())),
    () => {
      set(classes, classnames(className(), "table", size() ? "table-" + size() : false, bordered() ? "table-bordered" : false, borderless() ? "table-borderless" : false, striped() ? "table-striped" : false, hover() ? "table-hover" : false));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => ResponsiveContainer_default(node, {
      get responsive() {
        return responsive();
      },
      children: wrap_snippet(Table, ($$anchor2, $$slotProps) => {
        var table = root_127();
        attribute_effect(table, () => ({ ...$$restProps, class: get(classes) }));
        var node_1 = child(table);
        {
          var consequent = ($$anchor3) => {
            var fragment_1 = root_213();
            var node_2 = first_child(fragment_1);
            add_svelte_meta(
              () => Colgroup_default(node_2, {
                children: wrap_snippet(Table, ($$anchor4, $$slotProps2) => {
                  var fragment_2 = comment();
                  var node_3 = first_child(fragment_2);
                  slot(node_3, $$props, "default", {}, null);
                  append($$anchor4, fragment_2);
                }),
                $$slots: { default: true }
              }),
              "component",
              Table,
              72,
              6,
              { componentTag: "Colgroup" }
            );
            var node_4 = sibling(node_2, 2);
            add_svelte_meta(
              () => TableHeader_default(node_4, {
                children: wrap_snippet(Table, ($$anchor4, $$slotProps2) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  slot(node_5, $$props, "default", {}, null);
                  append($$anchor4, fragment_3);
                }),
                $$slots: { default: true }
              }),
              "component",
              Table,
              75,
              6,
              { componentTag: "TableHeader" }
            );
            var tbody = sibling(node_4, 2);
            add_svelte_meta(
              () => each(tbody, 5, rows, index, ($$anchor4, row) => {
                var tr = root_55();
                var node_6 = child(tr);
                slot(
                  node_6,
                  $$props,
                  "default",
                  {
                    get row() {
                      return get(row);
                    }
                  },
                  null
                );
                reset(tr);
                append($$anchor4, tr);
              }),
              "each",
              Table,
              79,
              8
            );
            reset(tbody);
            var node_7 = sibling(tbody, 2);
            add_svelte_meta(
              () => TableFooter_default(node_7, {
                children: wrap_snippet(Table, ($$anchor4, $$slotProps2) => {
                  var fragment_4 = comment();
                  var node_8 = first_child(fragment_4);
                  slot(node_8, $$props, "default", {}, null);
                  append($$anchor4, fragment_4);
                }),
                $$slots: { default: true }
              }),
              "component",
              Table,
              85,
              6,
              { componentTag: "TableFooter" }
            );
            append($$anchor3, fragment_1);
          };
          var alternate = ($$anchor3) => {
            var fragment_5 = comment();
            var node_9 = first_child(fragment_5);
            slot(node_9, $$props, "default", {}, null);
            append($$anchor3, fragment_5);
          };
          add_svelte_meta(
            () => if_block(node_1, ($$render) => {
              if (rows()) $$render(consequent);
              else $$render(alternate, false);
            }),
            "if",
            Table,
            71,
            4
          );
        }
        reset(table);
        append($$anchor2, table);
      }),
      $$slots: { default: true }
    }),
    "component",
    Table,
    69,
    0,
    { componentTag: "ResponsiveContainer" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;

// node_modules/@sveltestrap/sveltestrap/dist/TabHeader/TabHeader.svelte
TabHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/TabHeader/TabHeader.svelte";
function TabHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, []);
  push($$props, false, TabHeader);
  setContext("tabs", true);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Nav_default(node, spread_props(() => $$restProps, {
      children: wrap_snippet(TabHeader, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    TabHeader,
    8,
    0,
    { componentTag: "Nav" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  TabHeader = hmr(TabHeader, () => TabHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabHeader[HMR].source;
    set(TabHeader[HMR].source, module.default[HMR].original);
  });
}
var TabHeader_default = TabHeader;

// node_modules/@sveltestrap/sveltestrap/dist/TabContent/TabContent.svelte
TabContent[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/TabContent/TabContent.svelte";
var root63 = add_locations(from_html(`<div><!> <!></div>`), TabContent[FILENAME], [[28, 0]]);
function TabContent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "pills", "vertical"]);
  push($$props, false, TabContent);
  const classes = mutable_source();
  const dispatch = createEventDispatcher();
  let className = prop($$props, "class", 8, "");
  let pills = prop($$props, "pills", 8, false);
  let vertical = prop($$props, "vertical", 8, false);
  const activeTabId = writable();
  setContext("tabContent", {
    activeTabId,
    setActiveTab: (tabId) => {
      activeTabId.set(tabId);
      dispatch("tab", tabId);
    }
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(vertical())),
    () => {
      set(classes, classnames("tab-content", className(), { "d-flex align-items-start": vertical() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root63();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(classnames), deep_read_state(vertical()), untrack(() => classnames({ "me-3": vertical() }))));
    let $1 = derived_safe_equal(() => !pills());
    add_svelte_meta(
      () => TabHeader_default(node, {
        get class() {
          return get($0);
        },
        get pills() {
          return pills();
        },
        get tabs() {
          return get($1);
        },
        get vertical() {
          return vertical();
        },
        children: wrap_snippet(TabContent, ($$anchor2, $$slotProps) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          slot(node_1, $$props, "default", {}, null);
          append($$anchor2, fragment);
        }),
        $$slots: { default: true }
      }),
      "component",
      TabContent,
      29,
      2,
      { componentTag: "TabHeader" }
    );
  }
  var node_2 = sibling(node, 2);
  slot(node_2, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TabContent = hmr(TabContent, () => TabContent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabContent[HMR].source;
    set(TabContent[HMR].source, module.default[HMR].original);
  });
}
var TabContent_default = TabContent;

// node_modules/@sveltestrap/sveltestrap/dist/TabPane/TabPane.svelte
TabPane[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/TabPane/TabPane.svelte";
var root_310 = add_locations(from_html(`<!> <!>`, 1), TabPane[FILENAME], []);
var root_56 = add_locations(from_html(`<div><!></div>`), TabPane[FILENAME], [[37, 2]]);
function TabPane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "active", "disabled", "tab", "tabId"]);
  push($$props, false, TabPane);
  const $activeTabId = () => (validate_store(activeTabId, "activeTabId"), store_get(activeTabId, "$activeTabId", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  let active = prop($$props, "active", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let tab = prop($$props, "tab", 8, void 0);
  let tabId = prop($$props, "tabId", 8, void 0);
  const tabs = getContext("tabs");
  const { activeTabId, setActiveTab } = getContext("tabContent");
  onMount(() => {
    if (active()) setActiveTab(tabId());
  });
  let tabOpen = mutable_source(active());
  legacy_pre_effect(() => ($activeTabId(), deep_read_state(tabId())), () => {
    if (strict_equals($activeTabId(), void 0, false)) set(tabOpen, strict_equals($activeTabId(), tabId()));
  });
  legacy_pre_effect(() => (classnames, deep_read_state(className()), get(tabOpen)), () => {
    set(classes, classnames("tab-pane", className(), { active: get(tabOpen), show: get(tabOpen) }));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => NavItem_default(node_1, {
          children: wrap_snippet(TabPane, ($$anchor3, $$slotProps) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            add_svelte_meta(
              () => NavLink_default(node_2, {
                get active() {
                  return get(tabOpen);
                },
                get disabled() {
                  return disabled();
                },
                $$events: { click: () => setActiveTab(tabId()) },
                children: wrap_snippet(TabPane, ($$anchor4, $$slotProps2) => {
                  var fragment_3 = root_310();
                  var node_3 = first_child(fragment_3);
                  {
                    var consequent = ($$anchor5) => {
                      var text2 = text();
                      template_effect(() => set_text(text2, tab()));
                      append($$anchor5, text2);
                    };
                    add_svelte_meta(
                      () => if_block(node_3, ($$render) => {
                        if (tab()) $$render(consequent);
                      }),
                      "if",
                      TabPane,
                      32,
                      6
                    );
                  }
                  var node_4 = sibling(node_3, 2);
                  slot(node_4, $$props, "tab", {}, null);
                  append($$anchor4, fragment_3);
                }),
                $$slots: { default: true }
              }),
              "component",
              TabPane,
              31,
              4,
              { componentTag: "NavLink" }
            );
            append($$anchor3, fragment_2);
          }),
          $$slots: { default: true }
        }),
        "component",
        TabPane,
        30,
        2,
        { componentTag: "NavItem" }
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var div = root_56();
      attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
      var node_5 = child(div);
      slot(node_5, $$props, "default", {}, null);
      reset(div);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (tabs) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      TabPane,
      29,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  TabPane = hmr(TabPane, () => TabPane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabPane[HMR].source;
    set(TabPane[HMR].source, module.default[HMR].original);
  });
}
var TabPane_default = TabPane;

// node_modules/@sveltestrap/sveltestrap/dist/Theme/helpers.js
var colorMode = writable(getInitialColorMode());
colorMode.subscribe((mode) => useColorMode(mode));
function getInitialColorMode() {
  var _a, _b, _c;
  const currentTheme = ((_a = globalThis.document) == null ? void 0 : _a.documentElement.getAttribute("data-bs-theme")) || "light";
  const prefersDarkMode = typeof ((_b = globalThis.window) == null ? void 0 : _b.matchMedia) === "function" ? (_c = globalThis.window) == null ? void 0 : _c.matchMedia("(prefers-color-scheme: dark)").matches : false;
  return currentTheme === "dark" || currentTheme === "auto" && prefersDarkMode ? "dark" : "light";
}
function useColorMode(element, mode) {
  var _a;
  let target = element;
  if (arguments.length === 1) {
    target = (_a = globalThis.document) == null ? void 0 : _a.documentElement;
    if (!target) {
      return;
    }
    mode = element;
    colorMode.update(() => mode);
  }
  target.setAttribute("data-bs-theme", mode);
}
function toggleColorMode(element) {
  var _a;
  const target = element || ((_a = globalThis.document) == null ? void 0 : _a.documentElement);
  if (!target) {
    return;
  }
  const currentMode = target.getAttribute("data-bs-theme");
  const newMode = currentMode === "dark" ? "light" : "dark";
  if (!element) {
    colorMode.update(() => newMode);
  }
  target.setAttribute("data-bs-theme", newMode);
}

// node_modules/@sveltestrap/sveltestrap/dist/Theme/Theme.svelte
Theme[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Theme/Theme.svelte";
var root64 = add_locations(from_html(`<span class="s-xnORVMhC1s3B"><!></span>`), Theme[FILENAME], [[11, 0]]);
var $$css3 = {
  hash: "s-xnORVMhC1s3B",
  code: "\n  span.s-xnORVMhC1s3B {\n    display: contents;\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhlbWUuc3ZlbHRlIiwic291cmNlcyI6WyJUaGVtZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgdXNlQ29sb3JNb2RlIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuICBleHBvcnQgbGV0IHRoZW1lID0gJ2RhcmsnO1xuXG4gIGxldCByZWYgPSBudWxsO1xuXG4gICQ6IHJlZiAmJiB1c2VDb2xvck1vZGUocmVmLCB0aGVtZSk7XG48L3NjcmlwdD5cblxuPHNwYW4gYmluZDp0aGlzPXtyZWZ9PlxuICA8c2xvdCAvPlxuPC9zcGFuPlxuXG48c3R5bGU+XG4gIHNwYW4ge1xuICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICB9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJpZ25vcmVMaXN0IjpbXX0= */"
};
function Theme($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Theme);
  append_styles($$anchor, $$css3);
  let theme = prop($$props, "theme", 8, "dark");
  let ref = mutable_source(null);
  legacy_pre_effect(() => (get(ref), useColorMode, deep_read_state(theme())), () => {
    get(ref) && useColorMode(get(ref), theme());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var span = root64();
  var node = child(span);
  slot(node, $$props, "default", {}, null);
  reset(span);
  bind_this(span, ($$value) => set(ref, $$value), () => get(ref));
  append($$anchor, span);
  return pop($$exports);
}
if (import.meta.hot) {
  Theme = hmr(Theme, () => Theme[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-xnORVMhC1s3B");
    module.default[HMR].source = Theme[HMR].source;
    set(Theme[HMR].source, module.default[HMR].original);
  });
}
var Theme_default = Theme;

// node_modules/@sveltestrap/sveltestrap/dist/Theme/ThemeToggler.svelte
ThemeToggler[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Theme/ThemeToggler.svelte";
function ThemeToggler($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ThemeToggler);
  const $colorMode = () => (validate_store(colorMode, "colorMode"), store_get(colorMode, "$colorMode", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let currentColorMode = mutable_source($colorMode());
  colorMode.subscribe((value) => {
    set(currentColorMode, value);
  });
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  slot(
    node,
    $$props,
    "default",
    {
      get currentColorMode() {
        return get(currentColorMode);
      },
      get toggleColorMode() {
        return toggleColorMode;
      }
    },
    null
  );
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  ThemeToggler = hmr(ThemeToggler, () => ThemeToggler[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThemeToggler[HMR].source;
    set(ThemeToggler[HMR].source, module.default[HMR].original);
  });
}
var ThemeToggler_default = ThemeToggler;

// node_modules/@sveltestrap/sveltestrap/dist/ToastBody/ToastBody.svelte
ToastBody[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ToastBody/ToastBody.svelte";
var root65 = add_locations(from_html(`<div><!></div>`), ToastBody[FILENAME], [[10, 0]]);
function ToastBody($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class"]);
  push($$props, false, ToastBody);
  const classes = mutable_source();
  let className = prop($$props, "class", 8, "");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "toast-body"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root65();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ToastBody = hmr(ToastBody, () => ToastBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToastBody[HMR].source;
    set(ToastBody[HMR].source, module.default[HMR].original);
  });
}
var ToastBody_default = ToastBody;

// node_modules/@sveltestrap/sveltestrap/dist/ToastHeader/ToastHeader.svelte
ToastHeader[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/ToastHeader/ToastHeader.svelte";
var root_128 = add_locations(from_svg(`<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" focusable="false" role="img"><rect fill="currentColor" width="100%" height="100%"></rect></svg>`), ToastHeader[FILENAME], [[18, 4, [[27, 6]]]]);
var root66 = add_locations(from_html(`<div><!> <strong><!></strong> <!></div>`), ToastHeader[FILENAME], [[16, 0, [[32, 2]]]]);
function ToastHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["class", "icon", "toggle", "closeAriaLabel"]);
  push($$props, false, ToastHeader);
  const classes = mutable_source();
  const tagClassName = mutable_source();
  let className = prop($$props, "class", 8, "");
  let icon = prop($$props, "icon", 8, null);
  let toggle = prop($$props, "toggle", 8, null);
  let closeAriaLabel = prop($$props, "closeAriaLabel", 8, "Close");
  legacy_pre_effect(() => (classnames, deep_read_state(className())), () => {
    set(classes, classnames(className(), "toast-header"));
  });
  legacy_pre_effect(() => (classnames, deep_read_state(icon())), () => {
    set(tagClassName, classnames("me-auto", { "ms-2": strict_equals(icon(), null, false) }));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root66();
  attribute_effect(div, () => ({ ...$$restProps, class: get(classes) }));
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var svg = root_128();
      template_effect(() => set_class(svg, 0, `rounded text-${icon()}`));
      append($$anchor2, svg);
    };
    var alternate = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, $$props, "icon", {}, null);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (icon()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      ToastHeader,
      17,
      2
    );
  }
  var strong = sibling(node, 2);
  var node_2 = child(strong);
  slot(node_2, $$props, "default", {}, null);
  reset(strong);
  var node_3 = sibling(strong, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_4 = first_child(fragment_1);
      slot(node_4, $$props, "close", {}, ($$anchor3) => {
        var fragment_2 = comment();
        var node_5 = first_child(fragment_2);
        add_svelte_meta(
          () => Button_default(node_5, {
            close: true,
            get "aria-label"() {
              return closeAriaLabel();
            },
            $$events: {
              click(...$$args) {
                apply(toggle, this, $$args, ToastHeader, [37, 30]);
              }
            }
          }),
          "component",
          ToastHeader,
          37,
          6,
          { componentTag: "Button" }
        );
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (toggle()) $$render(consequent_1);
      }),
      "if",
      ToastHeader,
      35,
      2
    );
  }
  reset(div);
  template_effect(() => set_class(strong, 1, clsx(get(tagClassName))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ToastHeader = hmr(ToastHeader, () => ToastHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToastHeader[HMR].source;
    set(ToastHeader[HMR].source, module.default[HMR].original);
  });
}
var ToastHeader_default = ToastHeader;

// node_modules/@sveltestrap/sveltestrap/dist/Toast/Toast.svelte
Toast[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Toast/Toast.svelte";
var root_129 = add_locations(from_html(`<div><!> <!></div>`), Toast[FILENAME], [[102, 2]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "autohide",
    "body",
    "delay",
    "duration",
    "fade",
    "header",
    "isOpen",
    "theme",
    "toggle"
  ]);
  push($$props, false, Toast);
  const classes = mutable_source();
  const dispatch = createEventDispatcher();
  let className = prop($$props, "class", 8, "");
  let autohide = prop($$props, "autohide", 8, false);
  let body = prop($$props, "body", 8, false);
  let delay = prop($$props, "delay", 8, 5e3);
  let duration = prop($$props, "duration", 8, 200);
  let fade2 = prop($$props, "fade", 8, true);
  let header = prop($$props, "header", 8, void 0);
  let isOpen = prop($$props, "isOpen", 12, true);
  let theme = prop($$props, "theme", 8, null);
  let toggle = prop($$props, "toggle", 8, null);
  let timeout = mutable_source();
  onDestroy(() => {
    return () => clearTimeout(get(timeout));
  });
  legacy_pre_effect(
    () => (deep_read_state(isOpen()), deep_read_state(autohide()), deep_read_state(delay())),
    () => {
      if (isOpen() && autohide()) {
        set(timeout, setTimeout(() => isOpen(false), delay()));
      }
    }
  );
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), deep_read_state(isOpen())),
    () => {
      set(classes, classnames(className(), "toast", { show: isOpen() }));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_129();
      attribute_effect(div, () => ({
        ...$$restProps,
        class: get(classes),
        "data-bs-theme": theme(),
        role: "alert"
      }));
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => ToastHeader_default(node_2, {
              get toggle() {
                return toggle();
              },
              children: wrap_snippet(Toast, ($$anchor4, $$slotProps) => {
                next();
                var text2 = text();
                template_effect(() => set_text(text2, header()));
                append($$anchor4, text2);
              }),
              $$slots: { default: true }
            }),
            "component",
            Toast,
            114,
            6,
            { componentTag: "ToastHeader" }
          );
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (header()) $$render(consequent);
          }),
          "if",
          Toast,
          113,
          4
        );
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          add_svelte_meta(
            () => ToastBody_default(node_4, {
              children: wrap_snippet(Toast, ($$anchor4, $$slotProps) => {
                var fragment_4 = comment();
                var node_5 = first_child(fragment_4);
                slot(node_5, $$props, "default", {}, null);
                append($$anchor4, fragment_4);
              }),
              $$slots: { default: true }
            }),
            "component",
            Toast,
            119,
            6,
            { componentTag: "ToastBody" }
          );
          append($$anchor3, fragment_3);
        };
        var alternate = ($$anchor3) => {
          var fragment_5 = comment();
          var node_6 = first_child(fragment_5);
          slot(node_6, $$props, "default", {}, null);
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (body()) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          Toast,
          118,
          4
        );
      }
      reset(div);
      transition(3, div, () => fade, () => ({ duration: fade2() && duration() }));
      event("introstart", div, () => dispatch("opening"));
      event("introend", div, () => dispatch("open"));
      event("outrostart", div, () => dispatch("closing"));
      event("outroend", div, () => dispatch("close"));
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent_2);
      }),
      "if",
      Toast,
      101,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;

// node_modules/@sveltestrap/sveltestrap/dist/Tooltip/Tooltip.svelte
Tooltip[FILENAME] = "node_modules/@sveltestrap/sveltestrap/dist/Tooltip/Tooltip.svelte";
var root_214 = add_locations(from_html(`<div><div class="tooltip-arrow" data-popper-arrow=""></div> <div class="tooltip-inner"><!></div></div>`), Tooltip[FILENAME], [[218, 4, [[228, 6], [229, 6]]]]);
function Tooltip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "class",
    "animation",
    "content",
    "container",
    "id",
    "isOpen",
    "placement",
    "target",
    "theme",
    "delay"
  ]);
  push($$props, false, Tooltip);
  const classes = mutable_source();
  const outer = mutable_source();
  let className = prop($$props, "class", 8, "");
  let animation = prop($$props, "animation", 8, true);
  let content = prop($$props, "content", 8, "");
  let container = prop($$props, "container", 8, void 0);
  let id = prop($$props, "id", 24, () => `tooltip_${uuid()}`);
  let isOpen = prop($$props, "isOpen", 12, false);
  let placement = prop($$props, "placement", 8, "top");
  let target = prop($$props, "target", 8, "");
  let theme = prop($$props, "theme", 8, null);
  let delay = prop($$props, "delay", 8, 0);
  let bsPlacement = mutable_source();
  let popperInstance = mutable_source();
  let popperPlacement = mutable_source(placement());
  let targetEl = mutable_source();
  let tooltipEl = mutable_source();
  let showTimer;
  const checkPopperPlacement = {
    name: "checkPopperPlacement",
    enabled: true,
    phase: "main",
    // @ts-ignore
    fn({ state }) {
      set(popperPlacement, state.placement);
    }
  };
  const open = () => {
    clearTimeout(showTimer);
    showTimer = setTimeout(() => isOpen(true), delay());
  };
  const close = () => {
    clearTimeout(showTimer);
    isOpen(false);
  };
  onMount(registerEventListeners);
  onDestroy(() => {
    unregisterEventListeners();
    clearTimeout(showTimer);
  });
  function registerEventListeners() {
    if (equals(target(), null) || !target()) {
      set(targetEl, null);
      return;
    }
    try {
      if (target() instanceof HTMLElement) {
        set(targetEl, target());
      }
    } catch (e) {
    }
    if (equals(get(targetEl), null)) {
      try {
        set(targetEl, document.querySelector(`#${target()}`));
      } catch (e) {
      }
    }
    if (get(targetEl)) {
      get(targetEl).addEventListener("mouseover", open);
      get(targetEl).addEventListener("mouseleave", close);
      get(targetEl).addEventListener("focus", open);
      get(targetEl).addEventListener("blur", close);
    }
  }
  function unregisterEventListeners() {
    if (get(targetEl)) {
      get(targetEl).removeEventListener("mouseover", open);
      get(targetEl).removeEventListener("mouseleave", close);
      get(targetEl).removeEventListener("focus", open);
      get(targetEl).removeEventListener("blur", close);
      get(targetEl).removeAttribute("aria-describedby");
    }
  }
  legacy_pre_effect(
    () => (deep_read_state(isOpen()), get(tooltipEl), get(popperInstance), createPopper, get(targetEl), deep_read_state(placement())),
    () => {
      if (isOpen() && get(tooltipEl)) {
        set(popperInstance, createPopper(get(targetEl), get(tooltipEl), { placement: placement(), modifiers: [checkPopperPlacement] }));
      } else if (get(popperInstance)) {
        get(popperInstance).destroy();
        set(popperInstance, void 0);
      }
    }
  );
  legacy_pre_effect(() => deep_read_state(target()), () => {
    if (target()) {
      unregisterEventListeners();
      registerEventListeners();
    }
  });
  legacy_pre_effect(
    () => (get(targetEl), deep_read_state(isOpen()), deep_read_state(id())),
    () => {
      if (get(targetEl)) {
        if (isOpen()) {
          get(targetEl).setAttribute("aria-describedby", id());
        } else {
          get(targetEl).removeAttribute("aria-describedby");
        }
      }
    }
  );
  legacy_pre_effect(() => get(popperPlacement), () => {
    if (strict_equals(get(popperPlacement), "left")) {
      set(bsPlacement, "start");
    } else if (strict_equals(get(popperPlacement), "right")) {
      set(bsPlacement, "end");
    } else {
      set(bsPlacement, get(popperPlacement));
    }
  });
  legacy_pre_effect(
    () => (classnames, deep_read_state(className()), get(bsPlacement), deep_read_state(animation()), deep_read_state(isOpen())),
    () => {
      set(classes, classnames(className(), "tooltip", `bs-tooltip-${get(bsPlacement)}`, animation() ? "fade" : false, isOpen() ? "show" : false));
    }
  );
  legacy_pre_effect(() => (deep_read_state(container()), InlineContainer_default, Portal_default), () => {
    set(outer, strict_equals(container(), "inline") ? InlineContainer_default : Portal_default);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => component(node_1, () => get(outer), ($$anchor3, $$component) => {
          $$component($$anchor3, {
            children: wrap_snippet(Tooltip, ($$anchor4, $$slotProps) => {
              var div = root_214();
              attribute_effect(div, () => ({
                ...$$restProps,
                class: get(classes),
                id: id(),
                role: "tooltip",
                "data-bs-theme": theme(),
                "data-bs-delay": delay(),
                "x-placement": get(popperPlacement)
              }));
              var div_1 = sibling(child(div), 2);
              var node_2 = child(div_1);
              {
                var consequent = ($$anchor5) => {
                  var text2 = text();
                  template_effect(() => set_text(text2, content()));
                  append($$anchor5, text2);
                };
                var alternate = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_3 = first_child(fragment_3);
                  slot(node_3, $$props, "default", {}, null);
                  append($$anchor5, fragment_3);
                };
                add_svelte_meta(
                  () => if_block(node_2, ($$render) => {
                    if (content()) $$render(consequent);
                    else $$render(alternate, false);
                  }),
                  "if",
                  Tooltip,
                  230,
                  8
                );
              }
              reset(div_1);
              reset(div);
              bind_this(div, ($$value) => set(tooltipEl, $$value), () => get(tooltipEl));
              append($$anchor4, div);
            }),
            $$slots: { default: true }
          });
        }),
        "component",
        Tooltip,
        217,
        2,
        { componentTag: "svelte:component" }
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (isOpen()) $$render(consequent_1);
      }),
      "if",
      Tooltip,
      216,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tooltip = hmr(Tooltip, () => Tooltip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tooltip[HMR].source;
    set(Tooltip[HMR].source, module.default[HMR].original);
  });
}
var Tooltip_default = Tooltip;
export {
  Accordion_default as Accordion,
  AccordionHeader_default as AccordionHeader,
  AccordionItem_default as AccordionItem,
  Alert_default as Alert,
  Badge_default as Badge,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default as Button,
  ButtonDropdown_default as ButtonDropdown,
  ButtonGroup_default as ButtonGroup,
  ButtonToolbar_default as ButtonToolbar,
  Card_default as Card,
  CardBody_default as CardBody,
  CardColumns_default as CardColumns,
  CardDeck_default as CardDeck,
  CardFooter_default as CardFooter,
  CardGroup_default as CardGroup,
  CardHeader_default as CardHeader,
  CardImg_default as CardImg,
  CardImgOverlay_default as CardImgOverlay,
  CardLink_default as CardLink,
  CardSubtitle_default as CardSubtitle,
  CardText_default as CardText,
  CardTitle_default as CardTitle,
  Carousel_default as Carousel,
  CarouselCaption_default as CarouselCaption,
  CarouselControl_default as CarouselControl,
  CarouselIndicators_default as CarouselIndicators,
  CarouselItem_default as CarouselItem,
  Col_default as Col,
  Collapse_default as Collapse,
  Column_default as Column,
  Container_default as Container,
  Dropdown_default as Dropdown,
  DropdownItem_default as DropdownItem,
  DropdownMenu_default as DropdownMenu,
  DropdownToggle_default as DropdownToggle,
  Fade_default as Fade,
  Figure_default as Figure,
  Form_default as Form,
  FormCheck_default as FormCheck,
  FormFeedback_default as FormFeedback,
  FormGroup_default as FormGroup,
  FormText_default as FormText,
  Icon_default as Icon,
  Image_default as Image,
  InlineContainer_default as InlineContainer,
  Input_default as Input,
  InputGroup_default as InputGroup,
  InputGroupText_default as InputGroupText,
  Jumbotron_default as Jumbotron,
  Label_default as Label,
  ListGroup_default as ListGroup,
  ListGroupItem_default as ListGroupItem,
  Modal_default as Modal,
  ModalBackdrop_default as ModalBackdrop,
  ModalBody_default as ModalBody,
  ModalFooter_default as ModalFooter,
  ModalHeader_default as ModalHeader,
  Nav_default as Nav,
  NavItem_default as NavItem,
  NavLink_default as NavLink,
  Navbar_default as Navbar,
  NavbarBrand_default as NavbarBrand,
  NavbarToggler_default as NavbarToggler,
  Offcanvas_default as Offcanvas,
  OffcanvasBackdrop_default as OffcanvasBackdrop,
  OffcanvasBody_default as OffcanvasBody,
  OffcanvasHeader_default as OffcanvasHeader,
  Pagination_default as Pagination,
  PaginationItem_default as PaginationItem,
  PaginationLink_default as PaginationLink,
  Popover_default as Popover,
  Portal_default as Portal,
  Progress_default as Progress,
  Row_default as Row,
  Spinner_default as Spinner,
  Styles_default as Styles,
  TabContent_default as TabContent,
  TabPane_default as TabPane,
  Table_default as Table,
  Theme_default as Theme,
  ThemeToggler_default as ThemeToggler,
  Toast_default as Toast,
  ToastBody_default as ToastBody,
  ToastHeader_default as ToastHeader,
  Tooltip_default as Tooltip,
  colorMode,
  toggleColorMode,
  useColorMode
};
//# sourceMappingURL=@sveltestrap_sveltestrap.js.map
